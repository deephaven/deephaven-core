// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: deephaven/proto/table.proto
// Protobuf C++ Version: 5.28.1

#include "deephaven/proto/table.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

inline constexpr UpdateByWindowScale_UpdateByWindowTime::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : column_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        window_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByWindowScale_UpdateByWindowTime::UpdateByWindowScale_UpdateByWindowTime(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByWindowScale_UpdateByWindowTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByWindowScale_UpdateByWindowTimeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByWindowScale_UpdateByWindowTimeDefaultTypeInternal() {}
  union {
    UpdateByWindowScale_UpdateByWindowTime _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByWindowScale_UpdateByWindowTimeDefaultTypeInternal _UpdateByWindowScale_UpdateByWindowTime_default_instance_;

inline constexpr UpdateByWindowScale_UpdateByWindowTicks::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : ticks_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByWindowScale_UpdateByWindowTicks::UpdateByWindowScale_UpdateByWindowTicks(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByWindowScale_UpdateByWindowTicksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByWindowScale_UpdateByWindowTicksDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByWindowScale_UpdateByWindowTicksDefaultTypeInternal() {}
  union {
    UpdateByWindowScale_UpdateByWindowTicks _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByWindowScale_UpdateByWindowTicksDefaultTypeInternal _UpdateByWindowScale_UpdateByWindowTicks_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFillDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFillDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFillDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFillDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSumDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSumDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSumDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProductDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProductDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProductDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProductDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMinDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMinDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMinDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMaxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMaxDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMaxDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMaxDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax_default_instance_;

inline constexpr UpdateByDeltaOptions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : null_behavior_{static_cast< ::io::deephaven::proto::backplane::grpc::UpdateByNullBehavior >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByDeltaOptions::UpdateByDeltaOptions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByDeltaOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByDeltaOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByDeltaOptionsDefaultTypeInternal() {}
  union {
    UpdateByDeltaOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByDeltaOptionsDefaultTypeInternal _UpdateByDeltaOptions_default_instance_;

inline constexpr SortDescriptor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : column_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        is_absolute_{false},
        direction_{static_cast< ::io::deephaven::proto::backplane::grpc::SortDescriptor_SortDirection >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SortDescriptor::SortDescriptor(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SortDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SortDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SortDescriptorDefaultTypeInternal() {}
  union {
    SortDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SortDescriptorDefaultTypeInternal _SortDescriptor_default_instance_;

inline constexpr SeekRowResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : result_row_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SeekRowResponse::SeekRowResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SeekRowResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeekRowResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeekRowResponseDefaultTypeInternal() {}
  union {
    SeekRowResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeekRowResponseDefaultTypeInternal _SeekRowResponse_default_instance_;

inline constexpr RunChartDownsampleRequest_ZoomRange::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        min_date_nanos_{::int64_t{0}},
        max_date_nanos_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR RunChartDownsampleRequest_ZoomRange::RunChartDownsampleRequest_ZoomRange(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RunChartDownsampleRequest_ZoomRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunChartDownsampleRequest_ZoomRangeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunChartDownsampleRequest_ZoomRangeDefaultTypeInternal() {}
  union {
    RunChartDownsampleRequest_ZoomRange _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunChartDownsampleRequest_ZoomRangeDefaultTypeInternal _RunChartDownsampleRequest_ZoomRange_default_instance_;

inline constexpr Reference::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : column_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Reference::Reference(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceDefaultTypeInternal() {}
  union {
    Reference _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceDefaultTypeInternal _Reference_default_instance_;

inline constexpr MathContext::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : precision_{0},
        rounding_mode_{static_cast< ::io::deephaven::proto::backplane::grpc::MathContext_RoundingMode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MathContext::MathContext(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MathContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MathContextDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MathContextDefaultTypeInternal() {}
  union {
    MathContext _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MathContextDefaultTypeInternal _MathContext_default_instance_;

inline constexpr Literal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Literal::Literal(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LiteralDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiteralDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiteralDefaultTypeInternal() {}
  union {
    Literal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiteralDefaultTypeInternal _Literal_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR ExportedTableUpdatesRequest::ExportedTableUpdatesRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ExportedTableUpdatesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExportedTableUpdatesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExportedTableUpdatesRequestDefaultTypeInternal() {}
  union {
    ExportedTableUpdatesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExportedTableUpdatesRequestDefaultTypeInternal _ExportedTableUpdatesRequest_default_instance_;

inline constexpr CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : key_columns_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CreateInputTableRequest_InputTableKind_InMemoryKeyBackedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateInputTableRequest_InputTableKind_InMemoryKeyBackedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateInputTableRequest_InputTableKind_InMemoryKeyBackedDefaultTypeInternal() {}
  union {
    CreateInputTableRequest_InputTableKind_InMemoryKeyBacked _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateInputTableRequest_InputTableKind_InMemoryKeyBackedDefaultTypeInternal _CreateInputTableRequest_InputTableKind_InMemoryKeyBacked_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct CreateInputTableRequest_InputTableKind_InMemoryAppendOnlyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateInputTableRequest_InputTableKind_InMemoryAppendOnlyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateInputTableRequest_InputTableKind_InMemoryAppendOnlyDefaultTypeInternal() {}
  union {
    CreateInputTableRequest_InputTableKind_InMemoryAppendOnly _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateInputTableRequest_InputTableKind_InMemoryAppendOnlyDefaultTypeInternal _CreateInputTableRequest_InputTableKind_InMemoryAppendOnly_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR CreateInputTableRequest_InputTableKind_Blink::CreateInputTableRequest_InputTableKind_Blink(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct CreateInputTableRequest_InputTableKind_BlinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateInputTableRequest_InputTableKind_BlinkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateInputTableRequest_InputTableKind_BlinkDefaultTypeInternal() {}
  union {
    CreateInputTableRequest_InputTableKind_Blink _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateInputTableRequest_InputTableKind_BlinkDefaultTypeInternal _CreateInputTableRequest_InputTableKind_Blink_default_instance_;

inline constexpr ComboAggregateRequest_Aggregate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : match_pairs_{},
        column_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{static_cast< ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_AggType >(0)},
        avg_median_{false},
        percentile_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ComboAggregateRequest_Aggregate::ComboAggregateRequest_Aggregate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ComboAggregateRequest_AggregateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComboAggregateRequest_AggregateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComboAggregateRequest_AggregateDefaultTypeInternal() {}
  union {
    ComboAggregateRequest_Aggregate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComboAggregateRequest_AggregateDefaultTypeInternal _ComboAggregateRequest_Aggregate_default_instance_;

inline constexpr Aggregation_AggregationRowKey::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : column_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Aggregation_AggregationRowKey::Aggregation_AggregationRowKey(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Aggregation_AggregationRowKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Aggregation_AggregationRowKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Aggregation_AggregationRowKeyDefaultTypeInternal() {}
  union {
    Aggregation_AggregationRowKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Aggregation_AggregationRowKeyDefaultTypeInternal _Aggregation_AggregationRowKey_default_instance_;

inline constexpr Aggregation_AggregationPartition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : column_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        include_group_by_columns_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Aggregation_AggregationPartition::Aggregation_AggregationPartition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Aggregation_AggregationPartitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Aggregation_AggregationPartitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Aggregation_AggregationPartitionDefaultTypeInternal() {}
  union {
    Aggregation_AggregationPartition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Aggregation_AggregationPartitionDefaultTypeInternal _Aggregation_AggregationPartition_default_instance_;

inline constexpr Aggregation_AggregationCount::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : column_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Aggregation_AggregationCount::Aggregation_AggregationCount(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Aggregation_AggregationCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Aggregation_AggregationCountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Aggregation_AggregationCountDefaultTypeInternal() {}
  union {
    Aggregation_AggregationCount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Aggregation_AggregationCountDefaultTypeInternal _Aggregation_AggregationCount_default_instance_;

inline constexpr AggSpec_AggSpecWeighted::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : weight_column_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecWeighted::AggSpec_AggSpecWeighted(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AggSpec_AggSpecWeightedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecWeightedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecWeightedDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecWeighted _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecWeightedDefaultTypeInternal _AggSpec_AggSpecWeighted_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecVar::AggSpec_AggSpecVar(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AggSpec_AggSpecVarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecVarDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecVarDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecVar _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecVarDefaultTypeInternal _AggSpec_AggSpecVar_default_instance_;

inline constexpr AggSpec_AggSpecTDigest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        compression_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecTDigest::AggSpec_AggSpecTDigest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AggSpec_AggSpecTDigestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecTDigestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecTDigestDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecTDigest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecTDigestDefaultTypeInternal _AggSpec_AggSpecTDigest_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecSum::AggSpec_AggSpecSum(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AggSpec_AggSpecSumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecSumDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecSumDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecSum _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecSumDefaultTypeInternal _AggSpec_AggSpecSum_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecStd::AggSpec_AggSpecStd(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AggSpec_AggSpecStdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecStdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecStdDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecStd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecStdDefaultTypeInternal _AggSpec_AggSpecStd_default_instance_;

inline constexpr AggSpec_AggSpecSortedColumn::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : column_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecSortedColumn::AggSpec_AggSpecSortedColumn(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AggSpec_AggSpecSortedColumnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecSortedColumnDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecSortedColumnDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecSortedColumn _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecSortedColumnDefaultTypeInternal _AggSpec_AggSpecSortedColumn_default_instance_;

inline constexpr AggSpec_AggSpecPercentile::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : percentile_{0},
        average_evenly_divided_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecPercentile::AggSpec_AggSpecPercentile(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AggSpec_AggSpecPercentileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecPercentileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecPercentileDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecPercentile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecPercentileDefaultTypeInternal _AggSpec_AggSpecPercentile_default_instance_;

inline constexpr AggSpec_AggSpecNonUniqueSentinel::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : type_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecNonUniqueSentinel::AggSpec_AggSpecNonUniqueSentinel(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AggSpec_AggSpecNonUniqueSentinelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecNonUniqueSentinelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecNonUniqueSentinelDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecNonUniqueSentinel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecNonUniqueSentinelDefaultTypeInternal _AggSpec_AggSpecNonUniqueSentinel_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecMin::AggSpec_AggSpecMin(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AggSpec_AggSpecMinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecMinDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecMinDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecMin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecMinDefaultTypeInternal _AggSpec_AggSpecMin_default_instance_;

inline constexpr AggSpec_AggSpecMedian::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : average_evenly_divided_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecMedian::AggSpec_AggSpecMedian(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AggSpec_AggSpecMedianDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecMedianDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecMedianDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecMedian _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecMedianDefaultTypeInternal _AggSpec_AggSpecMedian_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecMax::AggSpec_AggSpecMax(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AggSpec_AggSpecMaxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecMaxDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecMaxDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecMax _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecMaxDefaultTypeInternal _AggSpec_AggSpecMax_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecLast::AggSpec_AggSpecLast(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AggSpec_AggSpecLastDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecLastDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecLastDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecLast _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecLastDefaultTypeInternal _AggSpec_AggSpecLast_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecGroup::AggSpec_AggSpecGroup(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AggSpec_AggSpecGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecGroupDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecGroupDefaultTypeInternal _AggSpec_AggSpecGroup_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecFreeze::AggSpec_AggSpecFreeze(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AggSpec_AggSpecFreezeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecFreezeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecFreezeDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecFreeze _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecFreezeDefaultTypeInternal _AggSpec_AggSpecFreeze_default_instance_;

inline constexpr AggSpec_AggSpecFormula::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : formula_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        param_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecFormula::AggSpec_AggSpecFormula(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AggSpec_AggSpecFormulaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecFormulaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecFormulaDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecFormula _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecFormulaDefaultTypeInternal _AggSpec_AggSpecFormula_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecFirst::AggSpec_AggSpecFirst(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AggSpec_AggSpecFirstDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecFirstDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecFirstDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecFirst _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecFirstDefaultTypeInternal _AggSpec_AggSpecFirst_default_instance_;

inline constexpr AggSpec_AggSpecDistinct::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : include_nulls_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecDistinct::AggSpec_AggSpecDistinct(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AggSpec_AggSpecDistinctDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecDistinctDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecDistinctDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecDistinct _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecDistinctDefaultTypeInternal _AggSpec_AggSpecDistinct_default_instance_;

inline constexpr AggSpec_AggSpecCountDistinct::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : count_nulls_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecCountDistinct::AggSpec_AggSpecCountDistinct(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AggSpec_AggSpecCountDistinctDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecCountDistinctDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecCountDistinctDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecCountDistinct _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecCountDistinctDefaultTypeInternal _AggSpec_AggSpecCountDistinct_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecAvg::AggSpec_AggSpecAvg(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AggSpec_AggSpecAvgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecAvgDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecAvgDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecAvg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecAvgDefaultTypeInternal _AggSpec_AggSpecAvg_default_instance_;

inline constexpr AggSpec_AggSpecApproximatePercentile::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        percentile_{0},
        compression_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecApproximatePercentile::AggSpec_AggSpecApproximatePercentile(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AggSpec_AggSpecApproximatePercentileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecApproximatePercentileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecApproximatePercentileDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecApproximatePercentile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecApproximatePercentileDefaultTypeInternal _AggSpec_AggSpecApproximatePercentile_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecAbsSum::AggSpec_AggSpecAbsSum(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct AggSpec_AggSpecAbsSumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecAbsSumDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecAbsSumDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecAbsSum _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecAbsSumDefaultTypeInternal _AggSpec_AggSpecAbsSum_default_instance_;

inline constexpr Value::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Value::Value(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueDefaultTypeInternal() {}
  union {
    Value _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueDefaultTypeInternal _Value_default_instance_;

inline constexpr UpdateByWindowScale::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : type_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByWindowScale::UpdateByWindowScale(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByWindowScaleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByWindowScaleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByWindowScaleDefaultTypeInternal() {}
  union {
    UpdateByWindowScale _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByWindowScaleDefaultTypeInternal _UpdateByWindowScale_default_instance_;

inline constexpr UpdateByRequest_UpdateByOptions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        math_context_{nullptr},
        use_redirection_{false},
        chunk_capacity_{0},
        max_static_sparse_memory_overhead_{0},
        maximum_load_factor_{0},
        target_load_factor_{0},
        initial_hash_table_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOptions::UpdateByRequest_UpdateByOptions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOptionsDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOptionsDefaultTypeInternal _UpdateByRequest_UpdateByOptions_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        options_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDeltaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDeltaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDeltaDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDeltaDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta_default_instance_;

inline constexpr UpdateByEmOptions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        big_value_context_{nullptr},
        on_null_value_{static_cast< ::io::deephaven::proto::backplane::grpc::BadDataBehavior >(0)},
        on_nan_value_{static_cast< ::io::deephaven::proto::backplane::grpc::BadDataBehavior >(0)},
        on_null_time_{static_cast< ::io::deephaven::proto::backplane::grpc::BadDataBehavior >(0)},
        on_negative_delta_time_{static_cast< ::io::deephaven::proto::backplane::grpc::BadDataBehavior >(0)},
        on_zero_delta_time_{static_cast< ::io::deephaven::proto::backplane::grpc::BadDataBehavior >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByEmOptions::UpdateByEmOptions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByEmOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByEmOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByEmOptionsDefaultTypeInternal() {}
  union {
    UpdateByEmOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByEmOptionsDefaultTypeInternal _UpdateByEmOptions_default_instance_;

inline constexpr TimeTableRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        result_id_{nullptr},
        blink_table_{false},
        start_time_{},
        period_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR TimeTableRequest::TimeTableRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TimeTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeTableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeTableRequestDefaultTypeInternal() {}
  union {
    TimeTableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeTableRequestDefaultTypeInternal _TimeTableRequest_default_instance_;

inline constexpr TableReference::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : ref_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR TableReference::TableReference(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TableReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableReferenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableReferenceDefaultTypeInternal() {}
  union {
    TableReference _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableReferenceDefaultTypeInternal _TableReference_default_instance_;

inline constexpr SeekRowRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        column_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        source_id_{nullptr},
        seek_value_{nullptr},
        starting_row_{::int64_t{0}},
        insensitive_{false},
        contains_{false},
        is_backward_{false} {}

template <typename>
PROTOBUF_CONSTEXPR SeekRowRequest::SeekRowRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SeekRowRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeekRowRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeekRowRequestDefaultTypeInternal() {}
  union {
    SeekRowRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeekRowRequestDefaultTypeInternal _SeekRowRequest_default_instance_;

inline constexpr SearchCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : optional_references_{},
        search_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SearchCondition::SearchCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SearchConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchConditionDefaultTypeInternal() {}
  union {
    SearchCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchConditionDefaultTypeInternal _SearchCondition_default_instance_;

inline constexpr MatchesCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        regex_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reference_{nullptr},
        case_sensitivity_{static_cast< ::io::deephaven::proto::backplane::grpc::CaseSensitivity >(0)},
        match_type_{static_cast< ::io::deephaven::proto::backplane::grpc::MatchType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR MatchesCondition::MatchesCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MatchesConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchesConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchesConditionDefaultTypeInternal() {}
  union {
    MatchesCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchesConditionDefaultTypeInternal _MatchesCondition_default_instance_;

inline constexpr IsNullCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        reference_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR IsNullCondition::IsNullCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IsNullConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsNullConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsNullConditionDefaultTypeInternal() {}
  union {
    IsNullCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsNullConditionDefaultTypeInternal _IsNullCondition_default_instance_;

inline constexpr ExportedTableUpdateMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        update_failure_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        export_id_{nullptr},
        size_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR ExportedTableUpdateMessage::ExportedTableUpdateMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExportedTableUpdateMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExportedTableUpdateMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExportedTableUpdateMessageDefaultTypeInternal() {}
  union {
    ExportedTableUpdateMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExportedTableUpdateMessageDefaultTypeInternal _ExportedTableUpdateMessage_default_instance_;

inline constexpr EmptyTableRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        result_id_{nullptr},
        size_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR EmptyTableRequest::EmptyTableRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EmptyTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyTableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyTableRequestDefaultTypeInternal() {}
  union {
    EmptyTableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyTableRequestDefaultTypeInternal _EmptyTableRequest_default_instance_;

inline constexpr CreateInputTableRequest_InputTableKind::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : kind_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR CreateInputTableRequest_InputTableKind::CreateInputTableRequest_InputTableKind(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CreateInputTableRequest_InputTableKindDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateInputTableRequest_InputTableKindDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateInputTableRequest_InputTableKindDefaultTypeInternal() {}
  union {
    CreateInputTableRequest_InputTableKind _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateInputTableRequest_InputTableKindDefaultTypeInternal _CreateInputTableRequest_InputTableKind_default_instance_;

inline constexpr ContainsCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        search_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reference_{nullptr},
        case_sensitivity_{static_cast< ::io::deephaven::proto::backplane::grpc::CaseSensitivity >(0)},
        match_type_{static_cast< ::io::deephaven::proto::backplane::grpc::MatchType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR ContainsCondition::ContainsCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ContainsConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContainsConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContainsConditionDefaultTypeInternal() {}
  union {
    ContainsCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContainsConditionDefaultTypeInternal _ContainsCondition_default_instance_;

inline constexpr AggSpec_AggSpecUnique::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        non_unique_sentinel_{nullptr},
        include_nulls_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecUnique::AggSpec_AggSpecUnique(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AggSpec_AggSpecUniqueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecUniqueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecUniqueDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecUnique _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecUniqueDefaultTypeInternal _AggSpec_AggSpecUnique_default_instance_;

inline constexpr AggSpec_AggSpecSorted::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : columns_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AggSpec_AggSpecSorted::AggSpec_AggSpecSorted(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AggSpec_AggSpecSortedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpec_AggSpecSortedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpec_AggSpecSortedDefaultTypeInternal() {}
  union {
    AggSpec_AggSpecSorted _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpec_AggSpecSortedDefaultTypeInternal _AggSpec_AggSpecSorted_default_instance_;

inline constexpr WhereInRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        columns_to_match_{},
        result_id_{nullptr},
        left_id_{nullptr},
        right_id_{nullptr},
        inverted_{false} {}

template <typename>
PROTOBUF_CONSTEXPR WhereInRequest::WhereInRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WhereInRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WhereInRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WhereInRequestDefaultTypeInternal() {}
  union {
    WhereInRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WhereInRequestDefaultTypeInternal _WhereInRequest_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        weight_column_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reverse_window_scale_{nullptr},
        forward_window_scale_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvgDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvgDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvgDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        reverse_window_scale_{nullptr},
        forward_window_scale_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSumDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSumDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSumDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        reverse_window_scale_{nullptr},
        forward_window_scale_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStdDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStdDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        reverse_window_scale_{nullptr},
        forward_window_scale_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProductDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProductDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProductDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProductDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        reverse_window_scale_{nullptr},
        forward_window_scale_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMinDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMinDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMinDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        reverse_window_scale_{nullptr},
        forward_window_scale_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMaxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMaxDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMaxDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMaxDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        reverse_window_scale_{nullptr},
        forward_window_scale_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroupDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroupDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        formula_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        param_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reverse_window_scale_{nullptr},
        forward_window_scale_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormulaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormulaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormulaDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormulaDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        reverse_window_scale_{nullptr},
        forward_window_scale_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCountDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCountDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        reverse_window_scale_{nullptr},
        forward_window_scale_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvgDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvgDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvgDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        options_{nullptr},
        window_scale_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmsDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmsDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        options_{nullptr},
        window_scale_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmaDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmaDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        options_{nullptr},
        window_scale_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStdDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStdDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        options_{nullptr},
        window_scale_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMinDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMinDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMinDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        options_{nullptr},
        window_scale_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMaxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMaxDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMaxDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMaxDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax_default_instance_;

inline constexpr UnstructuredFilterTableRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        filters_{},
        result_id_{nullptr},
        source_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UnstructuredFilterTableRequest::UnstructuredFilterTableRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UnstructuredFilterTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnstructuredFilterTableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnstructuredFilterTableRequestDefaultTypeInternal() {}
  union {
    UnstructuredFilterTableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnstructuredFilterTableRequestDefaultTypeInternal _UnstructuredFilterTableRequest_default_instance_;

inline constexpr UngroupRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        columns_to_ungroup_{},
        result_id_{nullptr},
        source_id_{nullptr},
        null_fill_{false} {}

template <typename>
PROTOBUF_CONSTEXPR UngroupRequest::UngroupRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UngroupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UngroupRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UngroupRequestDefaultTypeInternal() {}
  union {
    UngroupRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UngroupRequestDefaultTypeInternal _UngroupRequest_default_instance_;

inline constexpr SortTableRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        sorts_{},
        result_id_{nullptr},
        source_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SortTableRequest::SortTableRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SortTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SortTableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SortTableRequestDefaultTypeInternal() {}
  union {
    SortTableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SortTableRequestDefaultTypeInternal _SortTableRequest_default_instance_;

inline constexpr SnapshotWhenTableRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        stamp_columns_{},
        result_id_{nullptr},
        base_id_{nullptr},
        trigger_id_{nullptr},
        initial_{false},
        incremental_{false},
        history_{false} {}

template <typename>
PROTOBUF_CONSTEXPR SnapshotWhenTableRequest::SnapshotWhenTableRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SnapshotWhenTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotWhenTableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotWhenTableRequestDefaultTypeInternal() {}
  union {
    SnapshotWhenTableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotWhenTableRequestDefaultTypeInternal _SnapshotWhenTableRequest_default_instance_;

inline constexpr SnapshotTableRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        result_id_{nullptr},
        source_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SnapshotTableRequest::SnapshotTableRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SnapshotTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotTableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotTableRequestDefaultTypeInternal() {}
  union {
    SnapshotTableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotTableRequestDefaultTypeInternal _SnapshotTableRequest_default_instance_;

inline constexpr SelectOrUpdateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        column_specs_{},
        result_id_{nullptr},
        source_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SelectOrUpdateRequest::SelectOrUpdateRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SelectOrUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectOrUpdateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectOrUpdateRequestDefaultTypeInternal() {}
  union {
    SelectOrUpdateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectOrUpdateRequestDefaultTypeInternal _SelectOrUpdateRequest_default_instance_;

inline constexpr SelectDistinctRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        column_names_{},
        result_id_{nullptr},
        source_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SelectDistinctRequest::SelectDistinctRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SelectDistinctRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectDistinctRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectDistinctRequestDefaultTypeInternal() {}
  union {
    SelectDistinctRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectDistinctRequestDefaultTypeInternal _SelectDistinctRequest_default_instance_;

inline constexpr RunChartDownsampleRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        y_column_names_{},
        x_column_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_id_{nullptr},
        source_id_{nullptr},
        zoom_range_{nullptr},
        pixel_count_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RunChartDownsampleRequest::RunChartDownsampleRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RunChartDownsampleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunChartDownsampleRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunChartDownsampleRequestDefaultTypeInternal() {}
  union {
    RunChartDownsampleRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunChartDownsampleRequestDefaultTypeInternal _RunChartDownsampleRequest_default_instance_;

inline constexpr NaturalJoinTablesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        columns_to_match_{},
        columns_to_add_{},
        result_id_{nullptr},
        left_id_{nullptr},
        right_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR NaturalJoinTablesRequest::NaturalJoinTablesRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct NaturalJoinTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NaturalJoinTablesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NaturalJoinTablesRequestDefaultTypeInternal() {}
  union {
    NaturalJoinTablesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NaturalJoinTablesRequestDefaultTypeInternal _NaturalJoinTablesRequest_default_instance_;

inline constexpr MultiJoinInput::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        columns_to_match_{},
        columns_to_add_{},
        source_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MultiJoinInput::MultiJoinInput(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MultiJoinInputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiJoinInputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiJoinInputDefaultTypeInternal() {}
  union {
    MultiJoinInput _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiJoinInputDefaultTypeInternal _MultiJoinInput_default_instance_;

inline constexpr MetaTableRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        result_id_{nullptr},
        source_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MetaTableRequest::MetaTableRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MetaTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetaTableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetaTableRequestDefaultTypeInternal() {}
  union {
    MetaTableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetaTableRequestDefaultTypeInternal _MetaTableRequest_default_instance_;

inline constexpr MergeTablesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        source_ids_{},
        key_column_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MergeTablesRequest::MergeTablesRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MergeTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MergeTablesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MergeTablesRequestDefaultTypeInternal() {}
  union {
    MergeTablesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MergeTablesRequestDefaultTypeInternal _MergeTablesRequest_default_instance_;

inline constexpr LeftJoinTablesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        columns_to_match_{},
        columns_to_add_{},
        result_id_{nullptr},
        left_id_{nullptr},
        right_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR LeftJoinTablesRequest::LeftJoinTablesRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LeftJoinTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeftJoinTablesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeftJoinTablesRequestDefaultTypeInternal() {}
  union {
    LeftJoinTablesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeftJoinTablesRequestDefaultTypeInternal _LeftJoinTablesRequest_default_instance_;

inline constexpr InvokeCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        arguments_{},
        method_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR InvokeCondition::InvokeCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InvokeConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvokeConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvokeConditionDefaultTypeInternal() {}
  union {
    InvokeCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvokeConditionDefaultTypeInternal _InvokeCondition_default_instance_;

inline constexpr InCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        candidates_{},
        target_{nullptr},
        case_sensitivity_{static_cast< ::io::deephaven::proto::backplane::grpc::CaseSensitivity >(0)},
        match_type_{static_cast< ::io::deephaven::proto::backplane::grpc::MatchType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR InCondition::InCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InConditionDefaultTypeInternal() {}
  union {
    InCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InConditionDefaultTypeInternal _InCondition_default_instance_;

inline constexpr HeadOrTailRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        result_id_{nullptr},
        source_id_{nullptr},
        num_rows_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR HeadOrTailRequest::HeadOrTailRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HeadOrTailRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeadOrTailRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeadOrTailRequestDefaultTypeInternal() {}
  union {
    HeadOrTailRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeadOrTailRequestDefaultTypeInternal _HeadOrTailRequest_default_instance_;

inline constexpr HeadOrTailByRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        group_by_column_specs_{},
        result_id_{nullptr},
        source_id_{nullptr},
        num_rows_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR HeadOrTailByRequest::HeadOrTailByRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HeadOrTailByRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeadOrTailByRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeadOrTailByRequestDefaultTypeInternal() {}
  union {
    HeadOrTailByRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeadOrTailByRequestDefaultTypeInternal _HeadOrTailByRequest_default_instance_;

inline constexpr FlattenRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        result_id_{nullptr},
        source_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR FlattenRequest::FlattenRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FlattenRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlattenRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlattenRequestDefaultTypeInternal() {}
  union {
    FlattenRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlattenRequestDefaultTypeInternal _FlattenRequest_default_instance_;

inline constexpr FetchTableRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        source_id_{nullptr},
        result_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR FetchTableRequest::FetchTableRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FetchTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchTableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchTableRequestDefaultTypeInternal() {}
  union {
    FetchTableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchTableRequestDefaultTypeInternal _FetchTableRequest_default_instance_;

inline constexpr ExportedTableCreationResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        error_info_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        schema_header_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_id_{nullptr},
        size_{::int64_t{0}},
        success_{false},
        is_static_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ExportedTableCreationResponse::ExportedTableCreationResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExportedTableCreationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExportedTableCreationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExportedTableCreationResponseDefaultTypeInternal() {}
  union {
    ExportedTableCreationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExportedTableCreationResponseDefaultTypeInternal _ExportedTableCreationResponse_default_instance_;

inline constexpr ExactJoinTablesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        columns_to_match_{},
        columns_to_add_{},
        result_id_{nullptr},
        left_id_{nullptr},
        right_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ExactJoinTablesRequest::ExactJoinTablesRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExactJoinTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExactJoinTablesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExactJoinTablesRequestDefaultTypeInternal() {}
  union {
    ExactJoinTablesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExactJoinTablesRequestDefaultTypeInternal _ExactJoinTablesRequest_default_instance_;

inline constexpr DropColumnsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        column_names_{},
        result_id_{nullptr},
        source_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DropColumnsRequest::DropColumnsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DropColumnsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DropColumnsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DropColumnsRequestDefaultTypeInternal() {}
  union {
    DropColumnsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DropColumnsRequestDefaultTypeInternal _DropColumnsRequest_default_instance_;

inline constexpr CrossJoinTablesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        columns_to_match_{},
        columns_to_add_{},
        result_id_{nullptr},
        left_id_{nullptr},
        right_id_{nullptr},
        reserve_bits_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CrossJoinTablesRequest::CrossJoinTablesRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CrossJoinTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrossJoinTablesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrossJoinTablesRequestDefaultTypeInternal() {}
  union {
    CrossJoinTablesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrossJoinTablesRequestDefaultTypeInternal _CrossJoinTablesRequest_default_instance_;

inline constexpr CreateInputTableRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        result_id_{nullptr},
        kind_{nullptr},
        definition_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR CreateInputTableRequest::CreateInputTableRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CreateInputTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateInputTableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateInputTableRequestDefaultTypeInternal() {}
  union {
    CreateInputTableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateInputTableRequestDefaultTypeInternal _CreateInputTableRequest_default_instance_;

inline constexpr CompareCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        lhs_{nullptr},
        rhs_{nullptr},
        operation_{static_cast< ::io::deephaven::proto::backplane::grpc::CompareCondition_CompareOperation >(0)},
        case_sensitivity_{static_cast< ::io::deephaven::proto::backplane::grpc::CaseSensitivity >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR CompareCondition::CompareCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CompareConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompareConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompareConditionDefaultTypeInternal() {}
  union {
    CompareCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompareConditionDefaultTypeInternal _CompareCondition_default_instance_;

inline constexpr ComboAggregateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        aggregates_{},
        group_by_columns_{},
        result_id_{nullptr},
        source_id_{nullptr},
        force_combo_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ComboAggregateRequest::ComboAggregateRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ComboAggregateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComboAggregateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComboAggregateRequestDefaultTypeInternal() {}
  union {
    ComboAggregateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComboAggregateRequestDefaultTypeInternal _ComboAggregateRequest_default_instance_;

inline constexpr ColumnStatisticsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        column_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_id_{nullptr},
        source_id_{nullptr},
        unique_value_limit_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ColumnStatisticsRequest::ColumnStatisticsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ColumnStatisticsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnStatisticsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnStatisticsRequestDefaultTypeInternal() {}
  union {
    ColumnStatisticsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnStatisticsRequestDefaultTypeInternal _ColumnStatisticsRequest_default_instance_;

inline constexpr AsOfJoinTablesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        columns_to_match_{},
        columns_to_add_{},
        result_id_{nullptr},
        left_id_{nullptr},
        right_id_{nullptr},
        as_of_match_rule_{static_cast< ::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest_MatchRule >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR AsOfJoinTablesRequest::AsOfJoinTablesRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AsOfJoinTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AsOfJoinTablesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AsOfJoinTablesRequestDefaultTypeInternal() {}
  union {
    AsOfJoinTablesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AsOfJoinTablesRequestDefaultTypeInternal _AsOfJoinTablesRequest_default_instance_;

inline constexpr ApplyPreviewColumnsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        source_id_{nullptr},
        result_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ApplyPreviewColumnsRequest::ApplyPreviewColumnsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ApplyPreviewColumnsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApplyPreviewColumnsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApplyPreviewColumnsRequestDefaultTypeInternal() {}
  union {
    ApplyPreviewColumnsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApplyPreviewColumnsRequestDefaultTypeInternal _ApplyPreviewColumnsRequest_default_instance_;

inline constexpr AjRajTablesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        exact_match_columns_{},
        columns_to_add_{},
        as_of_column_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_id_{nullptr},
        left_id_{nullptr},
        right_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AjRajTablesRequest::AjRajTablesRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AjRajTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AjRajTablesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AjRajTablesRequestDefaultTypeInternal() {}
  union {
    AjRajTablesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AjRajTablesRequestDefaultTypeInternal _AjRajTablesRequest_default_instance_;

inline constexpr AggSpec::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : type_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR AggSpec::AggSpec(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AggSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggSpecDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggSpecDefaultTypeInternal() {}
  union {
    AggSpec _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggSpecDefaultTypeInternal _AggSpec_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : type_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpecDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpecDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpecDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_default_instance_;

inline constexpr MultiJoinTablesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        multi_join_inputs_{},
        result_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MultiJoinTablesRequest::MultiJoinTablesRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MultiJoinTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiJoinTablesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiJoinTablesRequestDefaultTypeInternal() {}
  union {
    MultiJoinTablesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiJoinTablesRequestDefaultTypeInternal _MultiJoinTablesRequest_default_instance_;

inline constexpr AndCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : filters_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AndCondition::AndCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AndConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AndConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AndConditionDefaultTypeInternal() {}
  union {
    AndCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AndConditionDefaultTypeInternal _AndCondition_default_instance_;

inline constexpr Condition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Condition::Condition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConditionDefaultTypeInternal() {}
  union {
    Condition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConditionDefaultTypeInternal _Condition_default_instance_;

inline constexpr NotCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        filter_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR NotCondition::NotCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct NotConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotConditionDefaultTypeInternal() {}
  union {
    NotCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotConditionDefaultTypeInternal _NotCondition_default_instance_;

inline constexpr OrCondition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : filters_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OrCondition::OrCondition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OrConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrConditionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrConditionDefaultTypeInternal() {}
  union {
    OrCondition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrConditionDefaultTypeInternal _OrCondition_default_instance_;

inline constexpr Aggregation_AggregationColumns::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        match_pairs_{},
        spec_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Aggregation_AggregationColumns::Aggregation_AggregationColumns(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Aggregation_AggregationColumnsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Aggregation_AggregationColumnsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Aggregation_AggregationColumnsDefaultTypeInternal() {}
  union {
    Aggregation_AggregationColumns _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Aggregation_AggregationColumnsDefaultTypeInternal _Aggregation_AggregationColumns_default_instance_;

inline constexpr AggregateAllRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        group_by_columns_{},
        result_id_{nullptr},
        source_id_{nullptr},
        spec_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AggregateAllRequest::AggregateAllRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AggregateAllRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregateAllRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregateAllRequestDefaultTypeInternal() {}
  union {
    AggregateAllRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregateAllRequestDefaultTypeInternal _AggregateAllRequest_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation_UpdateByColumn::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        match_pairs_{},
        spec_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumn::UpdateByRequest_UpdateByOperation_UpdateByColumn(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperation_UpdateByColumnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation_UpdateByColumnDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperation_UpdateByColumnDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation_UpdateByColumn _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperation_UpdateByColumnDefaultTypeInternal _UpdateByRequest_UpdateByOperation_UpdateByColumn_default_instance_;

inline constexpr FilterTableRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        filters_{},
        result_id_{nullptr},
        source_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR FilterTableRequest::FilterTableRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FilterTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilterTableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilterTableRequestDefaultTypeInternal() {}
  union {
    FilterTableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilterTableRequestDefaultTypeInternal _FilterTableRequest_default_instance_;

inline constexpr Aggregation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : type_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Aggregation::Aggregation(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AggregationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregationDefaultTypeInternal() {}
  union {
    Aggregation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregationDefaultTypeInternal _Aggregation_default_instance_;

inline constexpr UpdateByRequest_UpdateByOperation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : type_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperation::UpdateByRequest_UpdateByOperation(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequest_UpdateByOperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequest_UpdateByOperationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequest_UpdateByOperationDefaultTypeInternal() {}
  union {
    UpdateByRequest_UpdateByOperation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequest_UpdateByOperationDefaultTypeInternal _UpdateByRequest_UpdateByOperation_default_instance_;

inline constexpr RangeJoinTablesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        exact_match_columns_{},
        aggregations_{},
        left_start_column_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        right_range_column_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        left_end_column_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        range_match_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_id_{nullptr},
        left_id_{nullptr},
        right_id_{nullptr},
        range_start_rule_{static_cast< ::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest_RangeStartRule >(0)},
        range_end_rule_{static_cast< ::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest_RangeEndRule >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RangeJoinTablesRequest::RangeJoinTablesRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RangeJoinTablesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeJoinTablesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeJoinTablesRequestDefaultTypeInternal() {}
  union {
    RangeJoinTablesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeJoinTablesRequestDefaultTypeInternal _RangeJoinTablesRequest_default_instance_;

inline constexpr AggregateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        aggregations_{},
        group_by_columns_{},
        result_id_{nullptr},
        source_id_{nullptr},
        initial_groups_id_{nullptr},
        preserve_empty_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AggregateRequest::AggregateRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AggregateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregateRequestDefaultTypeInternal() {}
  union {
    AggregateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregateRequestDefaultTypeInternal _AggregateRequest_default_instance_;

inline constexpr UpdateByRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        operations_{},
        group_by_columns_{},
        result_id_{nullptr},
        source_id_{nullptr},
        options_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateByRequest::UpdateByRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateByRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateByRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateByRequestDefaultTypeInternal() {}
  union {
    UpdateByRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateByRequestDefaultTypeInternal _UpdateByRequest_default_instance_;

inline constexpr BatchTableRequest_Operation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : op_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR BatchTableRequest_Operation::BatchTableRequest_Operation(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BatchTableRequest_OperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchTableRequest_OperationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchTableRequest_OperationDefaultTypeInternal() {}
  union {
    BatchTableRequest_Operation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchTableRequest_OperationDefaultTypeInternal _BatchTableRequest_Operation_default_instance_;

inline constexpr BatchTableRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : ops_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BatchTableRequest::BatchTableRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BatchTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchTableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchTableRequestDefaultTypeInternal() {}
  union {
    BatchTableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchTableRequestDefaultTypeInternal _BatchTableRequest_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[12];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_deephaven_2fproto_2ftable_2eproto = nullptr;
const ::uint32_t
    TableStruct_deephaven_2fproto_2ftable_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TableReference, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TableReference, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TableReference, _impl_.ref_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, _impl_.error_info_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, _impl_.schema_header_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, _impl_.is_static_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse, _impl_.size_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchTableRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchTableRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchTableRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchTableRequest, _impl_.result_id_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest, _impl_.result_id_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage, _impl_.export_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage, _impl_.size_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage, _impl_.update_failure_message_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::EmptyTableRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::EmptyTableRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::EmptyTableRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::EmptyTableRequest, _impl_.size_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, _impl_.result_id_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, _impl_.blink_table_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, _impl_.start_time_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, _impl_.period_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest, _impl_.column_specs_),
        0,
        1,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MathContext, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MathContext, _impl_.precision_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MathContext, _impl_.rounding_mode_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks, _impl_.ticks_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime, _impl_.column_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime, _impl_.window_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByEmOptions, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByEmOptions, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByEmOptions, _impl_.on_null_value_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByEmOptions, _impl_.on_nan_value_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByEmOptions, _impl_.on_null_time_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByEmOptions, _impl_.on_negative_delta_time_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByEmOptions, _impl_.on_zero_delta_time_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByEmOptions, _impl_.big_value_context_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByDeltaOptions, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByDeltaOptions, _impl_.null_behavior_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _impl_.use_redirection_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _impl_.chunk_capacity_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _impl_.max_static_sparse_memory_overhead_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _impl_.initial_hash_table_size_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _impl_.maximum_load_factor_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _impl_.target_load_factor_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions, _impl_.math_context_),
        1,
        2,
        3,
        6,
        4,
        5,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _impl_.options_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _impl_.window_scale_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _impl_.options_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _impl_.window_scale_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _impl_.options_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _impl_.window_scale_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _impl_.options_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _impl_.window_scale_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _impl_.options_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _impl_.window_scale_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta, _impl_.options_),
        0,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _impl_.reverse_window_scale_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _impl_.forward_window_scale_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _impl_.reverse_window_scale_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _impl_.forward_window_scale_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _impl_.reverse_window_scale_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _impl_.forward_window_scale_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _impl_.reverse_window_scale_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _impl_.forward_window_scale_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _impl_.reverse_window_scale_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _impl_.forward_window_scale_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _impl_.reverse_window_scale_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _impl_.forward_window_scale_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _impl_.reverse_window_scale_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _impl_.forward_window_scale_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _impl_.reverse_window_scale_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _impl_.forward_window_scale_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_.reverse_window_scale_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_.forward_window_scale_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_.weight_column_),
        0,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.reverse_window_scale_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.forward_window_scale_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.formula_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.param_token_),
        0,
        1,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn, _impl_.spec_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn, _impl_.match_pairs_),
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest, _impl_.options_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest, _impl_.operations_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest, _impl_.group_by_columns_),
        0,
        1,
        2,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest, _impl_.column_names_),
        0,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DropColumnsRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DropColumnsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DropColumnsRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DropColumnsRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::DropColumnsRequest, _impl_.column_names_),
        0,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest, _impl_.filters_),
        0,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest, _impl_.num_rows_),
        0,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, _impl_.num_rows_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest, _impl_.group_by_column_specs_),
        0,
        1,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, _impl_.null_fill_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UngroupRequest, _impl_.columns_to_ungroup_),
        0,
        1,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeTablesRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeTablesRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeTablesRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeTablesRequest, _impl_.source_ids_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeTablesRequest, _impl_.key_column_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest, _impl_.source_id_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest, _impl_.base_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest, _impl_.trigger_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest, _impl_.initial_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest, _impl_.incremental_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest, _impl_.history_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest, _impl_.stamp_columns_),
        0,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, _impl_.left_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, _impl_.right_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, _impl_.columns_to_match_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, _impl_.columns_to_add_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest, _impl_.reserve_bits_),
        0,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, _impl_.left_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, _impl_.right_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, _impl_.columns_to_match_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest, _impl_.columns_to_add_),
        0,
        1,
        2,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, _impl_.left_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, _impl_.right_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, _impl_.columns_to_match_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest, _impl_.columns_to_add_),
        0,
        1,
        2,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, _impl_.left_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, _impl_.right_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, _impl_.columns_to_match_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest, _impl_.columns_to_add_),
        0,
        1,
        2,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, _impl_.left_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, _impl_.right_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, _impl_.columns_to_match_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, _impl_.columns_to_add_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest, _impl_.as_of_match_rule_),
        0,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest, _impl_.left_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest, _impl_.right_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest, _impl_.exact_match_columns_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest, _impl_.as_of_column_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest, _impl_.columns_to_add_),
        0,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MultiJoinInput, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MultiJoinInput, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MultiJoinInput, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MultiJoinInput, _impl_.columns_to_match_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MultiJoinInput, _impl_.columns_to_add_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MultiJoinTablesRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MultiJoinTablesRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MultiJoinTablesRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MultiJoinTablesRequest, _impl_.multi_join_inputs_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.left_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.right_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.exact_match_columns_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.left_start_column_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.range_start_rule_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.right_range_column_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.range_end_rule_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.left_end_column_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.aggregations_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest, _impl_.range_match_),
        0,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, _impl_.match_pairs_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, _impl_.column_name_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, _impl_.percentile_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate, _impl_.avg_median_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, _impl_.aggregates_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, _impl_.group_by_columns_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest, _impl_.force_combo_),
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateAllRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateAllRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateAllRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateAllRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateAllRequest, _impl_.spec_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateAllRequest, _impl_.group_by_columns_),
        0,
        1,
        2,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile, _impl_.percentile_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile, _impl_.compression_),
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct, _impl_.count_nulls_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct, _impl_.include_nulls_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula, _impl_.formula_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula, _impl_.param_token_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian, _impl_.average_evenly_divided_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile, _impl_.percentile_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile, _impl_.average_evenly_divided_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted, _impl_.columns_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSortedColumn, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSortedColumn, _impl_.column_name_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest, _impl_.compression_),
        0,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique, _impl_.include_nulls_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique, _impl_.non_unique_sentinel_),
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel, _impl_.type_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted, _impl_.weight_column_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAbsSum, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAvg, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFirst, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFreeze, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecGroup, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecLast, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMax, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMin, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecStd, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSum, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecVar, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateRequest, _impl_.initial_groups_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateRequest, _impl_.preserve_empty_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateRequest, _impl_.aggregations_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggregateRequest, _impl_.group_by_columns_),
        0,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns, _impl_.spec_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns, _impl_.match_pairs_),
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount, _impl_.column_name_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey, _impl_.column_name_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition, _impl_.column_name_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition, _impl_.include_group_by_columns_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation, _impl_.type_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortDescriptor, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortDescriptor, _impl_.column_name_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortDescriptor, _impl_.is_absolute_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortDescriptor, _impl_.direction_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortTableRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortTableRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortTableRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortTableRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SortTableRequest, _impl_.sorts_),
        0,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterTableRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterTableRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterTableRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterTableRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FilterTableRequest, _impl_.filters_),
        0,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowRequest, _impl_.starting_row_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowRequest, _impl_.column_name_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowRequest, _impl_.seek_value_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowRequest, _impl_.insensitive_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowRequest, _impl_.contains_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowRequest, _impl_.is_backward_),
        0,
        ~0u,
        ~0u,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SeekRowResponse, _impl_.result_row_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Reference, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Reference, _impl_.column_name_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Literal, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Literal, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Literal, _impl_.value_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Value, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Value, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Value, _impl_.data_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Condition, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Condition, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Condition, _impl_.data_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AndCondition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AndCondition, _impl_.filters_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::OrCondition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::OrCondition, _impl_.filters_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NotCondition, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NotCondition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::NotCondition, _impl_.filter_),
        0,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CompareCondition, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CompareCondition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CompareCondition, _impl_.operation_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CompareCondition, _impl_.case_sensitivity_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CompareCondition, _impl_.lhs_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CompareCondition, _impl_.rhs_),
        ~0u,
        ~0u,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InCondition, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InCondition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InCondition, _impl_.target_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InCondition, _impl_.candidates_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InCondition, _impl_.case_sensitivity_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InCondition, _impl_.match_type_),
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InvokeCondition, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InvokeCondition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InvokeCondition, _impl_.method_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InvokeCondition, _impl_.target_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::InvokeCondition, _impl_.arguments_),
        ~0u,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::IsNullCondition, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::IsNullCondition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::IsNullCondition, _impl_.reference_),
        0,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MatchesCondition, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MatchesCondition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MatchesCondition, _impl_.reference_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MatchesCondition, _impl_.regex_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MatchesCondition, _impl_.case_sensitivity_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MatchesCondition, _impl_.match_type_),
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ContainsCondition, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ContainsCondition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ContainsCondition, _impl_.reference_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ContainsCondition, _impl_.search_string_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ContainsCondition, _impl_.case_sensitivity_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ContainsCondition, _impl_.match_type_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SearchCondition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SearchCondition, _impl_.search_string_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::SearchCondition, _impl_.optional_references_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FlattenRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FlattenRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FlattenRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FlattenRequest, _impl_.source_id_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MetaTableRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MetaTableRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MetaTableRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MetaTableRequest, _impl_.source_id_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange, _impl_.min_date_nanos_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange, _impl_.max_date_nanos_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, _impl_.pixel_count_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, _impl_.zoom_range_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, _impl_.x_column_name_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest, _impl_.y_column_names_),
        0,
        1,
        ~0u,
        2,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked, _impl_.key_columns_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_Blink, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind, _impl_.kind_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest, _impl_.result_id_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest, _impl_.kind_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest, _impl_.definition_),
        0,
        ~0u,
        ~0u,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::WhereInRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::WhereInRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::WhereInRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::WhereInRequest, _impl_.left_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::WhereInRequest, _impl_.right_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::WhereInRequest, _impl_.inverted_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::WhereInRequest, _impl_.columns_to_match_),
        0,
        1,
        2,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest, _impl_.source_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest, _impl_.column_name_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest, _impl_.unique_value_limit_),
        0,
        1,
        ~0u,
        2,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation, _impl_.op_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest, _impl_.ops_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::TableReference)},
        {11, 25, -1, sizeof(::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse)},
        {31, 41, -1, sizeof(::io::deephaven::proto::backplane::grpc::FetchTableRequest)},
        {43, 53, -1, sizeof(::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest)},
        {55, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest)},
        {63, 74, -1, sizeof(::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage)},
        {77, 87, -1, sizeof(::io::deephaven::proto::backplane::grpc::EmptyTableRequest)},
        {89, 105, -1, sizeof(::io::deephaven::proto::backplane::grpc::TimeTableRequest)},
        {111, 122, -1, sizeof(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest)},
        {125, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::MathContext)},
        {135, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks)},
        {144, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime)},
        {156, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale)},
        {167, 181, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByEmOptions)},
        {187, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByDeltaOptions)},
        {196, 211, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions)},
        {218, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum)},
        {226, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin)},
        {234, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax)},
        {242, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct)},
        {250, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill)},
        {258, 268, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma)},
        {270, 280, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms)},
        {282, 292, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin)},
        {294, 304, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax)},
        {306, 316, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd)},
        {318, 327, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta)},
        {328, 338, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum)},
        {340, 350, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup)},
        {352, 362, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg)},
        {364, 374, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin)},
        {376, 386, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax)},
        {388, 398, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct)},
        {400, 410, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount)},
        {412, 422, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd)},
        {424, 435, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg)},
        {438, 450, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula)},
        {454, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec)},
        {484, 494, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn)},
        {496, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation)},
        {506, 519, -1, sizeof(::io::deephaven::proto::backplane::grpc::UpdateByRequest)},
        {524, 535, -1, sizeof(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest)},
        {538, 549, -1, sizeof(::io::deephaven::proto::backplane::grpc::DropColumnsRequest)},
        {552, 563, -1, sizeof(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest)},
        {566, 577, -1, sizeof(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest)},
        {580, 592, -1, sizeof(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest)},
        {596, 608, -1, sizeof(::io::deephaven::proto::backplane::grpc::UngroupRequest)},
        {612, 623, -1, sizeof(::io::deephaven::proto::backplane::grpc::MergeTablesRequest)},
        {626, 636, -1, sizeof(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest)},
        {638, 653, -1, sizeof(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest)},
        {660, 674, -1, sizeof(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest)},
        {680, 693, -1, sizeof(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest)},
        {698, 711, -1, sizeof(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest)},
        {716, 729, -1, sizeof(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest)},
        {734, 748, -1, sizeof(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest)},
        {754, 768, -1, sizeof(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest)},
        {774, 785, -1, sizeof(::io::deephaven::proto::backplane::grpc::MultiJoinInput)},
        {788, 798, -1, sizeof(::io::deephaven::proto::backplane::grpc::MultiJoinTablesRequest)},
        {800, 819, -1, sizeof(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest)},
        {830, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate)},
        {843, 856, -1, sizeof(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest)},
        {861, 873, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggregateAllRequest)},
        {877, 887, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile)},
        {889, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct)},
        {898, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct)},
        {907, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula)},
        {917, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian)},
        {926, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile)},
        {936, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted)},
        {945, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSortedColumn)},
        {954, 963, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest)},
        {964, 974, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique)},
        {976, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel)},
        {995, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted)},
        {1004, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAbsSum)},
        {1012, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAvg)},
        {1020, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFirst)},
        {1028, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFreeze)},
        {1036, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecGroup)},
        {1044, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecLast)},
        {1052, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMax)},
        {1060, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMin)},
        {1068, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecStd)},
        {1076, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSum)},
        {1084, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecVar)},
        {1092, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggSpec)},
        {1124, 1138, -1, sizeof(::io::deephaven::proto::backplane::grpc::AggregateRequest)},
        {1144, 1154, -1, sizeof(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns)},
        {1156, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount)},
        {1165, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey)},
        {1174, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition)},
        {1184, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Aggregation)},
        {1198, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SortDescriptor)},
        {1209, 1220, -1, sizeof(::io::deephaven::proto::backplane::grpc::SortTableRequest)},
        {1223, 1234, -1, sizeof(::io::deephaven::proto::backplane::grpc::FilterTableRequest)},
        {1237, 1252, -1, sizeof(::io::deephaven::proto::backplane::grpc::SeekRowRequest)},
        {1259, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SeekRowResponse)},
        {1268, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Reference)},
        {1277, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Literal)},
        {1291, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Value)},
        {1302, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::Condition)},
        {1321, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::AndCondition)},
        {1330, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::OrCondition)},
        {1339, 1348, -1, sizeof(::io::deephaven::proto::backplane::grpc::NotCondition)},
        {1349, 1361, -1, sizeof(::io::deephaven::proto::backplane::grpc::CompareCondition)},
        {1365, 1377, -1, sizeof(::io::deephaven::proto::backplane::grpc::InCondition)},
        {1381, 1392, -1, sizeof(::io::deephaven::proto::backplane::grpc::InvokeCondition)},
        {1395, 1404, -1, sizeof(::io::deephaven::proto::backplane::grpc::IsNullCondition)},
        {1405, 1417, -1, sizeof(::io::deephaven::proto::backplane::grpc::MatchesCondition)},
        {1421, 1433, -1, sizeof(::io::deephaven::proto::backplane::grpc::ContainsCondition)},
        {1437, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::SearchCondition)},
        {1447, 1457, -1, sizeof(::io::deephaven::proto::backplane::grpc::FlattenRequest)},
        {1459, 1469, -1, sizeof(::io::deephaven::proto::backplane::grpc::MetaTableRequest)},
        {1471, 1481, -1, sizeof(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange)},
        {1483, 1497, -1, sizeof(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest)},
        {1503, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly)},
        {1511, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked)},
        {1520, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_Blink)},
        {1528, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind)},
        {1540, 1553, -1, sizeof(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest)},
        {1557, 1570, -1, sizeof(::io::deephaven::proto::backplane::grpc::WhereInRequest)},
        {1575, 1587, -1, sizeof(::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest)},
        {1591, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation)},
        {1641, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::BatchTableRequest)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::io::deephaven::proto::backplane::grpc::_TableReference_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_ExportedTableCreationResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_FetchTableRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_ApplyPreviewColumnsRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_ExportedTableUpdatesRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_ExportedTableUpdateMessage_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_EmptyTableRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_TimeTableRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_SelectOrUpdateRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_MathContext_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByWindowScale_UpdateByWindowTicks_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByWindowScale_UpdateByWindowTime_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByWindowScale_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByEmOptions_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByDeltaOptions_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOptions_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_UpdateByColumn_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_UpdateByOperation_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UpdateByRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_SelectDistinctRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_DropColumnsRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UnstructuredFilterTableRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_HeadOrTailRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_HeadOrTailByRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_UngroupRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_MergeTablesRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_SnapshotTableRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_SnapshotWhenTableRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_CrossJoinTablesRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_NaturalJoinTablesRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_ExactJoinTablesRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_LeftJoinTablesRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AsOfJoinTablesRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AjRajTablesRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_MultiJoinInput_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_MultiJoinTablesRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_RangeJoinTablesRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_ComboAggregateRequest_Aggregate_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_ComboAggregateRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggregateAllRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecApproximatePercentile_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecCountDistinct_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecDistinct_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecFormula_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecMedian_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecPercentile_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecSorted_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecSortedColumn_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecTDigest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecUnique_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecNonUniqueSentinel_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecWeighted_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecAbsSum_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecAvg_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecFirst_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecFreeze_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecGroup_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecLast_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecMax_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecMin_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecStd_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecSum_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_AggSpecVar_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggSpec_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AggregateRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_Aggregation_AggregationColumns_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_Aggregation_AggregationCount_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_Aggregation_AggregationRowKey_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_Aggregation_AggregationPartition_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_Aggregation_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_SortDescriptor_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_SortTableRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_FilterTableRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_SeekRowRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_SeekRowResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_Reference_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_Literal_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_Value_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_Condition_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_AndCondition_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_OrCondition_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_NotCondition_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_CompareCondition_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_InCondition_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_InvokeCondition_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_IsNullCondition_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_MatchesCondition_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_ContainsCondition_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_SearchCondition_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_FlattenRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_MetaTableRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_RunChartDownsampleRequest_ZoomRange_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_RunChartDownsampleRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_CreateInputTableRequest_InputTableKind_InMemoryAppendOnly_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_CreateInputTableRequest_InputTableKind_InMemoryKeyBacked_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_CreateInputTableRequest_InputTableKind_Blink_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_CreateInputTableRequest_InputTableKind_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_CreateInputTableRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_WhereInRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_ColumnStatisticsRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_BatchTableRequest_Operation_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_BatchTableRequest_default_instance_._instance,
};
const char descriptor_table_protodef_deephaven_2fproto_2ftable_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\033deephaven/proto/table.proto\022!io.deepha"
    "ven.proto.backplane.grpc\032\034deephaven/prot"
    "o/ticket.proto\"l\n\016TableReference\022;\n\006tick"
    "et\030\001 \001(\0132).io.deephaven.proto.backplane."
    "grpc.TicketH\000\022\026\n\014batch_offset\030\002 \001(\021H\000B\005\n"
    "\003ref\"\306\001\n\035ExportedTableCreationResponse\022D"
    "\n\tresult_id\030\001 \001(\01321.io.deephaven.proto.b"
    "ackplane.grpc.TableReference\022\017\n\007success\030"
    "\002 \001(\010\022\022\n\nerror_info\030\003 \001(\t\022\025\n\rschema_head"
    "er\030\004 \001(\014\022\021\n\tis_static\030\005 \001(\010\022\020\n\004size\030\006 \001("
    "\022B\0020\001\"\227\001\n\021FetchTableRequest\022D\n\tsource_id"
    "\030\001 \001(\01321.io.deephaven.proto.backplane.gr"
    "pc.TableReference\022<\n\tresult_id\030\002 \001(\0132).i"
    "o.deephaven.proto.backplane.grpc.Ticket\""
    "\240\001\n\032ApplyPreviewColumnsRequest\022D\n\tsource"
    "_id\030\001 \001(\01321.io.deephaven.proto.backplane"
    ".grpc.TableReference\022<\n\tresult_id\030\002 \001(\0132"
    ").io.deephaven.proto.backplane.grpc.Tick"
    "et\"\035\n\033ExportedTableUpdatesRequest\"\214\001\n\032Ex"
    "portedTableUpdateMessage\022<\n\texport_id\030\001 "
    "\001(\0132).io.deephaven.proto.backplane.grpc."
    "Ticket\022\020\n\004size\030\002 \001(\022B\0020\001\022\036\n\026update_failu"
    "re_message\030\003 \001(\t\"c\n\021EmptyTableRequest\022<\n"
    "\tresult_id\030\001 \001(\0132).io.deephaven.proto.ba"
    "ckplane.grpc.Ticket\022\020\n\004size\030\002 \001(\022B\0020\001\"\357\001"
    "\n\020TimeTableRequest\022<\n\tresult_id\030\001 \001(\0132)."
    "io.deephaven.proto.backplane.grpc.Ticket"
    "\022\036\n\020start_time_nanos\030\002 \001(\022B\0020\001H\000\022\033\n\021star"
    "t_time_string\030\005 \001(\tH\000\022\032\n\014period_nanos\030\003 "
    "\001(\022B\0020\001H\001\022\027\n\rperiod_string\030\006 \001(\tH\001\022\023\n\013bl"
    "ink_table\030\004 \001(\010B\014\n\nstart_timeB\010\n\006period\""
    "\261\001\n\025SelectOrUpdateRequest\022<\n\tresult_id\030\001"
    " \001(\0132).io.deephaven.proto.backplane.grpc"
    ".Ticket\022D\n\tsource_id\030\002 \001(\01321.io.deephave"
    "n.proto.backplane.grpc.TableReference\022\024\n"
    "\014column_specs\030\003 \003(\t\"\214\002\n\013MathContext\022\021\n\tp"
    "recision\030\001 \001(\021\022R\n\rrounding_mode\030\002 \001(\0162;."
    "io.deephaven.proto.backplane.grpc.MathCo"
    "ntext.RoundingMode\"\225\001\n\014RoundingMode\022\037\n\033R"
    "OUNDING_MODE_NOT_SPECIFIED\020\000\022\006\n\002UP\020\001\022\010\n\004"
    "DOWN\020\002\022\013\n\007CEILING\020\003\022\t\n\005FLOOR\020\004\022\013\n\007HALF_U"
    "P\020\005\022\r\n\tHALF_DOWN\020\006\022\r\n\tHALF_EVEN\020\007\022\017\n\013UNN"
    "ECESSARY\020\010\"\333\002\n\023UpdateByWindowScale\022[\n\005ti"
    "cks\030\001 \001(\0132J.io.deephaven.proto.backplane"
    ".grpc.UpdateByWindowScale.UpdateByWindow"
    "TicksH\000\022Y\n\004time\030\002 \001(\0132I.io.deephaven.pro"
    "to.backplane.grpc.UpdateByWindowScale.Up"
    "dateByWindowTimeH\000\032$\n\023UpdateByWindowTick"
    "s\022\r\n\005ticks\030\001 \001(\001\032^\n\022UpdateByWindowTime\022\016"
    "\n\006column\030\001 \001(\t\022\023\n\005nanos\030\002 \001(\022B\0020\001H\000\022\031\n\017d"
    "uration_string\030\003 \001(\tH\000B\010\n\006windowB\006\n\004type"
    "\"\341\003\n\021UpdateByEmOptions\022I\n\ron_null_value\030"
    "\001 \001(\01622.io.deephaven.proto.backplane.grp"
    "c.BadDataBehavior\022H\n\014on_nan_value\030\002 \001(\0162"
    "2.io.deephaven.proto.backplane.grpc.BadD"
    "ataBehavior\022H\n\014on_null_time\030\003 \001(\01622.io.d"
    "eephaven.proto.backplane.grpc.BadDataBeh"
    "avior\022R\n\026on_negative_delta_time\030\004 \001(\01622."
    "io.deephaven.proto.backplane.grpc.BadDat"
    "aBehavior\022N\n\022on_zero_delta_time\030\005 \001(\01622."
    "io.deephaven.proto.backplane.grpc.BadDat"
    "aBehavior\022I\n\021big_value_context\030\006 \001(\0132..i"
    "o.deephaven.proto.backplane.grpc.MathCon"
    "text\"f\n\024UpdateByDeltaOptions\022N\n\rnull_beh"
    "avior\030\001 \001(\01627.io.deephaven.proto.backpla"
    "ne.grpc.UpdateByNullBehavior\"\2337\n\017UpdateB"
    "yRequest\022<\n\tresult_id\030\001 \001(\0132).io.deephav"
    "en.proto.backplane.grpc.Ticket\022D\n\tsource"
    "_id\030\002 \001(\01321.io.deephaven.proto.backplane"
    ".grpc.TableReference\022S\n\007options\030\003 \001(\0132B."
    "io.deephaven.proto.backplane.grpc.Update"
    "ByRequest.UpdateByOptions\022X\n\noperations\030"
    "\004 \003(\0132D.io.deephaven.proto.backplane.grp"
    "c.UpdateByRequest.UpdateByOperation\022\030\n\020g"
    "roup_by_columns\030\005 \003(\t\032\303\003\n\017UpdateByOption"
    "s\022\034\n\017use_redirection\030\001 \001(\010H\000\210\001\001\022\033\n\016chunk"
    "_capacity\030\002 \001(\005H\001\210\001\001\022.\n!max_static_spars"
    "e_memory_overhead\030\003 \001(\001H\002\210\001\001\022$\n\027initial_"
    "hash_table_size\030\004 \001(\005H\003\210\001\001\022 \n\023maximum_lo"
    "ad_factor\030\005 \001(\001H\004\210\001\001\022\037\n\022target_load_fact"
    "or\030\006 \001(\001H\005\210\001\001\022D\n\014math_context\030\007 \001(\0132..io"
    ".deephaven.proto.backplane.grpc.MathCont"
    "extB\022\n\020_use_redirectionB\021\n\017_chunk_capaci"
    "tyB$\n\"_max_static_sparse_memory_overhead"
    "B\032\n\030_initial_hash_table_sizeB\026\n\024_maximum"
    "_load_factorB\025\n\023_target_load_factor\032\3640\n\021"
    "UpdateByOperation\022e\n\006column\030\001 \001(\0132S.io.d"
    "eephaven.proto.backplane.grpc.UpdateByRe"
    "quest.UpdateByOperation.UpdateByColumnH\000"
    "\032\357/\n\016UpdateByColumn\022n\n\004spec\030\001 \001(\0132`.io.d"
    "eephaven.proto.backplane.grpc.UpdateByRe"
    "quest.UpdateByOperation.UpdateByColumn.U"
    "pdateBySpec\022\023\n\013match_pairs\030\002 \003(\t\032\327.\n\014Upd"
    "ateBySpec\022\205\001\n\003sum\030\001 \001(\0132v.io.deephaven.p"
    "roto.backplane.grpc.UpdateByRequest.Upda"
    "teByOperation.UpdateByColumn.UpdateBySpe"
    "c.UpdateByCumulativeSumH\000\022\205\001\n\003min\030\002 \001(\0132"
    "v.io.deephaven.proto.backplane.grpc.Upda"
    "teByRequest.UpdateByOperation.UpdateByCo"
    "lumn.UpdateBySpec.UpdateByCumulativeMinH"
    "\000\022\205\001\n\003max\030\003 \001(\0132v.io.deephaven.proto.bac"
    "kplane.grpc.UpdateByRequest.UpdateByOper"
    "ation.UpdateByColumn.UpdateBySpec.Update"
    "ByCumulativeMaxH\000\022\215\001\n\007product\030\004 \001(\0132z.io"
    ".deephaven.proto.backplane.grpc.UpdateBy"
    "Request.UpdateByOperation.UpdateByColumn"
    ".UpdateBySpec.UpdateByCumulativeProductH"
    "\000\022}\n\004fill\030\005 \001(\0132m.io.deephaven.proto.bac"
    "kplane.grpc.UpdateByRequest.UpdateByOper"
    "ation.UpdateByColumn.UpdateBySpec.Update"
    "ByFillH\000\022{\n\003ema\030\006 \001(\0132l.io.deephaven.pro"
    "to.backplane.grpc.UpdateByRequest.Update"
    "ByOperation.UpdateByColumn.UpdateBySpec."
    "UpdateByEmaH\000\022\212\001\n\013rolling_sum\030\007 \001(\0132s.io"
    ".deephaven.proto.backplane.grpc.UpdateBy"
    "Request.UpdateByOperation.UpdateByColumn"
    ".UpdateBySpec.UpdateByRollingSumH\000\022\216\001\n\rr"
    "olling_group\030\010 \001(\0132u.io.deephaven.proto."
    "backplane.grpc.UpdateByRequest.UpdateByO"
    "peration.UpdateByColumn.UpdateBySpec.Upd"
    "ateByRollingGroupH\000\022\212\001\n\013rolling_avg\030\t \001("
    "\0132s.io.deephaven.proto.backplane.grpc.Up"
    "dateByRequest.UpdateByOperation.UpdateBy"
    "Column.UpdateBySpec.UpdateByRollingAvgH\000"
    "\022\212\001\n\013rolling_min\030\n \001(\0132s.io.deephaven.pr"
    "oto.backplane.grpc.UpdateByRequest.Updat"
    "eByOperation.UpdateByColumn.UpdateBySpec"
    ".UpdateByRollingMinH\000\022\212\001\n\013rolling_max\030\013 "
    "\001(\0132s.io.deephaven.proto.backplane.grpc."
    "UpdateByRequest.UpdateByOperation.Update"
    "ByColumn.UpdateBySpec.UpdateByRollingMax"
    "H\000\022\222\001\n\017rolling_product\030\014 \001(\0132w.io.deepha"
    "ven.proto.backplane.grpc.UpdateByRequest"
    ".UpdateByOperation.UpdateByColumn.Update"
    "BySpec.UpdateByRollingProductH\000\022\177\n\005delta"
    "\030\r \001(\0132n.io.deephaven.proto.backplane.gr"
    "pc.UpdateByRequest.UpdateByOperation.Upd"
    "ateByColumn.UpdateBySpec.UpdateByDeltaH\000"
    "\022{\n\003ems\030\016 \001(\0132l.io.deephaven.proto.backp"
    "lane.grpc.UpdateByRequest.UpdateByOperat"
    "ion.UpdateByColumn.UpdateBySpec.UpdateBy"
    "EmsH\000\022\200\001\n\006em_min\030\017 \001(\0132n.io.deephaven.pr"
    "oto.backplane.grpc.UpdateByRequest.Updat"
    "eByOperation.UpdateByColumn.UpdateBySpec"
    ".UpdateByEmMinH\000\022\200\001\n\006em_max\030\020 \001(\0132n.io.d"
    "eephaven.proto.backplane.grpc.UpdateByRe"
    "quest.UpdateByOperation.UpdateByColumn.U"
    "pdateBySpec.UpdateByEmMaxH\000\022\200\001\n\006em_std\030\021"
    " \001(\0132n.io.deephaven.proto.backplane.grpc"
    ".UpdateByRequest.UpdateByOperation.Updat"
    "eByColumn.UpdateBySpec.UpdateByEmStdH\000\022\216"
    "\001\n\rrolling_count\030\022 \001(\0132u.io.deephaven.pr"
    "oto.backplane.grpc.UpdateByRequest.Updat"
    "eByOperation.UpdateByColumn.UpdateBySpec"
    ".UpdateByRollingCountH\000\022\212\001\n\013rolling_std\030"
    "\023 \001(\0132s.io.deephaven.proto.backplane.grp"
    "c.UpdateByRequest.UpdateByOperation.Upda"
    "teByColumn.UpdateBySpec.UpdateByRollingS"
    "tdH\000\022\214\001\n\014rolling_wavg\030\024 \001(\0132t.io.deephav"
    "en.proto.backplane.grpc.UpdateByRequest."
    "UpdateByOperation.UpdateByColumn.UpdateB"
    "ySpec.UpdateByRollingWAvgH\000\022\222\001\n\017rolling_"
    "formula\030\025 \001(\0132w.io.deephaven.proto.backp"
    "lane.grpc.UpdateByRequest.UpdateByOperat"
    "ion.UpdateByColumn.UpdateBySpec.UpdateBy"
    "RollingFormulaH\000\032\027\n\025UpdateByCumulativeSu"
    "m\032\027\n\025UpdateByCumulativeMin\032\027\n\025UpdateByCu"
    "mulativeMax\032\033\n\031UpdateByCumulativeProduct"
    "\032\016\n\014UpdateByFill\032\242\001\n\013UpdateByEma\022E\n\007opti"
    "ons\030\001 \001(\01324.io.deephaven.proto.backplane"
    ".grpc.UpdateByEmOptions\022L\n\014window_scale\030"
    "\002 \001(\01326.io.deephaven.proto.backplane.grp"
    "c.UpdateByWindowScale\032\242\001\n\013UpdateByEms\022E\n"
    "\007options\030\001 \001(\01324.io.deephaven.proto.back"
    "plane.grpc.UpdateByEmOptions\022L\n\014window_s"
    "cale\030\002 \001(\01326.io.deephaven.proto.backplan"
    "e.grpc.UpdateByWindowScale\032\244\001\n\rUpdateByE"
    "mMin\022E\n\007options\030\001 \001(\01324.io.deephaven.pro"
    "to.backplane.grpc.UpdateByEmOptions\022L\n\014w"
    "indow_scale\030\002 \001(\01326.io.deephaven.proto.b"
    "ackplane.grpc.UpdateByWindowScale\032\244\001\n\rUp"
    "dateByEmMax\022E\n\007options\030\001 \001(\01324.io.deepha"
    "ven.proto.backplane.grpc.UpdateByEmOptio"
    "ns\022L\n\014window_scale\030\002 \001(\01326.io.deephaven."
    "proto.backplane.grpc.UpdateByWindowScale"
    "\032\244\001\n\rUpdateByEmStd\022E\n\007options\030\001 \001(\01324.io"
    ".deephaven.proto.backplane.grpc.UpdateBy"
    "EmOptions\022L\n\014window_scale\030\002 \001(\01326.io.dee"
    "phaven.proto.backplane.grpc.UpdateByWind"
    "owScale\032Y\n\rUpdateByDelta\022H\n\007options\030\001 \001("
    "\01327.io.deephaven.proto.backplane.grpc.Up"
    "dateByDeltaOptions\032\300\001\n\022UpdateByRollingSu"
    "m\022T\n\024reverse_window_scale\030\001 \001(\01326.io.dee"
    "phaven.proto.backplane.grpc.UpdateByWind"
    "owScale\022T\n\024forward_window_scale\030\002 \001(\01326."
    "io.deephaven.proto.backplane.grpc.Update"
    "ByWindowScale\032\302\001\n\024UpdateByRollingGroup\022T"
    "\n\024reverse_window_scale\030\001 \001(\01326.io.deepha"
    "ven.proto.backplane.grpc.UpdateByWindowS"
    "cale\022T\n\024forward_window_scale\030\002 \001(\01326.io."
    "deephaven.proto.backplane.grpc.UpdateByW"
    "indowScale\032\300\001\n\022UpdateByRollingAvg\022T\n\024rev"
    "erse_window_scale\030\001 \001(\01326.io.deephaven.p"
    "roto.backplane.grpc.UpdateByWindowScale\022"
    "T\n\024forward_window_scale\030\002 \001(\01326.io.deeph"
    "aven.proto.backplane.grpc.UpdateByWindow"
    "Scale\032\300\001\n\022UpdateByRollingMin\022T\n\024reverse_"
    "window_scale\030\001 \001(\01326.io.deephaven.proto."
    "backplane.grpc.UpdateByWindowScale\022T\n\024fo"
    "rward_window_scale\030\002 \001(\01326.io.deephaven."
    "proto.backplane.grpc.UpdateByWindowScale"
    "\032\300\001\n\022UpdateByRollingMax\022T\n\024reverse_windo"
    "w_scale\030\001 \001(\01326.io.deephaven.proto.backp"
    "lane.grpc.UpdateByWindowScale\022T\n\024forward"
    "_window_scale\030\002 \001(\01326.io.deephaven.proto"
    ".backplane.grpc.UpdateByWindowScale\032\304\001\n\026"
    "UpdateByRollingProduct\022T\n\024reverse_window"
    "_scale\030\001 \001(\01326.io.deephaven.proto.backpl"
    "ane.grpc.UpdateByWindowScale\022T\n\024forward_"
    "window_scale\030\002 \001(\01326.io.deephaven.proto."
    "backplane.grpc.UpdateByWindowScale\032\302\001\n\024U"
    "pdateByRollingCount\022T\n\024reverse_window_sc"
    "ale\030\001 \001(\01326.io.deephaven.proto.backplane"
    ".grpc.UpdateByWindowScale\022T\n\024forward_win"
    "dow_scale\030\002 \001(\01326.io.deephaven.proto.bac"
    "kplane.grpc.UpdateByWindowScale\032\300\001\n\022Upda"
    "teByRollingStd\022T\n\024reverse_window_scale\030\001"
    " \001(\01326.io.deephaven.proto.backplane.grpc"
    ".UpdateByWindowScale\022T\n\024forward_window_s"
    "cale\030\002 \001(\01326.io.deephaven.proto.backplan"
    "e.grpc.UpdateByWindowScale\032\330\001\n\023UpdateByR"
    "ollingWAvg\022T\n\024reverse_window_scale\030\001 \001(\013"
    "26.io.deephaven.proto.backplane.grpc.Upd"
    "ateByWindowScale\022T\n\024forward_window_scale"
    "\030\002 \001(\01326.io.deephaven.proto.backplane.gr"
    "pc.UpdateByWindowScale\022\025\n\rweight_column\030"
    "\003 \001(\t\032\352\001\n\026UpdateByRollingFormula\022T\n\024reve"
    "rse_window_scale\030\001 \001(\01326.io.deephaven.pr"
    "oto.backplane.grpc.UpdateByWindowScale\022T"
    "\n\024forward_window_scale\030\002 \001(\01326.io.deepha"
    "ven.proto.backplane.grpc.UpdateByWindowS"
    "cale\022\017\n\007formula\030\003 \001(\t\022\023\n\013param_token\030\004 \001"
    "(\tB\006\n\004typeB\006\n\004type\"\261\001\n\025SelectDistinctReq"
    "uest\022<\n\tresult_id\030\001 \001(\0132).io.deephaven.p"
    "roto.backplane.grpc.Ticket\022D\n\tsource_id\030"
    "\002 \001(\01321.io.deephaven.proto.backplane.grp"
    "c.TableReference\022\024\n\014column_names\030\003 \003(\t\"\256"
    "\001\n\022DropColumnsRequest\022<\n\tresult_id\030\001 \001(\013"
    "2).io.deephaven.proto.backplane.grpc.Tic"
    "ket\022D\n\tsource_id\030\002 \001(\01321.io.deephaven.pr"
    "oto.backplane.grpc.TableReference\022\024\n\014col"
    "umn_names\030\003 \003(\t\"\265\001\n\036UnstructuredFilterTa"
    "bleRequest\022<\n\tresult_id\030\001 \001(\0132).io.deeph"
    "aven.proto.backplane.grpc.Ticket\022D\n\tsour"
    "ce_id\030\002 \001(\01321.io.deephaven.proto.backpla"
    "ne.grpc.TableReference\022\017\n\007filters\030\003 \003(\t\""
    "\255\001\n\021HeadOrTailRequest\022<\n\tresult_id\030\001 \001(\013"
    "2).io.deephaven.proto.backplane.grpc.Tic"
    "ket\022D\n\tsource_id\030\002 \001(\01321.io.deephaven.pr"
    "oto.backplane.grpc.TableReference\022\024\n\010num"
    "_rows\030\003 \001(\022B\0020\001\"\316\001\n\023HeadOrTailByRequest\022"
    "<\n\tresult_id\030\001 \001(\0132).io.deephaven.proto."
    "backplane.grpc.Ticket\022D\n\tsource_id\030\002 \001(\013"
    "21.io.deephaven.proto.backplane.grpc.Tab"
    "leReference\022\024\n\010num_rows\030\003 \001(\022B\0020\001\022\035\n\025gro"
    "up_by_column_specs\030\004 \003(\t\"\303\001\n\016UngroupRequ"
    "est\022<\n\tresult_id\030\001 \001(\0132).io.deephaven.pr"
    "oto.backplane.grpc.Ticket\022D\n\tsource_id\030\002"
    " \001(\01321.io.deephaven.proto.backplane.grpc"
    ".TableReference\022\021\n\tnull_fill\030\003 \001(\010\022\032\n\022co"
    "lumns_to_ungroup\030\004 \003(\t\"\255\001\n\022MergeTablesRe"
    "quest\022<\n\tresult_id\030\001 \001(\0132).io.deephaven."
    "proto.backplane.grpc.Ticket\022E\n\nsource_id"
    "s\030\002 \003(\01321.io.deephaven.proto.backplane.g"
    "rpc.TableReference\022\022\n\nkey_column\030\003 \001(\t\"\232"
    "\001\n\024SnapshotTableRequest\022<\n\tresult_id\030\001 \001"
    "(\0132).io.deephaven.proto.backplane.grpc.T"
    "icket\022D\n\tsource_id\030\002 \001(\01321.io.deephaven."
    "proto.backplane.grpc.TableReference\"\261\002\n\030"
    "SnapshotWhenTableRequest\022<\n\tresult_id\030\001 "
    "\001(\0132).io.deephaven.proto.backplane.grpc."
    "Ticket\022B\n\007base_id\030\002 \001(\01321.io.deephaven.p"
    "roto.backplane.grpc.TableReference\022E\n\ntr"
    "igger_id\030\003 \001(\01321.io.deephaven.proto.back"
    "plane.grpc.TableReference\022\017\n\007initial\030\004 \001"
    "(\010\022\023\n\013incremental\030\005 \001(\010\022\017\n\007history\030\006 \001(\010"
    "\022\025\n\rstamp_columns\030\007 \003(\t\"\247\002\n\026CrossJoinTab"
    "lesRequest\022<\n\tresult_id\030\001 \001(\0132).io.deeph"
    "aven.proto.backplane.grpc.Ticket\022B\n\007left"
    "_id\030\002 \001(\01321.io.deephaven.proto.backplane"
    ".grpc.TableReference\022C\n\010right_id\030\003 \001(\01321"
    ".io.deephaven.proto.backplane.grpc.Table"
    "Reference\022\030\n\020columns_to_match\030\004 \003(\t\022\026\n\016c"
    "olumns_to_add\030\005 \003(\t\022\024\n\014reserve_bits\030\006 \001("
    "\005\"\223\002\n\030NaturalJoinTablesRequest\022<\n\tresult"
    "_id\030\001 \001(\0132).io.deephaven.proto.backplane"
    ".grpc.Ticket\022B\n\007left_id\030\002 \001(\01321.io.deeph"
    "aven.proto.backplane.grpc.TableReference"
    "\022C\n\010right_id\030\003 \001(\01321.io.deephaven.proto."
    "backplane.grpc.TableReference\022\030\n\020columns"
    "_to_match\030\004 \003(\t\022\026\n\016columns_to_add\030\005 \003(\t\""
    "\221\002\n\026ExactJoinTablesRequest\022<\n\tresult_id\030"
    "\001 \001(\0132).io.deephaven.proto.backplane.grp"
    "c.Ticket\022B\n\007left_id\030\002 \001(\01321.io.deephaven"
    ".proto.backplane.grpc.TableReference\022C\n\010"
    "right_id\030\003 \001(\01321.io.deephaven.proto.back"
    "plane.grpc.TableReference\022\030\n\020columns_to_"
    "match\030\004 \003(\t\022\026\n\016columns_to_add\030\005 \003(\t\"\220\002\n\025"
    "LeftJoinTablesRequest\022<\n\tresult_id\030\001 \001(\013"
    "2).io.deephaven.proto.backplane.grpc.Tic"
    "ket\022B\n\007left_id\030\002 \001(\01321.io.deephaven.prot"
    "o.backplane.grpc.TableReference\022C\n\010right"
    "_id\030\003 \001(\01321.io.deephaven.proto.backplane"
    ".grpc.TableReference\022\030\n\020columns_to_match"
    "\030\004 \003(\t\022\026\n\016columns_to_add\030\005 \003(\t\"\321\003\n\025AsOfJ"
    "oinTablesRequest\022<\n\tresult_id\030\001 \001(\0132).io"
    ".deephaven.proto.backplane.grpc.Ticket\022B"
    "\n\007left_id\030\002 \001(\01321.io.deephaven.proto.bac"
    "kplane.grpc.TableReference\022C\n\010right_id\030\003"
    " \001(\01321.io.deephaven.proto.backplane.grpc"
    ".TableReference\022\030\n\020columns_to_match\030\004 \003("
    "\t\022\026\n\016columns_to_add\030\005 \003(\t\022\\\n\020as_of_match"
    "_rule\030\007 \001(\0162B.io.deephaven.proto.backpla"
    "ne.grpc.AsOfJoinTablesRequest.MatchRule\""
    "]\n\tMatchRule\022\023\n\017LESS_THAN_EQUAL\020\000\022\r\n\tLES"
    "S_THAN\020\001\022\026\n\022GREATER_THAN_EQUAL\020\002\022\020\n\014GREA"
    "TER_THAN\020\003\032\002\030\001:\002\030\001\"\246\002\n\022AjRajTablesReques"
    "t\022<\n\tresult_id\030\001 \001(\0132).io.deephaven.prot"
    "o.backplane.grpc.Ticket\022B\n\007left_id\030\002 \001(\013"
    "21.io.deephaven.proto.backplane.grpc.Tab"
    "leReference\022C\n\010right_id\030\003 \001(\01321.io.deeph"
    "aven.proto.backplane.grpc.TableReference"
    "\022\033\n\023exact_match_columns\030\004 \003(\t\022\024\n\014as_of_c"
    "olumn\030\005 \001(\t\022\026\n\016columns_to_add\030\006 \003(\t\"\210\001\n\016"
    "MultiJoinInput\022D\n\tsource_id\030\001 \001(\01321.io.d"
    "eephaven.proto.backplane.grpc.TableRefer"
    "ence\022\030\n\020columns_to_match\030\002 \003(\t\022\026\n\016column"
    "s_to_add\030\003 \003(\t\"\244\001\n\026MultiJoinTablesReques"
    "t\022<\n\tresult_id\030\001 \001(\0132).io.deephaven.prot"
    "o.backplane.grpc.Ticket\022L\n\021multi_join_in"
    "puts\030\002 \003(\01321.io.deephaven.proto.backplan"
    "e.grpc.MultiJoinInput\"\340\006\n\026RangeJoinTable"
    "sRequest\022<\n\tresult_id\030\001 \001(\0132).io.deephav"
    "en.proto.backplane.grpc.Ticket\022B\n\007left_i"
    "d\030\002 \001(\01321.io.deephaven.proto.backplane.g"
    "rpc.TableReference\022C\n\010right_id\030\003 \001(\01321.i"
    "o.deephaven.proto.backplane.grpc.TableRe"
    "ference\022\033\n\023exact_match_columns\030\004 \003(\t\022\031\n\021"
    "left_start_column\030\005 \001(\t\022b\n\020range_start_r"
    "ule\030\006 \001(\0162H.io.deephaven.proto.backplane"
    ".grpc.RangeJoinTablesRequest.RangeStartR"
    "ule\022\032\n\022right_range_column\030\007 \001(\t\022^\n\016range"
    "_end_rule\030\010 \001(\0162F.io.deephaven.proto.bac"
    "kplane.grpc.RangeJoinTablesRequest.Range"
    "EndRule\022\027\n\017left_end_column\030\t \001(\t\022D\n\014aggr"
    "egations\030\n \003(\0132..io.deephaven.proto.back"
    "plane.grpc.Aggregation\022\023\n\013range_match\030\013 "
    "\001(\t\"v\n\016RangeStartRule\022\025\n\021START_UNSPECIFI"
    "ED\020\000\022\r\n\tLESS_THAN\020\001\022\026\n\022LESS_THAN_OR_EQUA"
    "L\020\002\022&\n\"LESS_THAN_OR_EQUAL_ALLOW_PRECEDIN"
    "G\020\003\"{\n\014RangeEndRule\022\023\n\017END_UNSPECIFIED\020\000"
    "\022\020\n\014GREATER_THAN\020\001\022\031\n\025GREATER_THAN_OR_EQ"
    "UAL\020\002\022)\n%GREATER_THAN_OR_EQUAL_ALLOW_FOL"
    "LOWING\020\003\"\376\004\n\025ComboAggregateRequest\022<\n\tre"
    "sult_id\030\001 \001(\0132).io.deephaven.proto.backp"
    "lane.grpc.Ticket\022D\n\tsource_id\030\002 \001(\01321.io"
    ".deephaven.proto.backplane.grpc.TableRef"
    "erence\022V\n\naggregates\030\003 \003(\0132B.io.deephave"
    "n.proto.backplane.grpc.ComboAggregateReq"
    "uest.Aggregate\022\030\n\020group_by_columns\030\004 \003(\t"
    "\022\023\n\013force_combo\030\005 \001(\010\032\255\001\n\tAggregate\022N\n\004t"
    "ype\030\001 \001(\0162@.io.deephaven.proto.backplane"
    ".grpc.ComboAggregateRequest.AggType\022\023\n\013m"
    "atch_pairs\030\002 \003(\t\022\023\n\013column_name\030\003 \001(\t\022\022\n"
    "\npercentile\030\004 \001(\001\022\022\n\navg_median\030\005 \001(\010\"\245\001"
    "\n\007AggType\022\007\n\003SUM\020\000\022\013\n\007ABS_SUM\020\001\022\t\n\005GROUP"
    "\020\002\022\007\n\003AVG\020\003\022\t\n\005COUNT\020\004\022\t\n\005FIRST\020\005\022\010\n\004LAS"
    "T\020\006\022\007\n\003MIN\020\007\022\007\n\003MAX\020\010\022\n\n\006MEDIAN\020\t\022\016\n\nPER"
    "CENTILE\020\n\022\007\n\003STD\020\013\022\007\n\003VAR\020\014\022\020\n\014WEIGHTED_"
    "AVG\020\r:\002\030\001\"\355\001\n\023AggregateAllRequest\022<\n\tres"
    "ult_id\030\001 \001(\0132).io.deephaven.proto.backpl"
    "ane.grpc.Ticket\022D\n\tsource_id\030\002 \001(\01321.io."
    "deephaven.proto.backplane.grpc.TableRefe"
    "rence\0228\n\004spec\030\003 \001(\0132*.io.deephaven.proto"
    ".backplane.grpc.AggSpec\022\030\n\020group_by_colu"
    "mns\030\004 \003(\t\"\327\027\n\007AggSpec\022K\n\007abs_sum\030\001 \001(\01328"
    ".io.deephaven.proto.backplane.grpc.AggSp"
    "ec.AggSpecAbsSumH\000\022i\n\026approximate_percen"
    "tile\030\002 \001(\0132G.io.deephaven.proto.backplan"
    "e.grpc.AggSpec.AggSpecApproximatePercent"
    "ileH\000\022D\n\003avg\030\003 \001(\01325.io.deephaven.proto."
    "backplane.grpc.AggSpec.AggSpecAvgH\000\022Y\n\016c"
    "ount_distinct\030\004 \001(\0132\?.io.deephaven.proto"
    ".backplane.grpc.AggSpec.AggSpecCountDist"
    "inctH\000\022N\n\010distinct\030\005 \001(\0132:.io.deephaven."
    "proto.backplane.grpc.AggSpec.AggSpecDist"
    "inctH\000\022H\n\005first\030\006 \001(\01327.io.deephaven.pro"
    "to.backplane.grpc.AggSpec.AggSpecFirstH\000"
    "\022L\n\007formula\030\007 \001(\01329.io.deephaven.proto.b"
    "ackplane.grpc.AggSpec.AggSpecFormulaH\000\022J"
    "\n\006freeze\030\010 \001(\01328.io.deephaven.proto.back"
    "plane.grpc.AggSpec.AggSpecFreezeH\000\022H\n\005gr"
    "oup\030\t \001(\01327.io.deephaven.proto.backplane"
    ".grpc.AggSpec.AggSpecGroupH\000\022F\n\004last\030\n \001"
    "(\01326.io.deephaven.proto.backplane.grpc.A"
    "ggSpec.AggSpecLastH\000\022D\n\003max\030\013 \001(\01325.io.d"
    "eephaven.proto.backplane.grpc.AggSpec.Ag"
    "gSpecMaxH\000\022J\n\006median\030\014 \001(\01328.io.deephave"
    "n.proto.backplane.grpc.AggSpec.AggSpecMe"
    "dianH\000\022D\n\003min\030\r \001(\01325.io.deephaven.proto"
    ".backplane.grpc.AggSpec.AggSpecMinH\000\022R\n\n"
    "percentile\030\016 \001(\0132<.io.deephaven.proto.ba"
    "ckplane.grpc.AggSpec.AggSpecPercentileH\000"
    "\022P\n\014sorted_first\030\017 \001(\01328.io.deephaven.pr"
    "oto.backplane.grpc.AggSpec.AggSpecSorted"
    "H\000\022O\n\013sorted_last\030\020 \001(\01328.io.deephaven.p"
    "roto.backplane.grpc.AggSpec.AggSpecSorte"
    "dH\000\022D\n\003std\030\021 \001(\01325.io.deephaven.proto.ba"
    "ckplane.grpc.AggSpec.AggSpecStdH\000\022D\n\003sum"
    "\030\022 \001(\01325.io.deephaven.proto.backplane.gr"
    "pc.AggSpec.AggSpecSumH\000\022M\n\010t_digest\030\023 \001("
    "\01329.io.deephaven.proto.backplane.grpc.Ag"
    "gSpec.AggSpecTDigestH\000\022J\n\006unique\030\024 \001(\01328"
    ".io.deephaven.proto.backplane.grpc.AggSp"
    "ec.AggSpecUniqueH\000\022R\n\014weighted_avg\030\025 \001(\013"
    "2:.io.deephaven.proto.backplane.grpc.Agg"
    "Spec.AggSpecWeightedH\000\022R\n\014weighted_sum\030\026"
    " \001(\0132:.io.deephaven.proto.backplane.grpc"
    ".AggSpec.AggSpecWeightedH\000\022D\n\003var\030\027 \001(\0132"
    "5.io.deephaven.proto.backplane.grpc.AggS"
    "pec.AggSpecVarH\000\032\\\n\034AggSpecApproximatePe"
    "rcentile\022\022\n\npercentile\030\001 \001(\001\022\030\n\013compress"
    "ion\030\002 \001(\001H\000\210\001\001B\016\n\014_compression\032+\n\024AggSpe"
    "cCountDistinct\022\023\n\013count_nulls\030\001 \001(\010\032(\n\017A"
    "ggSpecDistinct\022\025\n\rinclude_nulls\030\001 \001(\010\0326\n"
    "\016AggSpecFormula\022\017\n\007formula\030\001 \001(\t\022\023\n\013para"
    "m_token\030\002 \001(\t\032/\n\rAggSpecMedian\022\036\n\026averag"
    "e_evenly_divided\030\001 \001(\010\032G\n\021AggSpecPercent"
    "ile\022\022\n\npercentile\030\001 \001(\001\022\036\n\026average_evenl"
    "y_divided\030\002 \001(\010\032`\n\rAggSpecSorted\022O\n\007colu"
    "mns\030\001 \003(\0132>.io.deephaven.proto.backplane"
    ".grpc.AggSpec.AggSpecSortedColumn\032*\n\023Agg"
    "SpecSortedColumn\022\023\n\013column_name\030\001 \001(\t\032:\n"
    "\016AggSpecTDigest\022\030\n\013compression\030\001 \001(\001H\000\210\001"
    "\001B\016\n\014_compression\032\210\001\n\rAggSpecUnique\022\025\n\ri"
    "nclude_nulls\030\001 \001(\010\022`\n\023non_unique_sentine"
    "l\030\002 \001(\0132C.io.deephaven.proto.backplane.g"
    "rpc.AggSpec.AggSpecNonUniqueSentinel\032\265\002\n"
    "\030AggSpecNonUniqueSentinel\022B\n\nnull_value\030"
    "\001 \001(\0162,.io.deephaven.proto.backplane.grp"
    "c.NullValueH\000\022\026\n\014string_value\030\002 \001(\tH\000\022\023\n"
    "\tint_value\030\003 \001(\021H\000\022\030\n\nlong_value\030\004 \001(\022B\002"
    "0\001H\000\022\025\n\013float_value\030\005 \001(\002H\000\022\026\n\014double_va"
    "lue\030\006 \001(\001H\000\022\024\n\nbool_value\030\007 \001(\010H\000\022\024\n\nbyt"
    "e_value\030\010 \001(\021H\000\022\025\n\013short_value\030\t \001(\021H\000\022\024"
    "\n\nchar_value\030\n \001(\021H\000B\006\n\004type\032(\n\017AggSpecW"
    "eighted\022\025\n\rweight_column\030\001 \001(\t\032\017\n\rAggSpe"
    "cAbsSum\032\014\n\nAggSpecAvg\032\016\n\014AggSpecFirst\032\017\n"
    "\rAggSpecFreeze\032\016\n\014AggSpecGroup\032\r\n\013AggSpe"
    "cLast\032\014\n\nAggSpecMax\032\014\n\nAggSpecMin\032\014\n\nAgg"
    "SpecStd\032\014\n\nAggSpecSum\032\014\n\nAggSpecVarB\006\n\004t"
    "ype\"\334\002\n\020AggregateRequest\022<\n\tresult_id\030\001 "
    "\001(\0132).io.deephaven.proto.backplane.grpc."
    "Ticket\022D\n\tsource_id\030\002 \001(\01321.io.deephaven"
    ".proto.backplane.grpc.TableReference\022L\n\021"
    "initial_groups_id\030\003 \001(\01321.io.deephaven.p"
    "roto.backplane.grpc.TableReference\022\026\n\016pr"
    "eserve_empty\030\004 \001(\010\022D\n\014aggregations\030\005 \003(\013"
    "2..io.deephaven.proto.backplane.grpc.Agg"
    "regation\022\030\n\020group_by_columns\030\006 \003(\t\"\323\005\n\013A"
    "ggregation\022T\n\007columns\030\001 \001(\0132A.io.deephav"
    "en.proto.backplane.grpc.Aggregation.Aggr"
    "egationColumnsH\000\022P\n\005count\030\002 \001(\0132\?.io.dee"
    "phaven.proto.backplane.grpc.Aggregation."
    "AggregationCountH\000\022Y\n\rfirst_row_key\030\003 \001("
    "\0132@.io.deephaven.proto.backplane.grpc.Ag"
    "gregation.AggregationRowKeyH\000\022X\n\014last_ro"
    "w_key\030\004 \001(\0132@.io.deephaven.proto.backpla"
    "ne.grpc.Aggregation.AggregationRowKeyH\000\022"
    "X\n\tpartition\030\005 \001(\0132C.io.deephaven.proto."
    "backplane.grpc.Aggregation.AggregationPa"
    "rtitionH\000\032c\n\022AggregationColumns\0228\n\004spec\030"
    "\001 \001(\0132*.io.deephaven.proto.backplane.grp"
    "c.AggSpec\022\023\n\013match_pairs\030\002 \003(\t\032\'\n\020Aggreg"
    "ationCount\022\023\n\013column_name\030\001 \001(\t\032(\n\021Aggre"
    "gationRowKey\022\023\n\013column_name\030\001 \001(\t\032M\n\024Agg"
    "regationPartition\022\023\n\013column_name\030\001 \001(\t\022 "
    "\n\030include_group_by_columns\030\002 \001(\010B\006\n\004type"
    "\"\341\001\n\016SortDescriptor\022\023\n\013column_name\030\001 \001(\t"
    "\022\023\n\013is_absolute\030\002 \001(\010\022R\n\tdirection\030\003 \001(\016"
    "2\?.io.deephaven.proto.backplane.grpc.Sor"
    "tDescriptor.SortDirection\"Q\n\rSortDirecti"
    "on\022\013\n\007UNKNOWN\020\000\022\027\n\nDESCENDING\020\377\377\377\377\377\377\377\377\377\001"
    "\022\r\n\tASCENDING\020\001\022\013\n\007REVERSE\020\002\"\330\001\n\020SortTab"
    "leRequest\022<\n\tresult_id\030\001 \001(\0132).io.deepha"
    "ven.proto.backplane.grpc.Ticket\022D\n\tsourc"
    "e_id\030\002 \001(\01321.io.deephaven.proto.backplan"
    "e.grpc.TableReference\022@\n\005sorts\030\003 \003(\01321.i"
    "o.deephaven.proto.backplane.grpc.SortDes"
    "criptor\"\327\001\n\022FilterTableRequest\022<\n\tresult"
    "_id\030\001 \001(\0132).io.deephaven.proto.backplane"
    ".grpc.Ticket\022D\n\tsource_id\030\002 \001(\01321.io.dee"
    "phaven.proto.backplane.grpc.TableReferen"
    "ce\022=\n\007filters\030\003 \003(\0132,.io.deephaven.proto"
    ".backplane.grpc.Condition\"\371\001\n\016SeekRowReq"
    "uest\022<\n\tsource_id\030\001 \001(\0132).io.deephaven.p"
    "roto.backplane.grpc.Ticket\022\030\n\014starting_r"
    "ow\030\002 \001(\022B\0020\001\022\023\n\013column_name\030\003 \001(\t\022>\n\nsee"
    "k_value\030\004 \001(\0132*.io.deephaven.proto.backp"
    "lane.grpc.Literal\022\023\n\013insensitive\030\005 \001(\010\022\020"
    "\n\010contains\030\006 \001(\010\022\023\n\013is_backward\030\007 \001(\010\")\n"
    "\017SeekRowResponse\022\026\n\nresult_row\030\001 \001(\022B\0020\001"
    "\" \n\tReference\022\023\n\013column_name\030\001 \001(\t\"\221\001\n\007L"
    "iteral\022\026\n\014string_value\030\001 \001(\tH\000\022\026\n\014double"
    "_value\030\002 \001(\001H\000\022\024\n\nbool_value\030\003 \001(\010H\000\022\030\n\n"
    "long_value\030\004 \001(\022B\0020\001H\000\022\035\n\017nano_time_valu"
    "e\030\005 \001(\022B\0020\001H\000B\007\n\005value\"\221\001\n\005Value\022A\n\trefe"
    "rence\030\001 \001(\0132,.io.deephaven.proto.backpla"
    "ne.grpc.ReferenceH\000\022=\n\007literal\030\002 \001(\0132*.i"
    "o.deephaven.proto.backplane.grpc.Literal"
    "H\000B\006\n\004data\"\274\005\n\tCondition\022>\n\003and\030\001 \001(\0132/."
    "io.deephaven.proto.backplane.grpc.AndCon"
    "ditionH\000\022<\n\002or\030\002 \001(\0132..io.deephaven.prot"
    "o.backplane.grpc.OrConditionH\000\022>\n\003not\030\003 "
    "\001(\0132/.io.deephaven.proto.backplane.grpc."
    "NotConditionH\000\022F\n\007compare\030\004 \001(\01323.io.dee"
    "phaven.proto.backplane.grpc.CompareCondi"
    "tionH\000\022<\n\002in\030\005 \001(\0132..io.deephaven.proto."
    "backplane.grpc.InConditionH\000\022D\n\006invoke\030\006"
    " \001(\01322.io.deephaven.proto.backplane.grpc"
    ".InvokeConditionH\000\022E\n\007is_null\030\007 \001(\01322.io"
    ".deephaven.proto.backplane.grpc.IsNullCo"
    "nditionH\000\022F\n\007matches\030\010 \001(\01323.io.deephave"
    "n.proto.backplane.grpc.MatchesConditionH"
    "\000\022H\n\010contains\030\t \001(\01324.io.deephaven.proto"
    ".backplane.grpc.ContainsConditionH\000\022D\n\006s"
    "earch\030\n \001(\01322.io.deephaven.proto.backpla"
    "ne.grpc.SearchConditionH\000B\006\n\004data\"M\n\014And"
    "Condition\022=\n\007filters\030\001 \003(\0132,.io.deephave"
    "n.proto.backplane.grpc.Condition\"L\n\013OrCo"
    "ndition\022=\n\007filters\030\001 \003(\0132,.io.deephaven."
    "proto.backplane.grpc.Condition\"L\n\014NotCon"
    "dition\022<\n\006filter\030\001 \001(\0132,.io.deephaven.pr"
    "oto.backplane.grpc.Condition\"\254\003\n\020Compare"
    "Condition\022W\n\toperation\030\001 \001(\0162D.io.deepha"
    "ven.proto.backplane.grpc.CompareConditio"
    "n.CompareOperation\022L\n\020case_sensitivity\030\002"
    " \001(\01622.io.deephaven.proto.backplane.grpc"
    ".CaseSensitivity\0225\n\003lhs\030\003 \001(\0132(.io.deeph"
    "aven.proto.backplane.grpc.Value\0225\n\003rhs\030\004"
    " \001(\0132(.io.deephaven.proto.backplane.grpc"
    ".Value\"\202\001\n\020CompareOperation\022\r\n\tLESS_THAN"
    "\020\000\022\026\n\022LESS_THAN_OR_EQUAL\020\001\022\020\n\014GREATER_TH"
    "AN\020\002\022\031\n\025GREATER_THAN_OR_EQUAL\020\003\022\n\n\006EQUAL"
    "S\020\004\022\016\n\nNOT_EQUALS\020\005\"\225\002\n\013InCondition\0228\n\006t"
    "arget\030\001 \001(\0132(.io.deephaven.proto.backpla"
    "ne.grpc.Value\022<\n\ncandidates\030\002 \003(\0132(.io.d"
    "eephaven.proto.backplane.grpc.Value\022L\n\020c"
    "ase_sensitivity\030\003 \001(\01622.io.deephaven.pro"
    "to.backplane.grpc.CaseSensitivity\022@\n\nmat"
    "ch_type\030\004 \001(\0162,.io.deephaven.proto.backp"
    "lane.grpc.MatchType\"\230\001\n\017InvokeCondition\022"
    "\016\n\006method\030\001 \001(\t\0228\n\006target\030\002 \001(\0132(.io.dee"
    "phaven.proto.backplane.grpc.Value\022;\n\targ"
    "uments\030\003 \003(\0132(.io.deephaven.proto.backpl"
    "ane.grpc.Value\"R\n\017IsNullCondition\022\?\n\tref"
    "erence\030\001 \001(\0132,.io.deephaven.proto.backpl"
    "ane.grpc.Reference\"\362\001\n\020MatchesCondition\022"
    "\?\n\treference\030\001 \001(\0132,.io.deephaven.proto."
    "backplane.grpc.Reference\022\r\n\005regex\030\002 \001(\t\022"
    "L\n\020case_sensitivity\030\003 \001(\01622.io.deephaven"
    ".proto.backplane.grpc.CaseSensitivity\022@\n"
    "\nmatch_type\030\004 \001(\0162,.io.deephaven.proto.b"
    "ackplane.grpc.MatchType\"\373\001\n\021ContainsCond"
    "ition\022\?\n\treference\030\001 \001(\0132,.io.deephaven."
    "proto.backplane.grpc.Reference\022\025\n\rsearch"
    "_string\030\002 \001(\t\022L\n\020case_sensitivity\030\003 \001(\0162"
    "2.io.deephaven.proto.backplane.grpc.Case"
    "Sensitivity\022@\n\nmatch_type\030\004 \001(\0162,.io.dee"
    "phaven.proto.backplane.grpc.MatchType\"s\n"
    "\017SearchCondition\022\025\n\rsearch_string\030\001 \001(\t\022"
    "I\n\023optional_references\030\002 \003(\0132,.io.deepha"
    "ven.proto.backplane.grpc.Reference\"\224\001\n\016F"
    "lattenRequest\022<\n\tresult_id\030\001 \001(\0132).io.de"
    "ephaven.proto.backplane.grpc.Ticket\022D\n\ts"
    "ource_id\030\002 \001(\01321.io.deephaven.proto.back"
    "plane.grpc.TableReference\"\226\001\n\020MetaTableR"
    "equest\022<\n\tresult_id\030\001 \001(\0132).io.deephaven"
    ".proto.backplane.grpc.Ticket\022D\n\tsource_i"
    "d\030\002 \001(\01321.io.deephaven.proto.backplane.g"
    "rpc.TableReference\"\264\003\n\031RunChartDownsampl"
    "eRequest\022<\n\tresult_id\030\001 \001(\0132).io.deephav"
    "en.proto.backplane.grpc.Ticket\022D\n\tsource"
    "_id\030\002 \001(\01321.io.deephaven.proto.backplane"
    ".grpc.TableReference\022\023\n\013pixel_count\030\003 \001("
    "\005\022Z\n\nzoom_range\030\004 \001(\0132F.io.deephaven.pro"
    "to.backplane.grpc.RunChartDownsampleRequ"
    "est.ZoomRange\022\025\n\rx_column_name\030\005 \001(\t\022\026\n\016"
    "y_column_names\030\006 \003(\t\032s\n\tZoomRange\022\037\n\016min"
    "_date_nanos\030\001 \001(\003B\0020\001H\000\210\001\001\022\037\n\016max_date_n"
    "anos\030\002 \001(\003B\0020\001H\001\210\001\001B\021\n\017_min_date_nanosB\021"
    "\n\017_max_date_nanos\"\340\005\n\027CreateInputTableRe"
    "quest\022<\n\tresult_id\030\001 \001(\0132).io.deephaven."
    "proto.backplane.grpc.Ticket\022L\n\017source_ta"
    "ble_id\030\002 \001(\01321.io.deephaven.proto.backpl"
    "ane.grpc.TableReferenceH\000\022\020\n\006schema\030\003 \001("
    "\014H\000\022W\n\004kind\030\004 \001(\0132I.io.deephaven.proto.b"
    "ackplane.grpc.CreateInputTableRequest.In"
    "putTableKind\032\277\003\n\016InputTableKind\022}\n\025in_me"
    "mory_append_only\030\001 \001(\0132\\.io.deephaven.pr"
    "oto.backplane.grpc.CreateInputTableReque"
    "st.InputTableKind.InMemoryAppendOnlyH\000\022{"
    "\n\024in_memory_key_backed\030\002 \001(\0132[.io.deepha"
    "ven.proto.backplane.grpc.CreateInputTabl"
    "eRequest.InputTableKind.InMemoryKeyBacke"
    "dH\000\022`\n\005blink\030\003 \001(\0132O.io.deephaven.proto."
    "backplane.grpc.CreateInputTableRequest.I"
    "nputTableKind.BlinkH\000\032\024\n\022InMemoryAppendO"
    "nly\032(\n\021InMemoryKeyBacked\022\023\n\013key_columns\030"
    "\001 \003(\t\032\007\n\005BlinkB\006\n\004kindB\014\n\ndefinition\"\203\002\n"
    "\016WhereInRequest\022<\n\tresult_id\030\001 \001(\0132).io."
    "deephaven.proto.backplane.grpc.Ticket\022B\n"
    "\007left_id\030\002 \001(\01321.io.deephaven.proto.back"
    "plane.grpc.TableReference\022C\n\010right_id\030\003 "
    "\001(\01321.io.deephaven.proto.backplane.grpc."
    "TableReference\022\020\n\010inverted\030\004 \001(\010\022\030\n\020colu"
    "mns_to_match\030\005 \003(\t\"\352\001\n\027ColumnStatisticsR"
    "equest\022<\n\tresult_id\030\001 \001(\0132).io.deephaven"
    ".proto.backplane.grpc.Ticket\022D\n\tsource_i"
    "d\030\002 \001(\01321.io.deephaven.proto.backplane.g"
    "rpc.TableReference\022\023\n\013column_name\030\003 \001(\t\022"
    "\037\n\022unique_value_limit\030\004 \001(\005H\000\210\001\001B\025\n\023_uni"
    "que_value_limit\"\231\032\n\021BatchTableRequest\022K\n"
    "\003ops\030\001 \003(\0132>.io.deephaven.proto.backplan"
    "e.grpc.BatchTableRequest.Operation\032\266\031\n\tO"
    "peration\022K\n\013empty_table\030\001 \001(\01324.io.deeph"
    "aven.proto.backplane.grpc.EmptyTableRequ"
    "estH\000\022I\n\ntime_table\030\002 \001(\01323.io.deephaven"
    ".proto.backplane.grpc.TimeTableRequestH\000"
    "\022M\n\014drop_columns\030\003 \001(\01325.io.deephaven.pr"
    "oto.backplane.grpc.DropColumnsRequestH\000\022"
    "J\n\006update\030\004 \001(\01328.io.deephaven.proto.bac"
    "kplane.grpc.SelectOrUpdateRequestH\000\022O\n\013l"
    "azy_update\030\005 \001(\01328.io.deephaven.proto.ba"
    "ckplane.grpc.SelectOrUpdateRequestH\000\022H\n\004"
    "view\030\006 \001(\01328.io.deephaven.proto.backplan"
    "e.grpc.SelectOrUpdateRequestH\000\022O\n\013update"
    "_view\030\007 \001(\01328.io.deephaven.proto.backpla"
    "ne.grpc.SelectOrUpdateRequestH\000\022J\n\006selec"
    "t\030\010 \001(\01328.io.deephaven.proto.backplane.g"
    "rpc.SelectOrUpdateRequestH\000\022S\n\017select_di"
    "stinct\030\t \001(\01328.io.deephaven.proto.backpl"
    "ane.grpc.SelectDistinctRequestH\000\022G\n\006filt"
    "er\030\n \001(\01325.io.deephaven.proto.backplane."
    "grpc.FilterTableRequestH\000\022`\n\023unstructure"
    "d_filter\030\013 \001(\0132A.io.deephaven.proto.back"
    "plane.grpc.UnstructuredFilterTableReques"
    "tH\000\022C\n\004sort\030\014 \001(\01323.io.deephaven.proto.b"
    "ackplane.grpc.SortTableRequestH\000\022D\n\004head"
    "\030\r \001(\01324.io.deephaven.proto.backplane.gr"
    "pc.HeadOrTailRequestH\000\022D\n\004tail\030\016 \001(\01324.i"
    "o.deephaven.proto.backplane.grpc.HeadOrT"
    "ailRequestH\000\022I\n\007head_by\030\017 \001(\01326.io.deeph"
    "aven.proto.backplane.grpc.HeadOrTailByRe"
    "questH\000\022I\n\007tail_by\030\020 \001(\01326.io.deephaven."
    "proto.backplane.grpc.HeadOrTailByRequest"
    "H\000\022D\n\007ungroup\030\021 \001(\01321.io.deephaven.proto"
    ".backplane.grpc.UngroupRequestH\000\022F\n\005merg"
    "e\030\022 \001(\01325.io.deephaven.proto.backplane.g"
    "rpc.MergeTablesRequestH\000\022S\n\017combo_aggreg"
    "ate\030\023 \001(\01328.io.deephaven.proto.backplane"
    ".grpc.ComboAggregateRequestH\000\022D\n\007flatten"
    "\030\025 \001(\01321.io.deephaven.proto.backplane.gr"
    "pc.FlattenRequestH\000\022\\\n\024run_chart_downsam"
    "ple\030\026 \001(\0132<.io.deephaven.proto.backplane"
    ".grpc.RunChartDownsampleRequestH\000\022O\n\ncro"
    "ss_join\030\027 \001(\01329.io.deephaven.proto.backp"
    "lane.grpc.CrossJoinTablesRequestH\000\022S\n\014na"
    "tural_join\030\030 \001(\0132;.io.deephaven.proto.ba"
    "ckplane.grpc.NaturalJoinTablesRequestH\000\022"
    "O\n\nexact_join\030\031 \001(\01329.io.deephaven.proto"
    ".backplane.grpc.ExactJoinTablesRequestH\000"
    "\022M\n\tleft_join\030\032 \001(\01328.io.deephaven.proto"
    ".backplane.grpc.LeftJoinTablesRequestH\000\022"
    "R\n\nas_of_join\030\033 \001(\01328.io.deephaven.proto"
    ".backplane.grpc.AsOfJoinTablesRequestB\002\030"
    "\001H\000\022K\n\013fetch_table\030\034 \001(\01324.io.deephaven."
    "proto.backplane.grpc.FetchTableRequestH\000"
    "\022^\n\025apply_preview_columns\030\036 \001(\0132=.io.dee"
    "phaven.proto.backplane.grpc.ApplyPreview"
    "ColumnsRequestH\000\022X\n\022create_input_table\030\037"
    " \001(\0132:.io.deephaven.proto.backplane.grpc"
    ".CreateInputTableRequestH\000\022G\n\tupdate_by\030"
    "  \001(\01322.io.deephaven.proto.backplane.grp"
    "c.UpdateByRequestH\000\022E\n\010where_in\030! \001(\01321."
    "io.deephaven.proto.backplane.grpc.WhereI"
    "nRequestH\000\022O\n\raggregate_all\030\" \001(\01326.io.d"
    "eephaven.proto.backplane.grpc.AggregateA"
    "llRequestH\000\022H\n\taggregate\030# \001(\01323.io.deep"
    "haven.proto.backplane.grpc.AggregateRequ"
    "estH\000\022K\n\010snapshot\030$ \001(\01327.io.deephaven.p"
    "roto.backplane.grpc.SnapshotTableRequest"
    "H\000\022T\n\rsnapshot_when\030% \001(\0132;.io.deephaven"
    ".proto.backplane.grpc.SnapshotWhenTableR"
    "equestH\000\022I\n\nmeta_table\030& \001(\01323.io.deepha"
    "ven.proto.backplane.grpc.MetaTableReques"
    "tH\000\022O\n\nrange_join\030\' \001(\01329.io.deephaven.p"
    "roto.backplane.grpc.RangeJoinTablesReque"
    "stH\000\022C\n\002aj\030( \001(\01325.io.deephaven.proto.ba"
    "ckplane.grpc.AjRajTablesRequestH\000\022D\n\003raj"
    "\030) \001(\01325.io.deephaven.proto.backplane.gr"
    "pc.AjRajTablesRequestH\000\022W\n\021column_statis"
    "tics\030* \001(\0132:.io.deephaven.proto.backplan"
    "e.grpc.ColumnStatisticsRequestH\000\022O\n\nmult"
    "i_join\030+ \001(\01329.io.deephaven.proto.backpl"
    "ane.grpc.MultiJoinTablesRequestH\000B\004\n\002opJ"
    "\004\010\024\020\025J\004\010\035\020\036*b\n\017BadDataBehavior\022#\n\037BAD_DA"
    "TA_BEHAVIOR_NOT_SPECIFIED\020\000\022\t\n\005THROW\020\001\022\t"
    "\n\005RESET\020\002\022\010\n\004SKIP\020\003\022\n\n\006POISON\020\004*t\n\024Updat"
    "eByNullBehavior\022\037\n\033NULL_BEHAVIOR_NOT_SPE"
    "CIFIED\020\000\022\022\n\016NULL_DOMINATES\020\001\022\023\n\017VALUE_DO"
    "MINATES\020\002\022\022\n\016ZERO_DOMINATES\020\003*\033\n\tNullVal"
    "ue\022\016\n\nNULL_VALUE\020\000*2\n\017CaseSensitivity\022\016\n"
    "\nMATCH_CASE\020\000\022\017\n\013IGNORE_CASE\020\001*&\n\tMatchT"
    "ype\022\013\n\007REGULAR\020\000\022\014\n\010INVERTED\020\0012\2731\n\014Table"
    "Service\022\221\001\n GetExportedTableCreationResp"
    "onse\022).io.deephaven.proto.backplane.grpc"
    ".Ticket\032@.io.deephaven.proto.backplane.g"
    "rpc.ExportedTableCreationResponse\"\000\022\206\001\n\n"
    "FetchTable\0224.io.deephaven.proto.backplan"
    "e.grpc.FetchTableRequest\032@.io.deephaven."
    "proto.backplane.grpc.ExportedTableCreati"
    "onResponse\"\000\022\230\001\n\023ApplyPreviewColumns\022=.i"
    "o.deephaven.proto.backplane.grpc.ApplyPr"
    "eviewColumnsRequest\032@.io.deephaven.proto"
    ".backplane.grpc.ExportedTableCreationRes"
    "ponse\"\000\022\206\001\n\nEmptyTable\0224.io.deephaven.pr"
    "oto.backplane.grpc.EmptyTableRequest\032@.i"
    "o.deephaven.proto.backplane.grpc.Exporte"
    "dTableCreationResponse\"\000\022\204\001\n\tTimeTable\0223"
    ".io.deephaven.proto.backplane.grpc.TimeT"
    "ableRequest\032@.io.deephaven.proto.backpla"
    "ne.grpc.ExportedTableCreationResponse\"\000\022"
    "\210\001\n\013DropColumns\0225.io.deephaven.proto.bac"
    "kplane.grpc.DropColumnsRequest\032@.io.deep"
    "haven.proto.backplane.grpc.ExportedTable"
    "CreationResponse\"\000\022\206\001\n\006Update\0228.io.deeph"
    "aven.proto.backplane.grpc.SelectOrUpdate"
    "Request\032@.io.deephaven.proto.backplane.g"
    "rpc.ExportedTableCreationResponse\"\000\022\212\001\n\n"
    "LazyUpdate\0228.io.deephaven.proto.backplan"
    "e.grpc.SelectOrUpdateRequest\032@.io.deepha"
    "ven.proto.backplane.grpc.ExportedTableCr"
    "eationResponse\"\000\022\204\001\n\004View\0228.io.deephaven"
    ".proto.backplane.grpc.SelectOrUpdateRequ"
    "est\032@.io.deephaven.proto.backplane.grpc."
    "ExportedTableCreationResponse\"\000\022\212\001\n\nUpda"
    "teView\0228.io.deephaven.proto.backplane.gr"
    "pc.SelectOrUpdateRequest\032@.io.deephaven."
    "proto.backplane.grpc.ExportedTableCreati"
    "onResponse\"\000\022\206\001\n\006Select\0228.io.deephaven.p"
    "roto.backplane.grpc.SelectOrUpdateReques"
    "t\032@.io.deephaven.proto.backplane.grpc.Ex"
    "portedTableCreationResponse\"\000\022\202\001\n\010Update"
    "By\0222.io.deephaven.proto.backplane.grpc.U"
    "pdateByRequest\032@.io.deephaven.proto.back"
    "plane.grpc.ExportedTableCreationResponse"
    "\"\000\022\216\001\n\016SelectDistinct\0228.io.deephaven.pro"
    "to.backplane.grpc.SelectDistinctRequest\032"
    "@.io.deephaven.proto.backplane.grpc.Expo"
    "rtedTableCreationResponse\"\000\022\203\001\n\006Filter\0225"
    ".io.deephaven.proto.backplane.grpc.Filte"
    "rTableRequest\032@.io.deephaven.proto.backp"
    "lane.grpc.ExportedTableCreationResponse\""
    "\000\022\233\001\n\022UnstructuredFilter\022A.io.deephaven."
    "proto.backplane.grpc.UnstructuredFilterT"
    "ableRequest\032@.io.deephaven.proto.backpla"
    "ne.grpc.ExportedTableCreationResponse\"\000\022"
    "\177\n\004Sort\0223.io.deephaven.proto.backplane.g"
    "rpc.SortTableRequest\032@.io.deephaven.prot"
    "o.backplane.grpc.ExportedTableCreationRe"
    "sponse\"\000\022\200\001\n\004Head\0224.io.deephaven.proto.b"
    "ackplane.grpc.HeadOrTailRequest\032@.io.dee"
    "phaven.proto.backplane.grpc.ExportedTabl"
    "eCreationResponse\"\000\022\200\001\n\004Tail\0224.io.deepha"
    "ven.proto.backplane.grpc.HeadOrTailReque"
    "st\032@.io.deephaven.proto.backplane.grpc.E"
    "xportedTableCreationResponse\"\000\022\204\001\n\006HeadB"
    "y\0226.io.deephaven.proto.backplane.grpc.He"
    "adOrTailByRequest\032@.io.deephaven.proto.b"
    "ackplane.grpc.ExportedTableCreationRespo"
    "nse\"\000\022\204\001\n\006TailBy\0226.io.deephaven.proto.ba"
    "ckplane.grpc.HeadOrTailByRequest\032@.io.de"
    "ephaven.proto.backplane.grpc.ExportedTab"
    "leCreationResponse\"\000\022\200\001\n\007Ungroup\0221.io.de"
    "ephaven.proto.backplane.grpc.UngroupRequ"
    "est\032@.io.deephaven.proto.backplane.grpc."
    "ExportedTableCreationResponse\"\000\022\210\001\n\013Merg"
    "eTables\0225.io.deephaven.proto.backplane.g"
    "rpc.MergeTablesRequest\032@.io.deephaven.pr"
    "oto.backplane.grpc.ExportedTableCreation"
    "Response\"\000\022\220\001\n\017CrossJoinTables\0229.io.deep"
    "haven.proto.backplane.grpc.CrossJoinTabl"
    "esRequest\032@.io.deephaven.proto.backplane"
    ".grpc.ExportedTableCreationResponse\"\000\022\224\001"
    "\n\021NaturalJoinTables\022;.io.deephaven.proto"
    ".backplane.grpc.NaturalJoinTablesRequest"
    "\032@.io.deephaven.proto.backplane.grpc.Exp"
    "ortedTableCreationResponse\"\000\022\220\001\n\017ExactJo"
    "inTables\0229.io.deephaven.proto.backplane."
    "grpc.ExactJoinTablesRequest\032@.io.deephav"
    "en.proto.backplane.grpc.ExportedTableCre"
    "ationResponse\"\000\022\216\001\n\016LeftJoinTables\0228.io."
    "deephaven.proto.backplane.grpc.LeftJoinT"
    "ablesRequest\032@.io.deephaven.proto.backpl"
    "ane.grpc.ExportedTableCreationResponse\"\000"
    "\022\221\001\n\016AsOfJoinTables\0228.io.deephaven.proto"
    ".backplane.grpc.AsOfJoinTablesRequest\032@."
    "io.deephaven.proto.backplane.grpc.Export"
    "edTableCreationResponse\"\003\210\002\001\022\205\001\n\010AjTable"
    "s\0225.io.deephaven.proto.backplane.grpc.Aj"
    "RajTablesRequest\032@.io.deephaven.proto.ba"
    "ckplane.grpc.ExportedTableCreationRespon"
    "se\"\000\022\206\001\n\tRajTables\0225.io.deephaven.proto."
    "backplane.grpc.AjRajTablesRequest\032@.io.d"
    "eephaven.proto.backplane.grpc.ExportedTa"
    "bleCreationResponse\"\000\022\220\001\n\017MultiJoinTable"
    "s\0229.io.deephaven.proto.backplane.grpc.Mu"
    "ltiJoinTablesRequest\032@.io.deephaven.prot"
    "o.backplane.grpc.ExportedTableCreationRe"
    "sponse\"\000\022\220\001\n\017RangeJoinTables\0229.io.deepha"
    "ven.proto.backplane.grpc.RangeJoinTables"
    "Request\032@.io.deephaven.proto.backplane.g"
    "rpc.ExportedTableCreationResponse\"\000\022\221\001\n\016"
    "ComboAggregate\0228.io.deephaven.proto.back"
    "plane.grpc.ComboAggregateRequest\032@.io.de"
    "ephaven.proto.backplane.grpc.ExportedTab"
    "leCreationResponse\"\003\210\002\001\022\212\001\n\014AggregateAll"
    "\0226.io.deephaven.proto.backplane.grpc.Agg"
    "regateAllRequest\032@.io.deephaven.proto.ba"
    "ckplane.grpc.ExportedTableCreationRespon"
    "se\"\000\022\204\001\n\tAggregate\0223.io.deephaven.proto."
    "backplane.grpc.AggregateRequest\032@.io.dee"
    "phaven.proto.backplane.grpc.ExportedTabl"
    "eCreationResponse\"\000\022\207\001\n\010Snapshot\0227.io.de"
    "ephaven.proto.backplane.grpc.SnapshotTab"
    "leRequest\032@.io.deephaven.proto.backplane"
    ".grpc.ExportedTableCreationResponse\"\000\022\217\001"
    "\n\014SnapshotWhen\022;.io.deephaven.proto.back"
    "plane.grpc.SnapshotWhenTableRequest\032@.io"
    ".deephaven.proto.backplane.grpc.Exported"
    "TableCreationResponse\"\000\022\200\001\n\007Flatten\0221.io"
    ".deephaven.proto.backplane.grpc.FlattenR"
    "equest\032@.io.deephaven.proto.backplane.gr"
    "pc.ExportedTableCreationResponse\"\000\022\226\001\n\022R"
    "unChartDownsample\022<.io.deephaven.proto.b"
    "ackplane.grpc.RunChartDownsampleRequest\032"
    "@.io.deephaven.proto.backplane.grpc.Expo"
    "rtedTableCreationResponse\"\000\022\222\001\n\020CreateIn"
    "putTable\022:.io.deephaven.proto.backplane."
    "grpc.CreateInputTableRequest\032@.io.deepha"
    "ven.proto.backplane.grpc.ExportedTableCr"
    "eationResponse\"\000\022\200\001\n\007WhereIn\0221.io.deepha"
    "ven.proto.backplane.grpc.WhereInRequest\032"
    "@.io.deephaven.proto.backplane.grpc.Expo"
    "rtedTableCreationResponse\"\000\022\203\001\n\005Batch\0224."
    "io.deephaven.proto.backplane.grpc.BatchT"
    "ableRequest\032@.io.deephaven.proto.backpla"
    "ne.grpc.ExportedTableCreationResponse\"\0000"
    "\001\022\231\001\n\024ExportedTableUpdates\022>.io.deephave"
    "n.proto.backplane.grpc.ExportedTableUpda"
    "tesRequest\032=.io.deephaven.proto.backplan"
    "e.grpc.ExportedTableUpdateMessage\"\0000\001\022r\n"
    "\007SeekRow\0221.io.deephaven.proto.backplane."
    "grpc.SeekRowRequest\0322.io.deephaven.proto"
    ".backplane.grpc.SeekRowResponse\"\000\022\204\001\n\tMe"
    "taTable\0223.io.deephaven.proto.backplane.g"
    "rpc.MetaTableRequest\032@.io.deephaven.prot"
    "o.backplane.grpc.ExportedTableCreationRe"
    "sponse\"\000\022\231\001\n\027ComputeColumnStatistics\022:.i"
    "o.deephaven.proto.backplane.grpc.ColumnS"
    "tatisticsRequest\032@.io.deephaven.proto.ba"
    "ckplane.grpc.ExportedTableCreationRespon"
    "se\"\000BAH\001P\001Z;github.com/deephaven/deephav"
    "en-core/go/internal/proto/tableb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_deephaven_2fproto_2ftable_2eproto_deps[1] =
    {
        &::descriptor_table_deephaven_2fproto_2fticket_2eproto,
};
static ::absl::once_flag descriptor_table_deephaven_2fproto_2ftable_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_deephaven_2fproto_2ftable_2eproto = {
    false,
    false,
    35399,
    descriptor_table_protodef_deephaven_2fproto_2ftable_2eproto,
    "deephaven/proto/table.proto",
    &descriptor_table_deephaven_2fproto_2ftable_2eproto_once,
    descriptor_table_deephaven_2fproto_2ftable_2eproto_deps,
    1,
    124,
    schemas,
    file_default_instances,
    TableStruct_deephaven_2fproto_2ftable_2eproto::offsets,
    file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto,
    file_level_service_descriptors_deephaven_2fproto_2ftable_2eproto,
};
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
const ::google::protobuf::EnumDescriptor* MathContext_RoundingMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MathContext_RoundingMode_internal_data_[] = {
    589824u, 0u, };
bool MathContext_RoundingMode_IsValid(int value) {
  return 0 <= value && value <= 8;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr MathContext_RoundingMode MathContext::ROUNDING_MODE_NOT_SPECIFIED;
constexpr MathContext_RoundingMode MathContext::UP;
constexpr MathContext_RoundingMode MathContext::DOWN;
constexpr MathContext_RoundingMode MathContext::CEILING;
constexpr MathContext_RoundingMode MathContext::FLOOR;
constexpr MathContext_RoundingMode MathContext::HALF_UP;
constexpr MathContext_RoundingMode MathContext::HALF_DOWN;
constexpr MathContext_RoundingMode MathContext::HALF_EVEN;
constexpr MathContext_RoundingMode MathContext::UNNECESSARY;
constexpr MathContext_RoundingMode MathContext::RoundingMode_MIN;
constexpr MathContext_RoundingMode MathContext::RoundingMode_MAX;
constexpr int MathContext::RoundingMode_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* AsOfJoinTablesRequest_MatchRule_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t AsOfJoinTablesRequest_MatchRule_internal_data_[] = {
    262144u, 0u, };
bool AsOfJoinTablesRequest_MatchRule_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::LESS_THAN_EQUAL;
constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::LESS_THAN;
constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::GREATER_THAN_EQUAL;
constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::GREATER_THAN;
constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::MatchRule_MIN;
constexpr AsOfJoinTablesRequest_MatchRule AsOfJoinTablesRequest::MatchRule_MAX;
constexpr int AsOfJoinTablesRequest::MatchRule_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* RangeJoinTablesRequest_RangeStartRule_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t RangeJoinTablesRequest_RangeStartRule_internal_data_[] = {
    262144u, 0u, };
bool RangeJoinTablesRequest_RangeStartRule_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr RangeJoinTablesRequest_RangeStartRule RangeJoinTablesRequest::START_UNSPECIFIED;
constexpr RangeJoinTablesRequest_RangeStartRule RangeJoinTablesRequest::LESS_THAN;
constexpr RangeJoinTablesRequest_RangeStartRule RangeJoinTablesRequest::LESS_THAN_OR_EQUAL;
constexpr RangeJoinTablesRequest_RangeStartRule RangeJoinTablesRequest::LESS_THAN_OR_EQUAL_ALLOW_PRECEDING;
constexpr RangeJoinTablesRequest_RangeStartRule RangeJoinTablesRequest::RangeStartRule_MIN;
constexpr RangeJoinTablesRequest_RangeStartRule RangeJoinTablesRequest::RangeStartRule_MAX;
constexpr int RangeJoinTablesRequest::RangeStartRule_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* RangeJoinTablesRequest_RangeEndRule_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t RangeJoinTablesRequest_RangeEndRule_internal_data_[] = {
    262144u, 0u, };
bool RangeJoinTablesRequest_RangeEndRule_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr RangeJoinTablesRequest_RangeEndRule RangeJoinTablesRequest::END_UNSPECIFIED;
constexpr RangeJoinTablesRequest_RangeEndRule RangeJoinTablesRequest::GREATER_THAN;
constexpr RangeJoinTablesRequest_RangeEndRule RangeJoinTablesRequest::GREATER_THAN_OR_EQUAL;
constexpr RangeJoinTablesRequest_RangeEndRule RangeJoinTablesRequest::GREATER_THAN_OR_EQUAL_ALLOW_FOLLOWING;
constexpr RangeJoinTablesRequest_RangeEndRule RangeJoinTablesRequest::RangeEndRule_MIN;
constexpr RangeJoinTablesRequest_RangeEndRule RangeJoinTablesRequest::RangeEndRule_MAX;
constexpr int RangeJoinTablesRequest::RangeEndRule_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* ComboAggregateRequest_AggType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t ComboAggregateRequest_AggType_internal_data_[] = {
    917504u, 0u, };
bool ComboAggregateRequest_AggType_IsValid(int value) {
  return 0 <= value && value <= 13;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ComboAggregateRequest_AggType ComboAggregateRequest::SUM;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::ABS_SUM;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::GROUP;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::AVG;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::COUNT;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::FIRST;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::LAST;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::MIN;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::MAX;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::MEDIAN;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::PERCENTILE;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::STD;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::VAR;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::WEIGHTED_AVG;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::AggType_MIN;
constexpr ComboAggregateRequest_AggType ComboAggregateRequest::AggType_MAX;
constexpr int ComboAggregateRequest::AggType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* SortDescriptor_SortDirection_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t SortDescriptor_SortDirection_internal_data_[] = {
    327679u, 0u, };
bool SortDescriptor_SortDirection_IsValid(int value) {
  return -1 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr SortDescriptor_SortDirection SortDescriptor::UNKNOWN;
constexpr SortDescriptor_SortDirection SortDescriptor::DESCENDING;
constexpr SortDescriptor_SortDirection SortDescriptor::ASCENDING;
constexpr SortDescriptor_SortDirection SortDescriptor::REVERSE;
constexpr SortDescriptor_SortDirection SortDescriptor::SortDirection_MIN;
constexpr SortDescriptor_SortDirection SortDescriptor::SortDirection_MAX;
constexpr int SortDescriptor::SortDirection_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* CompareCondition_CompareOperation_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t CompareCondition_CompareOperation_internal_data_[] = {
    393216u, 0u, };
bool CompareCondition_CompareOperation_IsValid(int value) {
  return 0 <= value && value <= 5;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CompareCondition_CompareOperation CompareCondition::LESS_THAN;
constexpr CompareCondition_CompareOperation CompareCondition::LESS_THAN_OR_EQUAL;
constexpr CompareCondition_CompareOperation CompareCondition::GREATER_THAN;
constexpr CompareCondition_CompareOperation CompareCondition::GREATER_THAN_OR_EQUAL;
constexpr CompareCondition_CompareOperation CompareCondition::EQUALS;
constexpr CompareCondition_CompareOperation CompareCondition::NOT_EQUALS;
constexpr CompareCondition_CompareOperation CompareCondition::CompareOperation_MIN;
constexpr CompareCondition_CompareOperation CompareCondition::CompareOperation_MAX;
constexpr int CompareCondition::CompareOperation_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* BadDataBehavior_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t BadDataBehavior_internal_data_[] = {
    327680u, 0u, };
bool BadDataBehavior_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* UpdateByNullBehavior_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t UpdateByNullBehavior_internal_data_[] = {
    262144u, 0u, };
bool UpdateByNullBehavior_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* NullValue_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[9];
}
PROTOBUF_CONSTINIT const uint32_t NullValue_internal_data_[] = {
    65536u, 0u, };
bool NullValue_IsValid(int value) {
  return 0 <= value && value <= 0;
}
const ::google::protobuf::EnumDescriptor* CaseSensitivity_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[10];
}
PROTOBUF_CONSTINIT const uint32_t CaseSensitivity_internal_data_[] = {
    131072u, 0u, };
bool CaseSensitivity_IsValid(int value) {
  return 0 <= value && value <= 1;
}
const ::google::protobuf::EnumDescriptor* MatchType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto);
  return file_level_enum_descriptors_deephaven_2fproto_2ftable_2eproto[11];
}
PROTOBUF_CONSTINIT const uint32_t MatchType_internal_data_[] = {
    131072u, 0u, };
bool MatchType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
// ===================================================================

class TableReference::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TableReference, _impl_._oneof_case_);
};

void TableReference::set_allocated_ticket(::io::deephaven::proto::backplane::grpc::Ticket* ticket) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_ref();
  if (ticket) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(ticket)->GetArena();
    if (message_arena != submessage_arena) {
      ticket = ::google::protobuf::internal::GetOwnedMessage(message_arena, ticket, submessage_arena);
    }
    set_has_ticket();
    _impl_.ref_.ticket_ = ticket;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TableReference.ticket)
}
void TableReference::clear_ticket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (ref_case() == kTicket) {
    if (GetArena() == nullptr) {
      delete _impl_.ref_.ticket_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.ref_.ticket_);
    }
    clear_has_ref();
  }
}
TableReference::TableReference(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.TableReference)
}
inline PROTOBUF_NDEBUG_INLINE TableReference::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::TableReference& from_msg)
      : ref_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

TableReference::TableReference(
    ::google::protobuf::Arena* arena,
    const TableReference& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TableReference* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (ref_case()) {
    case REF_NOT_SET:
      break;
      case kTicket:
        _impl_.ref_.ticket_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.ref_.ticket_);
        break;
      case kBatchOffset:
        _impl_.ref_.batch_offset_ = from._impl_.ref_.batch_offset_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.TableReference)
}
inline PROTOBUF_NDEBUG_INLINE TableReference::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : ref_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void TableReference::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TableReference::~TableReference() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.TableReference)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TableReference::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_ref()) {
    clear_ref();
  }
  _impl_.~Impl_();
}

void TableReference::clear_ref() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.TableReference)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (ref_case()) {
    case kTicket: {
      if (GetArena() == nullptr) {
        delete _impl_.ref_.ticket_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.ref_.ticket_);
      }
      break;
    }
    case kBatchOffset: {
      // No need to clear
      break;
    }
    case REF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REF_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TableReference::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_TableReference_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TableReference::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<TableReference>(),
            ::google::protobuf::Message::GetNewImpl<TableReference>(),
            ::google::protobuf::Message::GetClearImpl<TableReference>(), &TableReference::ByteSizeLong,
                &TableReference::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TableReference, _impl_._cached_size_),
            false,
        },
        &TableReference::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TableReference::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 1, 0, 2> TableReference::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket ticket = 1;
    {PROTOBUF_FIELD_OFFSET(TableReference, _impl_.ref_.ticket_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // sint32 batch_offset = 2;
    {PROTOBUF_FIELD_OFFSET(TableReference, _impl_.ref_.batch_offset_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kSInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TableReference::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.TableReference)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ref();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TableReference::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TableReference& this_ = static_cast<const TableReference&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TableReference::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TableReference& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.TableReference)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.ref_case()) {
            case kTicket: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.ref_.ticket_, this_._impl_.ref_.ticket_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBatchOffset: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                  2, this_._internal_batch_offset(), target);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.TableReference)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TableReference::ByteSizeLong(const MessageLite& base) {
          const TableReference& this_ = static_cast<const TableReference&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TableReference::ByteSizeLong() const {
          const TableReference& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.TableReference)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.ref_case()) {
            // .io.deephaven.proto.backplane.grpc.Ticket ticket = 1;
            case kTicket: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ref_.ticket_);
              break;
            }
            // sint32 batch_offset = 2;
            case kBatchOffset: {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_batch_offset());
              break;
            }
            case REF_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TableReference::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TableReference*>(&to_msg);
  auto& from = static_cast<const TableReference&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.TableReference)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_ref();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kTicket: {
        if (oneof_needs_init) {
          _this->_impl_.ref_.ticket_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.ref_.ticket_);
        } else {
          _this->_impl_.ref_.ticket_->MergeFrom(from._internal_ticket());
        }
        break;
      }
      case kBatchOffset: {
        _this->_impl_.ref_.batch_offset_ = from._impl_.ref_.batch_offset_;
        break;
      }
      case REF_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TableReference::CopyFrom(const TableReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.TableReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TableReference::InternalSwap(TableReference* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ref_, other->_impl_.ref_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata TableReference::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ExportedTableCreationResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ExportedTableCreationResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_._has_bits_);
};

ExportedTableCreationResponse::ExportedTableCreationResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
}
inline PROTOBUF_NDEBUG_INLINE ExportedTableCreationResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        error_info_(arena, from.error_info_),
        schema_header_(arena, from.schema_header_) {}

ExportedTableCreationResponse::ExportedTableCreationResponse(
    ::google::protobuf::Arena* arena,
    const ExportedTableCreationResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ExportedTableCreationResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, size_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, size_),
           offsetof(Impl_, is_static_) -
               offsetof(Impl_, size_) +
               sizeof(Impl_::is_static_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
}
inline PROTOBUF_NDEBUG_INLINE ExportedTableCreationResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        error_info_(arena),
        schema_header_(arena) {}

inline void ExportedTableCreationResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, is_static_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::is_static_));
}
ExportedTableCreationResponse::~ExportedTableCreationResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ExportedTableCreationResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.error_info_.Destroy();
  _impl_.schema_header_.Destroy();
  delete _impl_.result_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    ExportedTableCreationResponse::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_ExportedTableCreationResponse_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ExportedTableCreationResponse::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<ExportedTableCreationResponse>(),
            ::google::protobuf::Message::GetNewImpl<ExportedTableCreationResponse>(),
            ::google::protobuf::Message::GetClearImpl<ExportedTableCreationResponse>(), &ExportedTableCreationResponse::ByteSizeLong,
                &ExportedTableCreationResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_._cached_size_),
            false,
        },
        &ExportedTableCreationResponse::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* ExportedTableCreationResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 82, 2> ExportedTableCreationResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ExportedTableCreationResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.TableReference result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_.result_id_)}},
    // bool success = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ExportedTableCreationResponse, _impl_.success_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_.success_)}},
    // string error_info = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_.error_info_)}},
    // bytes schema_header = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_.schema_header_)}},
    // bool is_static = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ExportedTableCreationResponse, _impl_.is_static_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_.is_static_)}},
    // sint64 size = 6 [jstype = JS_STRING];
    {::_pbi::TcParser::FastZ64S1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_.size_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.TableReference result_id = 1;
    {PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool success = 2;
    {PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_.success_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string error_info = 3;
    {PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_.error_info_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes schema_header = 4;
    {PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_.schema_header_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bool is_static = 5;
    {PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_.is_static_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // sint64 size = 6 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_.size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\77\0\0\12\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse"
    "error_info"
  }},
};

PROTOBUF_NOINLINE void ExportedTableCreationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_info_.ClearToEmpty();
  _impl_.schema_header_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_id_ != nullptr);
    _impl_.result_id_->Clear();
  }
  ::memset(&_impl_.size_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_static_) -
      reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.is_static_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ExportedTableCreationResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ExportedTableCreationResponse& this_ = static_cast<const ExportedTableCreationResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ExportedTableCreationResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ExportedTableCreationResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.TableReference result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // bool success = 2;
          if (this_._internal_success() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_success(), target);
          }

          // string error_info = 3;
          if (!this_._internal_error_info().empty()) {
            const std::string& _s = this_._internal_error_info();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse.error_info");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // bytes schema_header = 4;
          if (!this_._internal_schema_header().empty()) {
            const std::string& _s = this_._internal_schema_header();
            target = stream->WriteBytesMaybeAliased(4, _s, target);
          }

          // bool is_static = 5;
          if (this_._internal_is_static() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_is_static(), target);
          }

          // sint64 size = 6 [jstype = JS_STRING];
          if (this_._internal_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
                6, this_._internal_size(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ExportedTableCreationResponse::ByteSizeLong(const MessageLite& base) {
          const ExportedTableCreationResponse& this_ = static_cast<const ExportedTableCreationResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ExportedTableCreationResponse::ByteSizeLong() const {
          const ExportedTableCreationResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string error_info = 3;
            if (!this_._internal_error_info().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_error_info());
            }
            // bytes schema_header = 4;
            if (!this_._internal_schema_header().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_schema_header());
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.TableReference result_id = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
          }
           {
            // sint64 size = 6 [jstype = JS_STRING];
            if (this_._internal_size() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
                  this_._internal_size());
            }
            // bool success = 2;
            if (this_._internal_success() != 0) {
              total_size += 2;
            }
            // bool is_static = 5;
            if (this_._internal_is_static() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ExportedTableCreationResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ExportedTableCreationResponse*>(&to_msg);
  auto& from = static_cast<const ExportedTableCreationResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_info().empty()) {
    _this->_internal_set_error_info(from._internal_error_info());
  }
  if (!from._internal_schema_header().empty()) {
    _this->_internal_set_schema_header(from._internal_schema_header());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.result_id_ != nullptr);
    if (_this->_impl_.result_id_ == nullptr) {
      _this->_impl_.result_id_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.result_id_);
    } else {
      _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
    }
  }
  if (from._internal_size() != 0) {
    _this->_impl_.size_ = from._impl_.size_;
  }
  if (from._internal_success() != 0) {
    _this->_impl_.success_ = from._impl_.success_;
  }
  if (from._internal_is_static() != 0) {
    _this->_impl_.is_static_ = from._impl_.is_static_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExportedTableCreationResponse::CopyFrom(const ExportedTableCreationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ExportedTableCreationResponse::InternalSwap(ExportedTableCreationResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_info_, &other->_impl_.error_info_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.schema_header_, &other->_impl_.schema_header_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_.is_static_)
      + sizeof(ExportedTableCreationResponse::_impl_.is_static_)
      - PROTOBUF_FIELD_OFFSET(ExportedTableCreationResponse, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata ExportedTableCreationResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FetchTableRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<FetchTableRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(FetchTableRequest, _impl_._has_bits_);
};

void FetchTableRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
FetchTableRequest::FetchTableRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.FetchTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE FetchTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::FetchTableRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

FetchTableRequest::FetchTableRequest(
    ::google::protobuf::Arena* arena,
    const FetchTableRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FetchTableRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.source_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;
  _impl_.result_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.FetchTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE FetchTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FetchTableRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, source_id_),
           0,
           offsetof(Impl_, result_id_) -
               offsetof(Impl_, source_id_) +
               sizeof(Impl_::result_id_));
}
FetchTableRequest::~FetchTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FetchTableRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.source_id_;
  delete _impl_.result_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    FetchTableRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_FetchTableRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &FetchTableRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<FetchTableRequest>(),
            ::google::protobuf::Message::GetNewImpl<FetchTableRequest>(),
            ::google::protobuf::Message::GetClearImpl<FetchTableRequest>(), &FetchTableRequest::ByteSizeLong,
                &FetchTableRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(FetchTableRequest, _impl_._cached_size_),
            false,
        },
        &FetchTableRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* FetchTableRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> FetchTableRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FetchTableRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::FetchTableRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(FetchTableRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FetchTableRequest, _impl_.source_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
    {PROTOBUF_FIELD_OFFSET(FetchTableRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
    {PROTOBUF_FIELD_OFFSET(FetchTableRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void FetchTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FetchTableRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FetchTableRequest& this_ = static_cast<const FetchTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FetchTableRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FetchTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.FetchTableRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.FetchTableRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FetchTableRequest::ByteSizeLong(const MessageLite& base) {
          const FetchTableRequest& this_ = static_cast<const FetchTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FetchTableRequest::ByteSizeLong() const {
          const FetchTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.FetchTableRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FetchTableRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FetchTableRequest*>(&to_msg);
  auto& from = static_cast<const FetchTableRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FetchTableRequest::CopyFrom(const FetchTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.FetchTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FetchTableRequest::InternalSwap(FetchTableRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchTableRequest, _impl_.result_id_)
      + sizeof(FetchTableRequest::_impl_.result_id_)
      - PROTOBUF_FIELD_OFFSET(FetchTableRequest, _impl_.source_id_)>(
          reinterpret_cast<char*>(&_impl_.source_id_),
          reinterpret_cast<char*>(&other->_impl_.source_id_));
}

::google::protobuf::Metadata FetchTableRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ApplyPreviewColumnsRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ApplyPreviewColumnsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ApplyPreviewColumnsRequest, _impl_._has_bits_);
};

void ApplyPreviewColumnsRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ApplyPreviewColumnsRequest::ApplyPreviewColumnsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
}
inline PROTOBUF_NDEBUG_INLINE ApplyPreviewColumnsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ApplyPreviewColumnsRequest::ApplyPreviewColumnsRequest(
    ::google::protobuf::Arena* arena,
    const ApplyPreviewColumnsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ApplyPreviewColumnsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.source_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;
  _impl_.result_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
}
inline PROTOBUF_NDEBUG_INLINE ApplyPreviewColumnsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ApplyPreviewColumnsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, source_id_),
           0,
           offsetof(Impl_, result_id_) -
               offsetof(Impl_, source_id_) +
               sizeof(Impl_::result_id_));
}
ApplyPreviewColumnsRequest::~ApplyPreviewColumnsRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ApplyPreviewColumnsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.source_id_;
  delete _impl_.result_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    ApplyPreviewColumnsRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_ApplyPreviewColumnsRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ApplyPreviewColumnsRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<ApplyPreviewColumnsRequest>(),
            ::google::protobuf::Message::GetNewImpl<ApplyPreviewColumnsRequest>(),
            ::google::protobuf::Message::GetClearImpl<ApplyPreviewColumnsRequest>(), &ApplyPreviewColumnsRequest::ByteSizeLong,
                &ApplyPreviewColumnsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ApplyPreviewColumnsRequest, _impl_._cached_size_),
            false,
        },
        &ApplyPreviewColumnsRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* ApplyPreviewColumnsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> ApplyPreviewColumnsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ApplyPreviewColumnsRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(ApplyPreviewColumnsRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ApplyPreviewColumnsRequest, _impl_.source_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
    {PROTOBUF_FIELD_OFFSET(ApplyPreviewColumnsRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
    {PROTOBUF_FIELD_OFFSET(ApplyPreviewColumnsRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ApplyPreviewColumnsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ApplyPreviewColumnsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ApplyPreviewColumnsRequest& this_ = static_cast<const ApplyPreviewColumnsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ApplyPreviewColumnsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ApplyPreviewColumnsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ApplyPreviewColumnsRequest::ByteSizeLong(const MessageLite& base) {
          const ApplyPreviewColumnsRequest& this_ = static_cast<const ApplyPreviewColumnsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ApplyPreviewColumnsRequest::ByteSizeLong() const {
          const ApplyPreviewColumnsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ApplyPreviewColumnsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ApplyPreviewColumnsRequest*>(&to_msg);
  auto& from = static_cast<const ApplyPreviewColumnsRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ApplyPreviewColumnsRequest::CopyFrom(const ApplyPreviewColumnsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ApplyPreviewColumnsRequest::InternalSwap(ApplyPreviewColumnsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApplyPreviewColumnsRequest, _impl_.result_id_)
      + sizeof(ApplyPreviewColumnsRequest::_impl_.result_id_)
      - PROTOBUF_FIELD_OFFSET(ApplyPreviewColumnsRequest, _impl_.source_id_)>(
          reinterpret_cast<char*>(&_impl_.source_id_),
          reinterpret_cast<char*>(&other->_impl_.source_id_));
}

::google::protobuf::Metadata ApplyPreviewColumnsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ExportedTableUpdatesRequest::_Internal {
 public:
};

ExportedTableUpdatesRequest::ExportedTableUpdatesRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
}
ExportedTableUpdatesRequest::ExportedTableUpdatesRequest(
    ::google::protobuf::Arena* arena,
    const ExportedTableUpdatesRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ExportedTableUpdatesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdatesRequest)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    ExportedTableUpdatesRequest::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_ExportedTableUpdatesRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ExportedTableUpdatesRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<ExportedTableUpdatesRequest>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<ExportedTableUpdatesRequest>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<ExportedTableUpdatesRequest>(), &ExportedTableUpdatesRequest::ByteSizeLong,
                &ExportedTableUpdatesRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ExportedTableUpdatesRequest, _impl_._cached_size_),
            false,
        },
        &ExportedTableUpdatesRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* ExportedTableUpdatesRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> ExportedTableUpdatesRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ExportedTableUpdatesRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata ExportedTableUpdatesRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ExportedTableUpdateMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ExportedTableUpdateMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ExportedTableUpdateMessage, _impl_._has_bits_);
};

void ExportedTableUpdateMessage::clear_export_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.export_id_ != nullptr) _impl_.export_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ExportedTableUpdateMessage::ExportedTableUpdateMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
}
inline PROTOBUF_NDEBUG_INLINE ExportedTableUpdateMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        update_failure_message_(arena, from.update_failure_message_) {}

ExportedTableUpdateMessage::ExportedTableUpdateMessage(
    ::google::protobuf::Arena* arena,
    const ExportedTableUpdateMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ExportedTableUpdateMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.export_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.export_id_)
                        : nullptr;
  _impl_.size_ = from._impl_.size_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
}
inline PROTOBUF_NDEBUG_INLINE ExportedTableUpdateMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        update_failure_message_(arena) {}

inline void ExportedTableUpdateMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, export_id_),
           0,
           offsetof(Impl_, size_) -
               offsetof(Impl_, export_id_) +
               sizeof(Impl_::size_));
}
ExportedTableUpdateMessage::~ExportedTableUpdateMessage() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ExportedTableUpdateMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.update_failure_message_.Destroy();
  delete _impl_.export_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    ExportedTableUpdateMessage::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_ExportedTableUpdateMessage_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ExportedTableUpdateMessage::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<ExportedTableUpdateMessage>(),
            ::google::protobuf::Message::GetNewImpl<ExportedTableUpdateMessage>(),
            ::google::protobuf::Message::GetClearImpl<ExportedTableUpdateMessage>(), &ExportedTableUpdateMessage::ByteSizeLong,
                &ExportedTableUpdateMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ExportedTableUpdateMessage, _impl_._cached_size_),
            false,
        },
        &ExportedTableUpdateMessage::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* ExportedTableUpdateMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 91, 2> ExportedTableUpdateMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ExportedTableUpdateMessage, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ExportedTableUpdateMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket export_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ExportedTableUpdateMessage, _impl_.export_id_)}},
    // sint64 size = 2 [jstype = JS_STRING];
    {::_pbi::TcParser::FastZ64S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ExportedTableUpdateMessage, _impl_.size_)}},
    // string update_failure_message = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ExportedTableUpdateMessage, _impl_.update_failure_message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket export_id = 1;
    {PROTOBUF_FIELD_OFFSET(ExportedTableUpdateMessage, _impl_.export_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // sint64 size = 2 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(ExportedTableUpdateMessage, _impl_.size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt64)},
    // string update_failure_message = 3;
    {PROTOBUF_FIELD_OFFSET(ExportedTableUpdateMessage, _impl_.update_failure_message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
    "\74\0\0\26\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage"
    "update_failure_message"
  }},
};

PROTOBUF_NOINLINE void ExportedTableUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.update_failure_message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.export_id_ != nullptr);
    _impl_.export_id_->Clear();
  }
  _impl_.size_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ExportedTableUpdateMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ExportedTableUpdateMessage& this_ = static_cast<const ExportedTableUpdateMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ExportedTableUpdateMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ExportedTableUpdateMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket export_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.export_id_, this_._impl_.export_id_->GetCachedSize(), target,
                stream);
          }

          // sint64 size = 2 [jstype = JS_STRING];
          if (this_._internal_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
                2, this_._internal_size(), target);
          }

          // string update_failure_message = 3;
          if (!this_._internal_update_failure_message().empty()) {
            const std::string& _s = this_._internal_update_failure_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage.update_failure_message");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ExportedTableUpdateMessage::ByteSizeLong(const MessageLite& base) {
          const ExportedTableUpdateMessage& this_ = static_cast<const ExportedTableUpdateMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ExportedTableUpdateMessage::ByteSizeLong() const {
          const ExportedTableUpdateMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string update_failure_message = 3;
            if (!this_._internal_update_failure_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_update_failure_message());
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.Ticket export_id = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.export_id_);
            }
          }
           {
            // sint64 size = 2 [jstype = JS_STRING];
            if (this_._internal_size() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
                  this_._internal_size());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ExportedTableUpdateMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ExportedTableUpdateMessage*>(&to_msg);
  auto& from = static_cast<const ExportedTableUpdateMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_update_failure_message().empty()) {
    _this->_internal_set_update_failure_message(from._internal_update_failure_message());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.export_id_ != nullptr);
    if (_this->_impl_.export_id_ == nullptr) {
      _this->_impl_.export_id_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.export_id_);
    } else {
      _this->_impl_.export_id_->MergeFrom(*from._impl_.export_id_);
    }
  }
  if (from._internal_size() != 0) {
    _this->_impl_.size_ = from._impl_.size_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExportedTableUpdateMessage::CopyFrom(const ExportedTableUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ExportedTableUpdateMessage::InternalSwap(ExportedTableUpdateMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.update_failure_message_, &other->_impl_.update_failure_message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExportedTableUpdateMessage, _impl_.size_)
      + sizeof(ExportedTableUpdateMessage::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(ExportedTableUpdateMessage, _impl_.export_id_)>(
          reinterpret_cast<char*>(&_impl_.export_id_),
          reinterpret_cast<char*>(&other->_impl_.export_id_));
}

::google::protobuf::Metadata ExportedTableUpdateMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EmptyTableRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<EmptyTableRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EmptyTableRequest, _impl_._has_bits_);
};

void EmptyTableRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
EmptyTableRequest::EmptyTableRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE EmptyTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::EmptyTableRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

EmptyTableRequest::EmptyTableRequest(
    ::google::protobuf::Arena* arena,
    const EmptyTableRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EmptyTableRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.size_ = from._impl_.size_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE EmptyTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EmptyTableRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, size_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::size_));
}
EmptyTableRequest::~EmptyTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EmptyTableRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    EmptyTableRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_EmptyTableRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &EmptyTableRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<EmptyTableRequest>(),
            ::google::protobuf::Message::GetNewImpl<EmptyTableRequest>(),
            ::google::protobuf::Message::GetClearImpl<EmptyTableRequest>(), &EmptyTableRequest::ByteSizeLong,
                &EmptyTableRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(EmptyTableRequest, _impl_._cached_size_),
            false,
        },
        &EmptyTableRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* EmptyTableRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> EmptyTableRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EmptyTableRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::EmptyTableRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // sint64 size = 2 [jstype = JS_STRING];
    {::_pbi::TcParser::FastZ64S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(EmptyTableRequest, _impl_.size_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EmptyTableRequest, _impl_.result_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(EmptyTableRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // sint64 size = 2 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(EmptyTableRequest, _impl_.size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void EmptyTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_id_ != nullptr);
    _impl_.result_id_->Clear();
  }
  _impl_.size_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EmptyTableRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EmptyTableRequest& this_ = static_cast<const EmptyTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EmptyTableRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EmptyTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // sint64 size = 2 [jstype = JS_STRING];
          if (this_._internal_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
                2, this_._internal_size(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EmptyTableRequest::ByteSizeLong(const MessageLite& base) {
          const EmptyTableRequest& this_ = static_cast<const EmptyTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EmptyTableRequest::ByteSizeLong() const {
          const EmptyTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
          }
           {
            // sint64 size = 2 [jstype = JS_STRING];
            if (this_._internal_size() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
                  this_._internal_size());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EmptyTableRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EmptyTableRequest*>(&to_msg);
  auto& from = static_cast<const EmptyTableRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.result_id_ != nullptr);
    if (_this->_impl_.result_id_ == nullptr) {
      _this->_impl_.result_id_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
    } else {
      _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
    }
  }
  if (from._internal_size() != 0) {
    _this->_impl_.size_ = from._impl_.size_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EmptyTableRequest::CopyFrom(const EmptyTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.EmptyTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EmptyTableRequest::InternalSwap(EmptyTableRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmptyTableRequest, _impl_.size_)
      + sizeof(EmptyTableRequest::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(EmptyTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata EmptyTableRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TimeTableRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TimeTableRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TimeTableRequest, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::TimeTableRequest, _impl_._oneof_case_);
};

void TimeTableRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TimeTableRequest::TimeTableRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.TimeTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE TimeTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::TimeTableRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        start_time_{},
        period_{},
        _oneof_case_{from._oneof_case_[0], from._oneof_case_[1]} {}

TimeTableRequest::TimeTableRequest(
    ::google::protobuf::Arena* arena,
    const TimeTableRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TimeTableRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.blink_table_ = from._impl_.blink_table_;
  switch (start_time_case()) {
    case START_TIME_NOT_SET:
      break;
      case kStartTimeNanos:
        _impl_.start_time_.start_time_nanos_ = from._impl_.start_time_.start_time_nanos_;
        break;
      case kStartTimeString:
        new (&_impl_.start_time_.start_time_string_) decltype(_impl_.start_time_.start_time_string_){arena, from._impl_.start_time_.start_time_string_};
        break;
  }
  switch (period_case()) {
    case PERIOD_NOT_SET:
      break;
      case kPeriodNanos:
        _impl_.period_.period_nanos_ = from._impl_.period_.period_nanos_;
        break;
      case kPeriodString:
        new (&_impl_.period_.period_string_) decltype(_impl_.period_.period_string_){arena, from._impl_.period_.period_string_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.TimeTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE TimeTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        start_time_{},
        period_{},
        _oneof_case_{} {}

inline void TimeTableRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, blink_table_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::blink_table_));
}
TimeTableRequest::~TimeTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TimeTableRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  if (has_start_time()) {
    clear_start_time();
  }
  if (has_period()) {
    clear_period();
  }
  _impl_.~Impl_();
}

void TimeTableRequest::clear_start_time() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (start_time_case()) {
    case kStartTimeNanos: {
      // No need to clear
      break;
    }
    case kStartTimeString: {
      _impl_.start_time_.start_time_string_.Destroy();
      break;
    }
    case START_TIME_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = START_TIME_NOT_SET;
}

void TimeTableRequest::clear_period() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (period_case()) {
    case kPeriodNanos: {
      // No need to clear
      break;
    }
    case kPeriodString: {
      _impl_.period_.period_string_.Destroy();
      break;
    }
    case PERIOD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = PERIOD_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    TimeTableRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_TimeTableRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &TimeTableRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<TimeTableRequest>(),
            ::google::protobuf::Message::GetNewImpl<TimeTableRequest>(),
            ::google::protobuf::Message::GetClearImpl<TimeTableRequest>(), &TimeTableRequest::ByteSizeLong,
                &TimeTableRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(TimeTableRequest, _impl_._cached_size_),
            false,
        },
        &TimeTableRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* TimeTableRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 6, 1, 89, 2> TimeTableRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TimeTableRequest, _impl_._has_bits_),
    0, // no _extensions_
    6, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TimeTableRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool blink_table = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TimeTableRequest, _impl_.blink_table_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TimeTableRequest, _impl_.blink_table_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TimeTableRequest, _impl_.result_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(TimeTableRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // sint64 start_time_nanos = 2 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(TimeTableRequest, _impl_.start_time_.start_time_nanos_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kSInt64)},
    // sint64 period_nanos = 3 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(TimeTableRequest, _impl_.period_.period_nanos_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kSInt64)},
    // bool blink_table = 4;
    {PROTOBUF_FIELD_OFFSET(TimeTableRequest, _impl_.blink_table_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string start_time_string = 5;
    {PROTOBUF_FIELD_OFFSET(TimeTableRequest, _impl_.start_time_.start_time_string_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string period_string = 6;
    {PROTOBUF_FIELD_OFFSET(TimeTableRequest, _impl_.period_.period_string_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
    "\62\0\0\0\0\21\15\0"
    "io.deephaven.proto.backplane.grpc.TimeTableRequest"
    "start_time_string"
    "period_string"
  }},
};

PROTOBUF_NOINLINE void TimeTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_id_ != nullptr);
    _impl_.result_id_->Clear();
  }
  _impl_.blink_table_ = false;
  clear_start_time();
  clear_period();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TimeTableRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TimeTableRequest& this_ = static_cast<const TimeTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TimeTableRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TimeTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // sint64 start_time_nanos = 2 [jstype = JS_STRING];
          if (this_.start_time_case() == kStartTimeNanos) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
                2, this_._internal_start_time_nanos(), target);
          }

          // sint64 period_nanos = 3 [jstype = JS_STRING];
          if (this_.period_case() == kPeriodNanos) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
                3, this_._internal_period_nanos(), target);
          }

          // bool blink_table = 4;
          if (this_._internal_blink_table() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_blink_table(), target);
          }

          // string start_time_string = 5;
          if (this_.start_time_case() == kStartTimeString) {
            const std::string& _s = this_._internal_start_time_string();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.TimeTableRequest.start_time_string");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string period_string = 6;
          if (this_.period_case() == kPeriodString) {
            const std::string& _s = this_._internal_period_string();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.TimeTableRequest.period_string");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.TimeTableRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TimeTableRequest::ByteSizeLong(const MessageLite& base) {
          const TimeTableRequest& this_ = static_cast<const TimeTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TimeTableRequest::ByteSizeLong() const {
          const TimeTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
          }
           {
            // bool blink_table = 4;
            if (this_._internal_blink_table() != 0) {
              total_size += 2;
            }
          }
          switch (this_.start_time_case()) {
            // sint64 start_time_nanos = 2 [jstype = JS_STRING];
            case kStartTimeNanos: {
              total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
                  this_._internal_start_time_nanos());
              break;
            }
            // string start_time_string = 5;
            case kStartTimeString: {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_start_time_string());
              break;
            }
            case START_TIME_NOT_SET: {
              break;
            }
          }
          switch (this_.period_case()) {
            // sint64 period_nanos = 3 [jstype = JS_STRING];
            case kPeriodNanos: {
              total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
                  this_._internal_period_nanos());
              break;
            }
            // string period_string = 6;
            case kPeriodString: {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_period_string());
              break;
            }
            case PERIOD_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TimeTableRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TimeTableRequest*>(&to_msg);
  auto& from = static_cast<const TimeTableRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.result_id_ != nullptr);
    if (_this->_impl_.result_id_ == nullptr) {
      _this->_impl_.result_id_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
    } else {
      _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
    }
  }
  if (from._internal_blink_table() != 0) {
    _this->_impl_.blink_table_ = from._impl_.blink_table_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_start_time();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kStartTimeNanos: {
        _this->_impl_.start_time_.start_time_nanos_ = from._impl_.start_time_.start_time_nanos_;
        break;
      }
      case kStartTimeString: {
        if (oneof_needs_init) {
          _this->_impl_.start_time_.start_time_string_.InitDefault();
        }
        _this->_impl_.start_time_.start_time_string_.Set(from._internal_start_time_string(), arena);
        break;
      }
      case START_TIME_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[1]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[1];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_period();
      }
      _this->_impl_._oneof_case_[1] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kPeriodNanos: {
        _this->_impl_.period_.period_nanos_ = from._impl_.period_.period_nanos_;
        break;
      }
      case kPeriodString: {
        if (oneof_needs_init) {
          _this->_impl_.period_.period_string_.InitDefault();
        }
        _this->_impl_.period_.period_string_.Set(from._internal_period_string(), arena);
        break;
      }
      case PERIOD_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TimeTableRequest::CopyFrom(const TimeTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.TimeTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TimeTableRequest::InternalSwap(TimeTableRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeTableRequest, _impl_.blink_table_)
      + sizeof(TimeTableRequest::_impl_.blink_table_)
      - PROTOBUF_FIELD_OFFSET(TimeTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
  swap(_impl_.start_time_, other->_impl_.start_time_);
  swap(_impl_.period_, other->_impl_.period_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::google::protobuf::Metadata TimeTableRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SelectOrUpdateRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SelectOrUpdateRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SelectOrUpdateRequest, _impl_._has_bits_);
};

void SelectOrUpdateRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SelectOrUpdateRequest::SelectOrUpdateRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
}
inline PROTOBUF_NDEBUG_INLINE SelectOrUpdateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        column_specs_{visibility, arena, from.column_specs_} {}

SelectOrUpdateRequest::SelectOrUpdateRequest(
    ::google::protobuf::Arena* arena,
    const SelectOrUpdateRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SelectOrUpdateRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
}
inline PROTOBUF_NDEBUG_INLINE SelectOrUpdateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        column_specs_{visibility, arena} {}

inline void SelectOrUpdateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, source_id_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::source_id_));
}
SelectOrUpdateRequest::~SelectOrUpdateRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SelectOrUpdateRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SelectOrUpdateRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SelectOrUpdateRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &SelectOrUpdateRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SelectOrUpdateRequest>(),
            ::google::protobuf::Message::GetNewImpl<SelectOrUpdateRequest>(),
            ::google::protobuf::Message::GetClearImpl<SelectOrUpdateRequest>(), &SelectOrUpdateRequest::ByteSizeLong,
                &SelectOrUpdateRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SelectOrUpdateRequest, _impl_._cached_size_),
            false,
        },
        &SelectOrUpdateRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SelectOrUpdateRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 76, 2> SelectOrUpdateRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SelectOrUpdateRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SelectOrUpdateRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SelectOrUpdateRequest, _impl_.source_id_)}},
    // repeated string column_specs = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SelectOrUpdateRequest, _impl_.column_specs_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(SelectOrUpdateRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(SelectOrUpdateRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string column_specs = 3;
    {PROTOBUF_FIELD_OFFSET(SelectOrUpdateRequest, _impl_.column_specs_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\67\0\0\14\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest"
    "column_specs"
  }},
};

PROTOBUF_NOINLINE void SelectOrUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_specs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SelectOrUpdateRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SelectOrUpdateRequest& this_ = static_cast<const SelectOrUpdateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SelectOrUpdateRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SelectOrUpdateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // repeated string column_specs = 3;
          for (int i = 0, n = this_._internal_column_specs_size(); i < n; ++i) {
            const auto& s = this_._internal_column_specs().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest.column_specs");
            target = stream->WriteString(3, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SelectOrUpdateRequest::ByteSizeLong(const MessageLite& base) {
          const SelectOrUpdateRequest& this_ = static_cast<const SelectOrUpdateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SelectOrUpdateRequest::ByteSizeLong() const {
          const SelectOrUpdateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string column_specs = 3;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_column_specs().size());
              for (int i = 0, n = this_._internal_column_specs().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_column_specs().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SelectOrUpdateRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SelectOrUpdateRequest*>(&to_msg);
  auto& from = static_cast<const SelectOrUpdateRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_column_specs()->MergeFrom(from._internal_column_specs());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SelectOrUpdateRequest::CopyFrom(const SelectOrUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SelectOrUpdateRequest::InternalSwap(SelectOrUpdateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.column_specs_.InternalSwap(&other->_impl_.column_specs_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectOrUpdateRequest, _impl_.source_id_)
      + sizeof(SelectOrUpdateRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(SelectOrUpdateRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata SelectOrUpdateRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MathContext::_Internal {
 public:
};

MathContext::MathContext(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.MathContext)
}
MathContext::MathContext(
    ::google::protobuf::Arena* arena, const MathContext& from)
    : MathContext(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE MathContext::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MathContext::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, precision_),
           0,
           offsetof(Impl_, rounding_mode_) -
               offsetof(Impl_, precision_) +
               sizeof(Impl_::rounding_mode_));
}
MathContext::~MathContext() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.MathContext)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MathContext::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    MathContext::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_MathContext_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &MathContext::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<MathContext>(),
            ::google::protobuf::Message::GetNewImpl<MathContext>(),
            ::google::protobuf::Message::GetClearImpl<MathContext>(), &MathContext::ByteSizeLong,
                &MathContext::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(MathContext, _impl_._cached_size_),
            false,
        },
        &MathContext::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* MathContext::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> MathContext::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::MathContext>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.MathContext.RoundingMode rounding_mode = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MathContext, _impl_.rounding_mode_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MathContext, _impl_.rounding_mode_)}},
    // sint32 precision = 1;
    {::_pbi::TcParser::FastZ32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MathContext, _impl_.precision_)}},
  }}, {{
    65535, 65535
  }}, {{
    // sint32 precision = 1;
    {PROTOBUF_FIELD_OFFSET(MathContext, _impl_.precision_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // .io.deephaven.proto.backplane.grpc.MathContext.RoundingMode rounding_mode = 2;
    {PROTOBUF_FIELD_OFFSET(MathContext, _impl_.rounding_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void MathContext::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.MathContext)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.precision_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.rounding_mode_) -
      reinterpret_cast<char*>(&_impl_.precision_)) + sizeof(_impl_.rounding_mode_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MathContext::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MathContext& this_ = static_cast<const MathContext&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MathContext::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MathContext& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.MathContext)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // sint32 precision = 1;
          if (this_._internal_precision() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                1, this_._internal_precision(), target);
          }

          // .io.deephaven.proto.backplane.grpc.MathContext.RoundingMode rounding_mode = 2;
          if (this_._internal_rounding_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_rounding_mode(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.MathContext)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MathContext::ByteSizeLong(const MessageLite& base) {
          const MathContext& this_ = static_cast<const MathContext&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MathContext::ByteSizeLong() const {
          const MathContext& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.MathContext)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // sint32 precision = 1;
            if (this_._internal_precision() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_precision());
            }
            // .io.deephaven.proto.backplane.grpc.MathContext.RoundingMode rounding_mode = 2;
            if (this_._internal_rounding_mode() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_rounding_mode());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MathContext::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MathContext*>(&to_msg);
  auto& from = static_cast<const MathContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.MathContext)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_precision() != 0) {
    _this->_impl_.precision_ = from._impl_.precision_;
  }
  if (from._internal_rounding_mode() != 0) {
    _this->_impl_.rounding_mode_ = from._impl_.rounding_mode_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MathContext::CopyFrom(const MathContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.MathContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MathContext::InternalSwap(MathContext* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MathContext, _impl_.rounding_mode_)
      + sizeof(MathContext::_impl_.rounding_mode_)
      - PROTOBUF_FIELD_OFFSET(MathContext, _impl_.precision_)>(
          reinterpret_cast<char*>(&_impl_.precision_),
          reinterpret_cast<char*>(&other->_impl_.precision_));
}

::google::protobuf::Metadata MathContext::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByWindowScale_UpdateByWindowTicks::_Internal {
 public:
};

UpdateByWindowScale_UpdateByWindowTicks::UpdateByWindowScale_UpdateByWindowTicks(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks)
}
UpdateByWindowScale_UpdateByWindowTicks::UpdateByWindowScale_UpdateByWindowTicks(
    ::google::protobuf::Arena* arena, const UpdateByWindowScale_UpdateByWindowTicks& from)
    : UpdateByWindowScale_UpdateByWindowTicks(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE UpdateByWindowScale_UpdateByWindowTicks::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByWindowScale_UpdateByWindowTicks::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.ticks_ = {};
}
UpdateByWindowScale_UpdateByWindowTicks::~UpdateByWindowScale_UpdateByWindowTicks() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByWindowScale_UpdateByWindowTicks::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByWindowScale_UpdateByWindowTicks::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByWindowScale_UpdateByWindowTicks_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByWindowScale_UpdateByWindowTicks::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByWindowScale_UpdateByWindowTicks>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByWindowScale_UpdateByWindowTicks>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByWindowScale_UpdateByWindowTicks>(), &UpdateByWindowScale_UpdateByWindowTicks::ByteSizeLong,
                &UpdateByWindowScale_UpdateByWindowTicks::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByWindowScale_UpdateByWindowTicks, _impl_._cached_size_),
            false,
        },
        &UpdateByWindowScale_UpdateByWindowTicks::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByWindowScale_UpdateByWindowTicks::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> UpdateByWindowScale_UpdateByWindowTicks::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double ticks = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateByWindowScale_UpdateByWindowTicks, _impl_.ticks_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double ticks = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByWindowScale_UpdateByWindowTicks, _impl_.ticks_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void UpdateByWindowScale_UpdateByWindowTicks::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ticks_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByWindowScale_UpdateByWindowTicks::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByWindowScale_UpdateByWindowTicks& this_ = static_cast<const UpdateByWindowScale_UpdateByWindowTicks&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByWindowScale_UpdateByWindowTicks::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByWindowScale_UpdateByWindowTicks& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double ticks = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_ticks()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_ticks(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByWindowScale_UpdateByWindowTicks::ByteSizeLong(const MessageLite& base) {
          const UpdateByWindowScale_UpdateByWindowTicks& this_ = static_cast<const UpdateByWindowScale_UpdateByWindowTicks&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByWindowScale_UpdateByWindowTicks::ByteSizeLong() const {
          const UpdateByWindowScale_UpdateByWindowTicks& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // double ticks = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_ticks()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByWindowScale_UpdateByWindowTicks::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByWindowScale_UpdateByWindowTicks*>(&to_msg);
  auto& from = static_cast<const UpdateByWindowScale_UpdateByWindowTicks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint64_t>(from._internal_ticks()) != 0) {
    _this->_impl_.ticks_ = from._impl_.ticks_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByWindowScale_UpdateByWindowTicks::CopyFrom(const UpdateByWindowScale_UpdateByWindowTicks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByWindowScale_UpdateByWindowTicks::InternalSwap(UpdateByWindowScale_UpdateByWindowTicks* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.ticks_, other->_impl_.ticks_);
}

::google::protobuf::Metadata UpdateByWindowScale_UpdateByWindowTicks::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByWindowScale_UpdateByWindowTime::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime, _impl_._oneof_case_);
};

UpdateByWindowScale_UpdateByWindowTime::UpdateByWindowScale_UpdateByWindowTime(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByWindowScale_UpdateByWindowTime::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime& from_msg)
      : column_(arena, from.column_),
        window_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

UpdateByWindowScale_UpdateByWindowTime::UpdateByWindowScale_UpdateByWindowTime(
    ::google::protobuf::Arena* arena,
    const UpdateByWindowScale_UpdateByWindowTime& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByWindowScale_UpdateByWindowTime* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (window_case()) {
    case WINDOW_NOT_SET:
      break;
      case kNanos:
        _impl_.window_.nanos_ = from._impl_.window_.nanos_;
        break;
      case kDurationString:
        new (&_impl_.window_.duration_string_) decltype(_impl_.window_.duration_string_){arena, from._impl_.window_.duration_string_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByWindowScale_UpdateByWindowTime::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : column_(arena),
        window_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void UpdateByWindowScale_UpdateByWindowTime::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
UpdateByWindowScale_UpdateByWindowTime::~UpdateByWindowScale_UpdateByWindowTime() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByWindowScale_UpdateByWindowTime::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.column_.Destroy();
  if (has_window()) {
    clear_window();
  }
  _impl_.~Impl_();
}

void UpdateByWindowScale_UpdateByWindowTime::clear_window() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (window_case()) {
    case kNanos: {
      // No need to clear
      break;
    }
    case kDurationString: {
      _impl_.window_.duration_string_.Destroy();
      break;
    }
    case WINDOW_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = WINDOW_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByWindowScale_UpdateByWindowTime::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByWindowScale_UpdateByWindowTime_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByWindowScale_UpdateByWindowTime::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByWindowScale_UpdateByWindowTime>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByWindowScale_UpdateByWindowTime>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByWindowScale_UpdateByWindowTime>(), &UpdateByWindowScale_UpdateByWindowTime::ByteSizeLong,
                &UpdateByWindowScale_UpdateByWindowTime::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByWindowScale_UpdateByWindowTime, _impl_._cached_size_),
            false,
        },
        &UpdateByWindowScale_UpdateByWindowTime::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByWindowScale_UpdateByWindowTime::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 0, 102, 2> UpdateByWindowScale_UpdateByWindowTime::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string column = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateByWindowScale_UpdateByWindowTime, _impl_.column_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string column = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByWindowScale_UpdateByWindowTime, _impl_.column_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // sint64 nanos = 2 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(UpdateByWindowScale_UpdateByWindowTime, _impl_.window_.nanos_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kSInt64)},
    // string duration_string = 3;
    {PROTOBUF_FIELD_OFFSET(UpdateByWindowScale_UpdateByWindowTime, _impl_.window_.duration_string_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\110\6\0\17\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime"
    "column"
    "duration_string"
  }},
};

PROTOBUF_NOINLINE void UpdateByWindowScale_UpdateByWindowTime::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_.ClearToEmpty();
  clear_window();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByWindowScale_UpdateByWindowTime::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByWindowScale_UpdateByWindowTime& this_ = static_cast<const UpdateByWindowScale_UpdateByWindowTime&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByWindowScale_UpdateByWindowTime::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByWindowScale_UpdateByWindowTime& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string column = 1;
          if (!this_._internal_column().empty()) {
            const std::string& _s = this_._internal_column();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime.column");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          switch (this_.window_case()) {
            case kNanos: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
                  2, this_._internal_nanos(), target);
              break;
            }
            case kDurationString: {
              const std::string& _s = this_._internal_duration_string();
              ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                  _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime.duration_string");
              target = stream->WriteStringMaybeAliased(3, _s, target);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByWindowScale_UpdateByWindowTime::ByteSizeLong(const MessageLite& base) {
          const UpdateByWindowScale_UpdateByWindowTime& this_ = static_cast<const UpdateByWindowScale_UpdateByWindowTime&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByWindowScale_UpdateByWindowTime::ByteSizeLong() const {
          const UpdateByWindowScale_UpdateByWindowTime& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string column = 1;
            if (!this_._internal_column().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_column());
            }
          }
          switch (this_.window_case()) {
            // sint64 nanos = 2 [jstype = JS_STRING];
            case kNanos: {
              total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
                  this_._internal_nanos());
              break;
            }
            // string duration_string = 3;
            case kDurationString: {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_duration_string());
              break;
            }
            case WINDOW_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByWindowScale_UpdateByWindowTime::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByWindowScale_UpdateByWindowTime*>(&to_msg);
  auto& from = static_cast<const UpdateByWindowScale_UpdateByWindowTime&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column().empty()) {
    _this->_internal_set_column(from._internal_column());
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_window();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kNanos: {
        _this->_impl_.window_.nanos_ = from._impl_.window_.nanos_;
        break;
      }
      case kDurationString: {
        if (oneof_needs_init) {
          _this->_impl_.window_.duration_string_.InitDefault();
        }
        _this->_impl_.window_.duration_string_.Set(from._internal_duration_string(), arena);
        break;
      }
      case WINDOW_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByWindowScale_UpdateByWindowTime::CopyFrom(const UpdateByWindowScale_UpdateByWindowTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByWindowScale_UpdateByWindowTime::InternalSwap(UpdateByWindowScale_UpdateByWindowTime* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.column_, &other->_impl_.column_, arena);
  swap(_impl_.window_, other->_impl_.window_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata UpdateByWindowScale_UpdateByWindowTime::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByWindowScale::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale, _impl_._oneof_case_);
};

void UpdateByWindowScale::set_allocated_ticks(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks* ticks) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (ticks) {
    ::google::protobuf::Arena* submessage_arena = ticks->GetArena();
    if (message_arena != submessage_arena) {
      ticks = ::google::protobuf::internal::GetOwnedMessage(message_arena, ticks, submessage_arena);
    }
    set_has_ticks();
    _impl_.type_.ticks_ = ticks;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.ticks)
}
void UpdateByWindowScale::set_allocated_time(::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime* time) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (time) {
    ::google::protobuf::Arena* submessage_arena = time->GetArena();
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(message_arena, time, submessage_arena);
    }
    set_has_time();
    _impl_.type_.time_ = time;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByWindowScale.time)
}
UpdateByWindowScale::UpdateByWindowScale(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByWindowScale::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByWindowScale& from_msg)
      : type_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

UpdateByWindowScale::UpdateByWindowScale(
    ::google::protobuf::Arena* arena,
    const UpdateByWindowScale& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByWindowScale* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (type_case()) {
    case TYPE_NOT_SET:
      break;
      case kTicks:
        _impl_.type_.ticks_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks>(arena, *from._impl_.type_.ticks_);
        break;
      case kTime:
        _impl_.type_.time_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime>(arena, *from._impl_.type_.time_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByWindowScale::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : type_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void UpdateByWindowScale::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
UpdateByWindowScale::~UpdateByWindowScale() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByWindowScale::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
  _impl_.~Impl_();
}

void UpdateByWindowScale::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (type_case()) {
    case kTicks: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.ticks_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.ticks_);
      }
      break;
    }
    case kTime: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.time_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.time_);
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByWindowScale::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByWindowScale_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByWindowScale::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByWindowScale>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByWindowScale>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByWindowScale>(), &UpdateByWindowScale::ByteSizeLong,
                &UpdateByWindowScale::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByWindowScale, _impl_._cached_size_),
            false,
        },
        &UpdateByWindowScale::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByWindowScale::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2> UpdateByWindowScale::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks ticks = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByWindowScale, _impl_.type_.ticks_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime time = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByWindowScale, _impl_.type_.time_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByWindowScale::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByWindowScale::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByWindowScale& this_ = static_cast<const UpdateByWindowScale&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByWindowScale::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByWindowScale& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.type_case()) {
            case kTicks: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.type_.ticks_, this_._impl_.type_.ticks_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kTime: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.type_.time_, this_._impl_.type_.time_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByWindowScale::ByteSizeLong(const MessageLite& base) {
          const UpdateByWindowScale& this_ = static_cast<const UpdateByWindowScale&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByWindowScale::ByteSizeLong() const {
          const UpdateByWindowScale& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.type_case()) {
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks ticks = 1;
            case kTicks: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.ticks_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime time = 2;
            case kTime: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.time_);
              break;
            }
            case TYPE_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByWindowScale::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByWindowScale*>(&to_msg);
  auto& from = static_cast<const UpdateByWindowScale&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_type();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kTicks: {
        if (oneof_needs_init) {
          _this->_impl_.type_.ticks_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTicks>(arena, *from._impl_.type_.ticks_);
        } else {
          _this->_impl_.type_.ticks_->MergeFrom(from._internal_ticks());
        }
        break;
      }
      case kTime: {
        if (oneof_needs_init) {
          _this->_impl_.type_.time_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale_UpdateByWindowTime>(arena, *from._impl_.type_.time_);
        } else {
          _this->_impl_.type_.time_->MergeFrom(from._internal_time());
        }
        break;
      }
      case TYPE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByWindowScale::CopyFrom(const UpdateByWindowScale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByWindowScale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByWindowScale::InternalSwap(UpdateByWindowScale* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata UpdateByWindowScale::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByEmOptions::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByEmOptions>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_._has_bits_);
};

UpdateByEmOptions::UpdateByEmOptions(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByEmOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByEmOptions& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateByEmOptions::UpdateByEmOptions(
    ::google::protobuf::Arena* arena,
    const UpdateByEmOptions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByEmOptions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.big_value_context_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::MathContext>(
                              arena, *from._impl_.big_value_context_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, on_null_value_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, on_null_value_),
           offsetof(Impl_, on_zero_delta_time_) -
               offsetof(Impl_, on_null_value_) +
               sizeof(Impl_::on_zero_delta_time_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByEmOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByEmOptions::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, big_value_context_),
           0,
           offsetof(Impl_, on_zero_delta_time_) -
               offsetof(Impl_, big_value_context_) +
               sizeof(Impl_::on_zero_delta_time_));
}
UpdateByEmOptions::~UpdateByEmOptions() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByEmOptions::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.big_value_context_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByEmOptions::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByEmOptions_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByEmOptions::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByEmOptions>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByEmOptions>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByEmOptions>(), &UpdateByEmOptions::ByteSizeLong,
                &UpdateByEmOptions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_._cached_size_),
            false,
        },
        &UpdateByEmOptions::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByEmOptions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 2> UpdateByEmOptions::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByEmOptions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_null_value = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateByEmOptions, _impl_.on_null_value_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_.on_null_value_)}},
    // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_nan_value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateByEmOptions, _impl_.on_nan_value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_.on_nan_value_)}},
    // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_null_time = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateByEmOptions, _impl_.on_null_time_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_.on_null_time_)}},
    // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_negative_delta_time = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateByEmOptions, _impl_.on_negative_delta_time_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_.on_negative_delta_time_)}},
    // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_zero_delta_time = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateByEmOptions, _impl_.on_zero_delta_time_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_.on_zero_delta_time_)}},
    // .io.deephaven.proto.backplane.grpc.MathContext big_value_context = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_.big_value_context_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_null_value = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_.on_null_value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_nan_value = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_.on_nan_value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_null_time = 3;
    {PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_.on_null_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_negative_delta_time = 4;
    {PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_.on_negative_delta_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_zero_delta_time = 5;
    {PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_.on_zero_delta_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .io.deephaven.proto.backplane.grpc.MathContext big_value_context = 6;
    {PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_.big_value_context_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::MathContext>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByEmOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.big_value_context_ != nullptr);
    _impl_.big_value_context_->Clear();
  }
  ::memset(&_impl_.on_null_value_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.on_zero_delta_time_) -
      reinterpret_cast<char*>(&_impl_.on_null_value_)) + sizeof(_impl_.on_zero_delta_time_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByEmOptions::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByEmOptions& this_ = static_cast<const UpdateByEmOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByEmOptions::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByEmOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_null_value = 1;
          if (this_._internal_on_null_value() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_on_null_value(), target);
          }

          // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_nan_value = 2;
          if (this_._internal_on_nan_value() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_on_nan_value(), target);
          }

          // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_null_time = 3;
          if (this_._internal_on_null_time() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_on_null_time(), target);
          }

          // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_negative_delta_time = 4;
          if (this_._internal_on_negative_delta_time() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_on_negative_delta_time(), target);
          }

          // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_zero_delta_time = 5;
          if (this_._internal_on_zero_delta_time() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_on_zero_delta_time(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.MathContext big_value_context = 6;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.big_value_context_, this_._impl_.big_value_context_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByEmOptions::ByteSizeLong(const MessageLite& base) {
          const UpdateByEmOptions& this_ = static_cast<const UpdateByEmOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByEmOptions::ByteSizeLong() const {
          const UpdateByEmOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .io.deephaven.proto.backplane.grpc.MathContext big_value_context = 6;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.big_value_context_);
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_null_value = 1;
            if (this_._internal_on_null_value() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_on_null_value());
            }
            // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_nan_value = 2;
            if (this_._internal_on_nan_value() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_on_nan_value());
            }
            // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_null_time = 3;
            if (this_._internal_on_null_time() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_on_null_time());
            }
            // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_negative_delta_time = 4;
            if (this_._internal_on_negative_delta_time() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_on_negative_delta_time());
            }
            // .io.deephaven.proto.backplane.grpc.BadDataBehavior on_zero_delta_time = 5;
            if (this_._internal_on_zero_delta_time() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_on_zero_delta_time());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByEmOptions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByEmOptions*>(&to_msg);
  auto& from = static_cast<const UpdateByEmOptions&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.big_value_context_ != nullptr);
    if (_this->_impl_.big_value_context_ == nullptr) {
      _this->_impl_.big_value_context_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::MathContext>(arena, *from._impl_.big_value_context_);
    } else {
      _this->_impl_.big_value_context_->MergeFrom(*from._impl_.big_value_context_);
    }
  }
  if (from._internal_on_null_value() != 0) {
    _this->_impl_.on_null_value_ = from._impl_.on_null_value_;
  }
  if (from._internal_on_nan_value() != 0) {
    _this->_impl_.on_nan_value_ = from._impl_.on_nan_value_;
  }
  if (from._internal_on_null_time() != 0) {
    _this->_impl_.on_null_time_ = from._impl_.on_null_time_;
  }
  if (from._internal_on_negative_delta_time() != 0) {
    _this->_impl_.on_negative_delta_time_ = from._impl_.on_negative_delta_time_;
  }
  if (from._internal_on_zero_delta_time() != 0) {
    _this->_impl_.on_zero_delta_time_ = from._impl_.on_zero_delta_time_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByEmOptions::CopyFrom(const UpdateByEmOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByEmOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByEmOptions::InternalSwap(UpdateByEmOptions* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_.on_zero_delta_time_)
      + sizeof(UpdateByEmOptions::_impl_.on_zero_delta_time_)
      - PROTOBUF_FIELD_OFFSET(UpdateByEmOptions, _impl_.big_value_context_)>(
          reinterpret_cast<char*>(&_impl_.big_value_context_),
          reinterpret_cast<char*>(&other->_impl_.big_value_context_));
}

::google::protobuf::Metadata UpdateByEmOptions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByDeltaOptions::_Internal {
 public:
};

UpdateByDeltaOptions::UpdateByDeltaOptions(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions)
}
UpdateByDeltaOptions::UpdateByDeltaOptions(
    ::google::protobuf::Arena* arena, const UpdateByDeltaOptions& from)
    : UpdateByDeltaOptions(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE UpdateByDeltaOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByDeltaOptions::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.null_behavior_ = {};
}
UpdateByDeltaOptions::~UpdateByDeltaOptions() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByDeltaOptions::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByDeltaOptions::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByDeltaOptions_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByDeltaOptions::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByDeltaOptions>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByDeltaOptions>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByDeltaOptions>(), &UpdateByDeltaOptions::ByteSizeLong,
                &UpdateByDeltaOptions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByDeltaOptions, _impl_._cached_size_),
            false,
        },
        &UpdateByDeltaOptions::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByDeltaOptions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> UpdateByDeltaOptions::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByDeltaOptions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByNullBehavior null_behavior = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateByDeltaOptions, _impl_.null_behavior_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateByDeltaOptions, _impl_.null_behavior_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByNullBehavior null_behavior = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByDeltaOptions, _impl_.null_behavior_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void UpdateByDeltaOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.null_behavior_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByDeltaOptions::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByDeltaOptions& this_ = static_cast<const UpdateByDeltaOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByDeltaOptions::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByDeltaOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .io.deephaven.proto.backplane.grpc.UpdateByNullBehavior null_behavior = 1;
          if (this_._internal_null_behavior() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_null_behavior(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByDeltaOptions::ByteSizeLong(const MessageLite& base) {
          const UpdateByDeltaOptions& this_ = static_cast<const UpdateByDeltaOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByDeltaOptions::ByteSizeLong() const {
          const UpdateByDeltaOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .io.deephaven.proto.backplane.grpc.UpdateByNullBehavior null_behavior = 1;
            if (this_._internal_null_behavior() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_null_behavior());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByDeltaOptions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByDeltaOptions*>(&to_msg);
  auto& from = static_cast<const UpdateByDeltaOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_null_behavior() != 0) {
    _this->_impl_.null_behavior_ = from._impl_.null_behavior_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByDeltaOptions::CopyFrom(const UpdateByDeltaOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByDeltaOptions::InternalSwap(UpdateByDeltaOptions* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.null_behavior_, other->_impl_.null_behavior_);
}

::google::protobuf::Metadata UpdateByDeltaOptions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOptions::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOptions>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOptions::UpdateByRequest_UpdateByOptions(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateByRequest_UpdateByOptions::UpdateByRequest_UpdateByOptions(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOptions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOptions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.math_context_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::MathContext>(
                              arena, *from._impl_.math_context_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, use_redirection_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, use_redirection_),
           offsetof(Impl_, initial_hash_table_size_) -
               offsetof(Impl_, use_redirection_) +
               sizeof(Impl_::initial_hash_table_size_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByRequest_UpdateByOptions::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, math_context_),
           0,
           offsetof(Impl_, initial_hash_table_size_) -
               offsetof(Impl_, math_context_) +
               sizeof(Impl_::initial_hash_table_size_));
}
UpdateByRequest_UpdateByOptions::~UpdateByRequest_UpdateByOptions() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOptions::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.math_context_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOptions::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOptions_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOptions::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOptions>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOptions>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOptions>(), &UpdateByRequest_UpdateByOptions::ByteSizeLong,
                &UpdateByRequest_UpdateByOptions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOptions::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOptions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 0, 2> UpdateByRequest_UpdateByOptions::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool use_redirection = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(UpdateByRequest_UpdateByOptions, _impl_.use_redirection_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.use_redirection_)}},
    // optional int32 chunk_capacity = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateByRequest_UpdateByOptions, _impl_.chunk_capacity_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.chunk_capacity_)}},
    // optional double max_static_sparse_memory_overhead = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 3, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.max_static_sparse_memory_overhead_)}},
    // optional int32 initial_hash_table_size = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateByRequest_UpdateByOptions, _impl_.initial_hash_table_size_), 6>(),
     {32, 6, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.initial_hash_table_size_)}},
    // optional double maximum_load_factor = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 4, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.maximum_load_factor_)}},
    // optional double target_load_factor = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 5, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.target_load_factor_)}},
    // .io.deephaven.proto.backplane.grpc.MathContext math_context = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.math_context_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool use_redirection = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.use_redirection_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 chunk_capacity = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.chunk_capacity_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional double max_static_sparse_memory_overhead = 3;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.max_static_sparse_memory_overhead_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional int32 initial_hash_table_size = 4;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.initial_hash_table_size_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional double maximum_load_factor = 5;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.maximum_load_factor_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double target_load_factor = 6;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.target_load_factor_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // .io.deephaven.proto.backplane.grpc.MathContext math_context = 7;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.math_context_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::MathContext>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.math_context_ != nullptr);
    _impl_.math_context_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.use_redirection_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.initial_hash_table_size_) -
        reinterpret_cast<char*>(&_impl_.use_redirection_)) + sizeof(_impl_.initial_hash_table_size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOptions::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOptions& this_ = static_cast<const UpdateByRequest_UpdateByOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOptions::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional bool use_redirection = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_use_redirection(), target);
          }

          // optional int32 chunk_capacity = 2;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_chunk_capacity(), target);
          }

          // optional double max_static_sparse_memory_overhead = 3;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_max_static_sparse_memory_overhead(), target);
          }

          // optional int32 initial_hash_table_size = 4;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_initial_hash_table_size(), target);
          }

          // optional double maximum_load_factor = 5;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_maximum_load_factor(), target);
          }

          // optional double target_load_factor = 6;
          if (cached_has_bits & 0x00000020u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_target_load_factor(), target);
          }

          // .io.deephaven.proto.backplane.grpc.MathContext math_context = 7;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.math_context_, this_._impl_.math_context_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOptions::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOptions& this_ = static_cast<const UpdateByRequest_UpdateByOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOptions::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000007fu) {
            // .io.deephaven.proto.backplane.grpc.MathContext math_context = 7;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.math_context_);
            }
            // optional bool use_redirection = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 2;
            }
            // optional int32 chunk_capacity = 2;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_chunk_capacity());
            }
            // optional double max_static_sparse_memory_overhead = 3;
            if (cached_has_bits & 0x00000008u) {
              total_size += 9;
            }
            // optional double maximum_load_factor = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 9;
            }
            // optional double target_load_factor = 6;
            if (cached_has_bits & 0x00000020u) {
              total_size += 9;
            }
            // optional int32 initial_hash_table_size = 4;
            if (cached_has_bits & 0x00000040u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_initial_hash_table_size());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOptions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOptions*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOptions&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.math_context_ != nullptr);
      if (_this->_impl_.math_context_ == nullptr) {
        _this->_impl_.math_context_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::MathContext>(arena, *from._impl_.math_context_);
      } else {
        _this->_impl_.math_context_->MergeFrom(*from._impl_.math_context_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.use_redirection_ = from._impl_.use_redirection_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.chunk_capacity_ = from._impl_.chunk_capacity_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.max_static_sparse_memory_overhead_ = from._impl_.max_static_sparse_memory_overhead_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.maximum_load_factor_ = from._impl_.maximum_load_factor_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.target_load_factor_ = from._impl_.target_load_factor_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.initial_hash_table_size_ = from._impl_.initial_hash_table_size_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOptions::CopyFrom(const UpdateByRequest_UpdateByOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOptions::InternalSwap(UpdateByRequest_UpdateByOptions* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.initial_hash_table_size_)
      + sizeof(UpdateByRequest_UpdateByOptions::_impl_.initial_hash_table_size_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOptions, _impl_.math_context_)>(
          reinterpret_cast<char*>(&_impl_.math_context_),
          reinterpret_cast<char*>(&other->_impl_.math_context_));
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOptions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::_Internal {
 public:
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::_Internal {
 public:
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::_Internal {
 public:
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::_Internal {
 public:
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::_Internal {
 public:
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.options_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByEmOptions>(
                              arena, *from._impl_.options_)
                        : nullptr;
  _impl_.window_scale_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.window_scale_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, options_),
           0,
           offsetof(Impl_, window_scale_) -
               offsetof(Impl_, options_) +
               sizeof(Impl_::window_scale_));
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.options_;
  delete _impl_.window_scale_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _impl_.window_scale_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _impl_.options_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _impl_.options_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _impl_.window_scale_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByEmOptions>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.options_ != nullptr);
      _impl_.options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.window_scale_ != nullptr);
      _impl_.window_scale_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.options_, this_._impl_.options_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.window_scale_, this_._impl_.window_scale_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.options_);
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.window_scale_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.options_ != nullptr);
      if (_this->_impl_.options_ == nullptr) {
        _this->_impl_.options_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByEmOptions>(arena, *from._impl_.options_);
      } else {
        _this->_impl_.options_->MergeFrom(*from._impl_.options_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.window_scale_ != nullptr);
      if (_this->_impl_.window_scale_ == nullptr) {
        _this->_impl_.window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.window_scale_);
      } else {
        _this->_impl_.window_scale_->MergeFrom(*from._impl_.window_scale_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _impl_.window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::_impl_.window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.options_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByEmOptions>(
                              arena, *from._impl_.options_)
                        : nullptr;
  _impl_.window_scale_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.window_scale_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, options_),
           0,
           offsetof(Impl_, window_scale_) -
               offsetof(Impl_, options_) +
               sizeof(Impl_::window_scale_));
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.options_;
  delete _impl_.window_scale_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _impl_.window_scale_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _impl_.options_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _impl_.options_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _impl_.window_scale_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByEmOptions>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.options_ != nullptr);
      _impl_.options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.window_scale_ != nullptr);
      _impl_.window_scale_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.options_, this_._impl_.options_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.window_scale_, this_._impl_.window_scale_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.options_);
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.window_scale_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.options_ != nullptr);
      if (_this->_impl_.options_ == nullptr) {
        _this->_impl_.options_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByEmOptions>(arena, *from._impl_.options_);
      } else {
        _this->_impl_.options_->MergeFrom(*from._impl_.options_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.window_scale_ != nullptr);
      if (_this->_impl_.window_scale_ == nullptr) {
        _this->_impl_.window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.window_scale_);
      } else {
        _this->_impl_.window_scale_->MergeFrom(*from._impl_.window_scale_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _impl_.window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::_impl_.window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.options_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByEmOptions>(
                              arena, *from._impl_.options_)
                        : nullptr;
  _impl_.window_scale_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.window_scale_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, options_),
           0,
           offsetof(Impl_, window_scale_) -
               offsetof(Impl_, options_) +
               sizeof(Impl_::window_scale_));
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.options_;
  delete _impl_.window_scale_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _impl_.window_scale_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _impl_.options_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _impl_.options_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _impl_.window_scale_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByEmOptions>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.options_ != nullptr);
      _impl_.options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.window_scale_ != nullptr);
      _impl_.window_scale_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.options_, this_._impl_.options_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.window_scale_, this_._impl_.window_scale_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.options_);
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.window_scale_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.options_ != nullptr);
      if (_this->_impl_.options_ == nullptr) {
        _this->_impl_.options_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByEmOptions>(arena, *from._impl_.options_);
      } else {
        _this->_impl_.options_->MergeFrom(*from._impl_.options_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.window_scale_ != nullptr);
      if (_this->_impl_.window_scale_ == nullptr) {
        _this->_impl_.window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.window_scale_);
      } else {
        _this->_impl_.window_scale_->MergeFrom(*from._impl_.window_scale_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _impl_.window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::_impl_.window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.options_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByEmOptions>(
                              arena, *from._impl_.options_)
                        : nullptr;
  _impl_.window_scale_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.window_scale_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, options_),
           0,
           offsetof(Impl_, window_scale_) -
               offsetof(Impl_, options_) +
               sizeof(Impl_::window_scale_));
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.options_;
  delete _impl_.window_scale_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _impl_.window_scale_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _impl_.options_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _impl_.options_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _impl_.window_scale_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByEmOptions>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.options_ != nullptr);
      _impl_.options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.window_scale_ != nullptr);
      _impl_.window_scale_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.options_, this_._impl_.options_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.window_scale_, this_._impl_.window_scale_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.options_);
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.window_scale_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.options_ != nullptr);
      if (_this->_impl_.options_ == nullptr) {
        _this->_impl_.options_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByEmOptions>(arena, *from._impl_.options_);
      } else {
        _this->_impl_.options_->MergeFrom(*from._impl_.options_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.window_scale_ != nullptr);
      if (_this->_impl_.window_scale_ == nullptr) {
        _this->_impl_.window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.window_scale_);
      } else {
        _this->_impl_.window_scale_->MergeFrom(*from._impl_.window_scale_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _impl_.window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::_impl_.window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.options_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByEmOptions>(
                              arena, *from._impl_.options_)
                        : nullptr;
  _impl_.window_scale_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.window_scale_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, options_),
           0,
           offsetof(Impl_, window_scale_) -
               offsetof(Impl_, options_) +
               sizeof(Impl_::window_scale_));
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.options_;
  delete _impl_.window_scale_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _impl_.window_scale_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _impl_.options_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _impl_.options_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _impl_.window_scale_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByEmOptions>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.options_ != nullptr);
      _impl_.options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.window_scale_ != nullptr);
      _impl_.window_scale_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.options_, this_._impl_.options_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.window_scale_, this_._impl_.window_scale_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.UpdateByEmOptions options = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.options_);
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale window_scale = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.window_scale_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.options_ != nullptr);
      if (_this->_impl_.options_ == nullptr) {
        _this->_impl_.options_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByEmOptions>(arena, *from._impl_.options_);
      } else {
        _this->_impl_.options_->MergeFrom(*from._impl_.options_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.window_scale_ != nullptr);
      if (_this->_impl_.window_scale_ == nullptr) {
        _this->_impl_.window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.window_scale_);
      } else {
        _this->_impl_.window_scale_->MergeFrom(*from._impl_.window_scale_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _impl_.window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::_impl_.window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.options_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByDeltaOptions>(
                              arena, *from._impl_.options_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.options_ = {};
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.options_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions options = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta, _impl_.options_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions options = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta, _impl_.options_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByDeltaOptions>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.options_ != nullptr);
    _impl_.options_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions options = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.options_, this_._impl_.options_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .io.deephaven.proto.backplane.grpc.UpdateByDeltaOptions options = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.options_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.options_ != nullptr);
    if (_this->_impl_.options_ == nullptr) {
      _this->_impl_.options_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByDeltaOptions>(arena, *from._impl_.options_);
    } else {
      _this->_impl_.options_->MergeFrom(*from._impl_.options_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.options_, other->_impl_.options_);
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.reverse_window_scale_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.reverse_window_scale_)
                        : nullptr;
  _impl_.forward_window_scale_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.forward_window_scale_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reverse_window_scale_),
           0,
           offsetof(Impl_, forward_window_scale_) -
               offsetof(Impl_, reverse_window_scale_) +
               sizeof(Impl_::forward_window_scale_));
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.reverse_window_scale_;
  delete _impl_.forward_window_scale_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _impl_.forward_window_scale_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _impl_.reverse_window_scale_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _impl_.reverse_window_scale_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _impl_.forward_window_scale_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.reverse_window_scale_ != nullptr);
      _impl_.reverse_window_scale_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.forward_window_scale_ != nullptr);
      _impl_.forward_window_scale_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.reverse_window_scale_, this_._impl_.reverse_window_scale_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.forward_window_scale_, this_._impl_.forward_window_scale_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reverse_window_scale_);
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.forward_window_scale_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.reverse_window_scale_ != nullptr);
      if (_this->_impl_.reverse_window_scale_ == nullptr) {
        _this->_impl_.reverse_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.reverse_window_scale_);
      } else {
        _this->_impl_.reverse_window_scale_->MergeFrom(*from._impl_.reverse_window_scale_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.forward_window_scale_ != nullptr);
      if (_this->_impl_.forward_window_scale_ == nullptr) {
        _this->_impl_.forward_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.forward_window_scale_);
      } else {
        _this->_impl_.forward_window_scale_->MergeFrom(*from._impl_.forward_window_scale_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.reverse_window_scale_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.reverse_window_scale_)
                        : nullptr;
  _impl_.forward_window_scale_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.forward_window_scale_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reverse_window_scale_),
           0,
           offsetof(Impl_, forward_window_scale_) -
               offsetof(Impl_, reverse_window_scale_) +
               sizeof(Impl_::forward_window_scale_));
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.reverse_window_scale_;
  delete _impl_.forward_window_scale_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _impl_.forward_window_scale_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _impl_.reverse_window_scale_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _impl_.reverse_window_scale_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _impl_.forward_window_scale_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.reverse_window_scale_ != nullptr);
      _impl_.reverse_window_scale_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.forward_window_scale_ != nullptr);
      _impl_.forward_window_scale_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.reverse_window_scale_, this_._impl_.reverse_window_scale_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.forward_window_scale_, this_._impl_.forward_window_scale_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reverse_window_scale_);
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.forward_window_scale_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.reverse_window_scale_ != nullptr);
      if (_this->_impl_.reverse_window_scale_ == nullptr) {
        _this->_impl_.reverse_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.reverse_window_scale_);
      } else {
        _this->_impl_.reverse_window_scale_->MergeFrom(*from._impl_.reverse_window_scale_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.forward_window_scale_ != nullptr);
      if (_this->_impl_.forward_window_scale_ == nullptr) {
        _this->_impl_.forward_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.forward_window_scale_);
      } else {
        _this->_impl_.forward_window_scale_->MergeFrom(*from._impl_.forward_window_scale_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.reverse_window_scale_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.reverse_window_scale_)
                        : nullptr;
  _impl_.forward_window_scale_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.forward_window_scale_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reverse_window_scale_),
           0,
           offsetof(Impl_, forward_window_scale_) -
               offsetof(Impl_, reverse_window_scale_) +
               sizeof(Impl_::forward_window_scale_));
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.reverse_window_scale_;
  delete _impl_.forward_window_scale_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _impl_.forward_window_scale_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _impl_.reverse_window_scale_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _impl_.reverse_window_scale_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _impl_.forward_window_scale_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.reverse_window_scale_ != nullptr);
      _impl_.reverse_window_scale_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.forward_window_scale_ != nullptr);
      _impl_.forward_window_scale_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.reverse_window_scale_, this_._impl_.reverse_window_scale_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.forward_window_scale_, this_._impl_.forward_window_scale_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reverse_window_scale_);
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.forward_window_scale_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.reverse_window_scale_ != nullptr);
      if (_this->_impl_.reverse_window_scale_ == nullptr) {
        _this->_impl_.reverse_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.reverse_window_scale_);
      } else {
        _this->_impl_.reverse_window_scale_->MergeFrom(*from._impl_.reverse_window_scale_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.forward_window_scale_ != nullptr);
      if (_this->_impl_.forward_window_scale_ == nullptr) {
        _this->_impl_.forward_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.forward_window_scale_);
      } else {
        _this->_impl_.forward_window_scale_->MergeFrom(*from._impl_.forward_window_scale_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.reverse_window_scale_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.reverse_window_scale_)
                        : nullptr;
  _impl_.forward_window_scale_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.forward_window_scale_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reverse_window_scale_),
           0,
           offsetof(Impl_, forward_window_scale_) -
               offsetof(Impl_, reverse_window_scale_) +
               sizeof(Impl_::forward_window_scale_));
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.reverse_window_scale_;
  delete _impl_.forward_window_scale_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _impl_.forward_window_scale_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _impl_.reverse_window_scale_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _impl_.reverse_window_scale_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _impl_.forward_window_scale_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.reverse_window_scale_ != nullptr);
      _impl_.reverse_window_scale_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.forward_window_scale_ != nullptr);
      _impl_.forward_window_scale_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.reverse_window_scale_, this_._impl_.reverse_window_scale_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.forward_window_scale_, this_._impl_.forward_window_scale_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reverse_window_scale_);
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.forward_window_scale_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.reverse_window_scale_ != nullptr);
      if (_this->_impl_.reverse_window_scale_ == nullptr) {
        _this->_impl_.reverse_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.reverse_window_scale_);
      } else {
        _this->_impl_.reverse_window_scale_->MergeFrom(*from._impl_.reverse_window_scale_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.forward_window_scale_ != nullptr);
      if (_this->_impl_.forward_window_scale_ == nullptr) {
        _this->_impl_.forward_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.forward_window_scale_);
      } else {
        _this->_impl_.forward_window_scale_->MergeFrom(*from._impl_.forward_window_scale_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.reverse_window_scale_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.reverse_window_scale_)
                        : nullptr;
  _impl_.forward_window_scale_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.forward_window_scale_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reverse_window_scale_),
           0,
           offsetof(Impl_, forward_window_scale_) -
               offsetof(Impl_, reverse_window_scale_) +
               sizeof(Impl_::forward_window_scale_));
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.reverse_window_scale_;
  delete _impl_.forward_window_scale_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _impl_.forward_window_scale_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _impl_.reverse_window_scale_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _impl_.reverse_window_scale_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _impl_.forward_window_scale_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.reverse_window_scale_ != nullptr);
      _impl_.reverse_window_scale_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.forward_window_scale_ != nullptr);
      _impl_.forward_window_scale_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.reverse_window_scale_, this_._impl_.reverse_window_scale_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.forward_window_scale_, this_._impl_.forward_window_scale_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reverse_window_scale_);
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.forward_window_scale_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.reverse_window_scale_ != nullptr);
      if (_this->_impl_.reverse_window_scale_ == nullptr) {
        _this->_impl_.reverse_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.reverse_window_scale_);
      } else {
        _this->_impl_.reverse_window_scale_->MergeFrom(*from._impl_.reverse_window_scale_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.forward_window_scale_ != nullptr);
      if (_this->_impl_.forward_window_scale_ == nullptr) {
        _this->_impl_.forward_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.forward_window_scale_);
      } else {
        _this->_impl_.forward_window_scale_->MergeFrom(*from._impl_.forward_window_scale_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.reverse_window_scale_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.reverse_window_scale_)
                        : nullptr;
  _impl_.forward_window_scale_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.forward_window_scale_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reverse_window_scale_),
           0,
           offsetof(Impl_, forward_window_scale_) -
               offsetof(Impl_, reverse_window_scale_) +
               sizeof(Impl_::forward_window_scale_));
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.reverse_window_scale_;
  delete _impl_.forward_window_scale_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _impl_.forward_window_scale_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _impl_.reverse_window_scale_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _impl_.reverse_window_scale_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _impl_.forward_window_scale_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.reverse_window_scale_ != nullptr);
      _impl_.reverse_window_scale_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.forward_window_scale_ != nullptr);
      _impl_.forward_window_scale_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.reverse_window_scale_, this_._impl_.reverse_window_scale_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.forward_window_scale_, this_._impl_.forward_window_scale_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reverse_window_scale_);
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.forward_window_scale_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.reverse_window_scale_ != nullptr);
      if (_this->_impl_.reverse_window_scale_ == nullptr) {
        _this->_impl_.reverse_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.reverse_window_scale_);
      } else {
        _this->_impl_.reverse_window_scale_->MergeFrom(*from._impl_.reverse_window_scale_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.forward_window_scale_ != nullptr);
      if (_this->_impl_.forward_window_scale_ == nullptr) {
        _this->_impl_.forward_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.forward_window_scale_);
      } else {
        _this->_impl_.forward_window_scale_->MergeFrom(*from._impl_.forward_window_scale_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.reverse_window_scale_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.reverse_window_scale_)
                        : nullptr;
  _impl_.forward_window_scale_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.forward_window_scale_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reverse_window_scale_),
           0,
           offsetof(Impl_, forward_window_scale_) -
               offsetof(Impl_, reverse_window_scale_) +
               sizeof(Impl_::forward_window_scale_));
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.reverse_window_scale_;
  delete _impl_.forward_window_scale_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _impl_.forward_window_scale_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _impl_.reverse_window_scale_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _impl_.reverse_window_scale_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _impl_.forward_window_scale_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.reverse_window_scale_ != nullptr);
      _impl_.reverse_window_scale_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.forward_window_scale_ != nullptr);
      _impl_.forward_window_scale_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.reverse_window_scale_, this_._impl_.reverse_window_scale_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.forward_window_scale_, this_._impl_.forward_window_scale_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reverse_window_scale_);
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.forward_window_scale_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.reverse_window_scale_ != nullptr);
      if (_this->_impl_.reverse_window_scale_ == nullptr) {
        _this->_impl_.reverse_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.reverse_window_scale_);
      } else {
        _this->_impl_.reverse_window_scale_->MergeFrom(*from._impl_.reverse_window_scale_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.forward_window_scale_ != nullptr);
      if (_this->_impl_.forward_window_scale_ == nullptr) {
        _this->_impl_.forward_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.forward_window_scale_);
      } else {
        _this->_impl_.forward_window_scale_->MergeFrom(*from._impl_.forward_window_scale_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.reverse_window_scale_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.reverse_window_scale_)
                        : nullptr;
  _impl_.forward_window_scale_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.forward_window_scale_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reverse_window_scale_),
           0,
           offsetof(Impl_, forward_window_scale_) -
               offsetof(Impl_, reverse_window_scale_) +
               sizeof(Impl_::forward_window_scale_));
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.reverse_window_scale_;
  delete _impl_.forward_window_scale_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _impl_.forward_window_scale_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _impl_.reverse_window_scale_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _impl_.reverse_window_scale_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _impl_.forward_window_scale_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.reverse_window_scale_ != nullptr);
      _impl_.reverse_window_scale_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.forward_window_scale_ != nullptr);
      _impl_.forward_window_scale_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.reverse_window_scale_, this_._impl_.reverse_window_scale_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.forward_window_scale_, this_._impl_.forward_window_scale_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reverse_window_scale_);
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.forward_window_scale_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.reverse_window_scale_ != nullptr);
      if (_this->_impl_.reverse_window_scale_ == nullptr) {
        _this->_impl_.reverse_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.reverse_window_scale_);
      } else {
        _this->_impl_.reverse_window_scale_->MergeFrom(*from._impl_.reverse_window_scale_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.forward_window_scale_ != nullptr);
      if (_this->_impl_.forward_window_scale_ == nullptr) {
        _this->_impl_.forward_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.forward_window_scale_);
      } else {
        _this->_impl_.forward_window_scale_->MergeFrom(*from._impl_.forward_window_scale_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        weight_column_(arena, from.weight_column_) {}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.reverse_window_scale_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.reverse_window_scale_)
                        : nullptr;
  _impl_.forward_window_scale_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.forward_window_scale_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        weight_column_(arena) {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reverse_window_scale_),
           0,
           offsetof(Impl_, forward_window_scale_) -
               offsetof(Impl_, reverse_window_scale_) +
               sizeof(Impl_::forward_window_scale_));
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.weight_column_.Destroy();
  delete _impl_.reverse_window_scale_;
  delete _impl_.forward_window_scale_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 137, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_.reverse_window_scale_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_.forward_window_scale_)}},
    // string weight_column = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_.weight_column_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_.reverse_window_scale_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_.forward_window_scale_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string weight_column = 3;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_.weight_column_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
  }}, {{
    "\163\0\0\15\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg"
    "weight_column"
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.weight_column_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.reverse_window_scale_ != nullptr);
      _impl_.reverse_window_scale_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.forward_window_scale_ != nullptr);
      _impl_.forward_window_scale_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.reverse_window_scale_, this_._impl_.reverse_window_scale_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.forward_window_scale_, this_._impl_.forward_window_scale_->GetCachedSize(), target,
                stream);
          }

          // string weight_column = 3;
          if (!this_._internal_weight_column().empty()) {
            const std::string& _s = this_._internal_weight_column();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg.weight_column");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string weight_column = 3;
            if (!this_._internal_weight_column().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_weight_column());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reverse_window_scale_);
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.forward_window_scale_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_weight_column().empty()) {
    _this->_internal_set_weight_column(from._internal_weight_column());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.reverse_window_scale_ != nullptr);
      if (_this->_impl_.reverse_window_scale_ == nullptr) {
        _this->_impl_.reverse_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.reverse_window_scale_);
      } else {
        _this->_impl_.reverse_window_scale_->MergeFrom(*from._impl_.reverse_window_scale_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.forward_window_scale_ != nullptr);
      if (_this->_impl_.forward_window_scale_ == nullptr) {
        _this->_impl_.forward_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.forward_window_scale_);
      } else {
        _this->_impl_.forward_window_scale_->MergeFrom(*from._impl_.forward_window_scale_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.weight_column_, &other->_impl_.weight_column_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        formula_(arena, from.formula_),
        param_token_(arena, from.param_token_) {}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.reverse_window_scale_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.reverse_window_scale_)
                        : nullptr;
  _impl_.forward_window_scale_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(
                              arena, *from._impl_.forward_window_scale_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        formula_(arena),
        param_token_(arena) {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reverse_window_scale_),
           0,
           offsetof(Impl_, forward_window_scale_) -
               offsetof(Impl_, reverse_window_scale_) +
               sizeof(Impl_::forward_window_scale_));
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.formula_.Destroy();
  _impl_.param_token_.Destroy();
  delete _impl_.reverse_window_scale_;
  delete _impl_.forward_window_scale_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 145, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string param_token = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.param_token_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.reverse_window_scale_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.forward_window_scale_)}},
    // string formula = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.formula_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.reverse_window_scale_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.forward_window_scale_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string formula = 3;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.formula_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string param_token = 4;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.param_token_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>()},
  }}, {{
    "\166\0\0\7\13\0\0\0"
    "io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula"
    "formula"
    "param_token"
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.formula_.ClearToEmpty();
  _impl_.param_token_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.reverse_window_scale_ != nullptr);
      _impl_.reverse_window_scale_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.forward_window_scale_ != nullptr);
      _impl_.forward_window_scale_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.reverse_window_scale_, this_._impl_.reverse_window_scale_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.forward_window_scale_, this_._impl_.forward_window_scale_->GetCachedSize(), target,
                stream);
          }

          // string formula = 3;
          if (!this_._internal_formula().empty()) {
            const std::string& _s = this_._internal_formula();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula.formula");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string param_token = 4;
          if (!this_._internal_param_token().empty()) {
            const std::string& _s = this_._internal_param_token();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula.param_token");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string formula = 3;
            if (!this_._internal_formula().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_formula());
            }
            // string param_token = 4;
            if (!this_._internal_param_token().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_param_token());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale reverse_window_scale = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reverse_window_scale_);
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByWindowScale forward_window_scale = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.forward_window_scale_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_formula().empty()) {
    _this->_internal_set_formula(from._internal_formula());
  }
  if (!from._internal_param_token().empty()) {
    _this->_internal_set_param_token(from._internal_param_token());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.reverse_window_scale_ != nullptr);
      if (_this->_impl_.reverse_window_scale_ == nullptr) {
        _this->_impl_.reverse_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.reverse_window_scale_);
      } else {
        _this->_impl_.reverse_window_scale_->MergeFrom(*from._impl_.reverse_window_scale_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.forward_window_scale_ != nullptr);
      if (_this->_impl_.forward_window_scale_ == nullptr) {
        _this->_impl_.forward_window_scale_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByWindowScale>(arena, *from._impl_.forward_window_scale_);
      } else {
        _this->_impl_.forward_window_scale_->MergeFrom(*from._impl_.forward_window_scale_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.formula_, &other->_impl_.formula_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.param_token_, &other->_impl_.param_token_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.forward_window_scale_)
      + sizeof(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::_impl_.forward_window_scale_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula, _impl_.reverse_window_scale_)>(
          reinterpret_cast<char*>(&_impl_.reverse_window_scale_),
          reinterpret_cast<char*>(&other->_impl_.reverse_window_scale_));
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_._oneof_case_);
};

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_sum(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum* sum) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (sum) {
    ::google::protobuf::Arena* submessage_arena = sum->GetArena();
    if (message_arena != submessage_arena) {
      sum = ::google::protobuf::internal::GetOwnedMessage(message_arena, sum, submessage_arena);
    }
    set_has_sum();
    _impl_.type_.sum_ = sum;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.sum)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_min(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin* min) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (min) {
    ::google::protobuf::Arena* submessage_arena = min->GetArena();
    if (message_arena != submessage_arena) {
      min = ::google::protobuf::internal::GetOwnedMessage(message_arena, min, submessage_arena);
    }
    set_has_min();
    _impl_.type_.min_ = min;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.min)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_max(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax* max) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (max) {
    ::google::protobuf::Arena* submessage_arena = max->GetArena();
    if (message_arena != submessage_arena) {
      max = ::google::protobuf::internal::GetOwnedMessage(message_arena, max, submessage_arena);
    }
    set_has_max();
    _impl_.type_.max_ = max;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.max)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_product(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct* product) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (product) {
    ::google::protobuf::Arena* submessage_arena = product->GetArena();
    if (message_arena != submessage_arena) {
      product = ::google::protobuf::internal::GetOwnedMessage(message_arena, product, submessage_arena);
    }
    set_has_product();
    _impl_.type_.product_ = product;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.product)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_fill(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill* fill) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (fill) {
    ::google::protobuf::Arena* submessage_arena = fill->GetArena();
    if (message_arena != submessage_arena) {
      fill = ::google::protobuf::internal::GetOwnedMessage(message_arena, fill, submessage_arena);
    }
    set_has_fill();
    _impl_.type_.fill_ = fill;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.fill)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_ema(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma* ema) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (ema) {
    ::google::protobuf::Arena* submessage_arena = ema->GetArena();
    if (message_arena != submessage_arena) {
      ema = ::google::protobuf::internal::GetOwnedMessage(message_arena, ema, submessage_arena);
    }
    set_has_ema();
    _impl_.type_.ema_ = ema;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.ema)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_sum(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum* rolling_sum) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (rolling_sum) {
    ::google::protobuf::Arena* submessage_arena = rolling_sum->GetArena();
    if (message_arena != submessage_arena) {
      rolling_sum = ::google::protobuf::internal::GetOwnedMessage(message_arena, rolling_sum, submessage_arena);
    }
    set_has_rolling_sum();
    _impl_.type_.rolling_sum_ = rolling_sum;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_sum)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_group(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup* rolling_group) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (rolling_group) {
    ::google::protobuf::Arena* submessage_arena = rolling_group->GetArena();
    if (message_arena != submessage_arena) {
      rolling_group = ::google::protobuf::internal::GetOwnedMessage(message_arena, rolling_group, submessage_arena);
    }
    set_has_rolling_group();
    _impl_.type_.rolling_group_ = rolling_group;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_group)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_avg(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg* rolling_avg) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (rolling_avg) {
    ::google::protobuf::Arena* submessage_arena = rolling_avg->GetArena();
    if (message_arena != submessage_arena) {
      rolling_avg = ::google::protobuf::internal::GetOwnedMessage(message_arena, rolling_avg, submessage_arena);
    }
    set_has_rolling_avg();
    _impl_.type_.rolling_avg_ = rolling_avg;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_avg)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_min(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin* rolling_min) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (rolling_min) {
    ::google::protobuf::Arena* submessage_arena = rolling_min->GetArena();
    if (message_arena != submessage_arena) {
      rolling_min = ::google::protobuf::internal::GetOwnedMessage(message_arena, rolling_min, submessage_arena);
    }
    set_has_rolling_min();
    _impl_.type_.rolling_min_ = rolling_min;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_min)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_max(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax* rolling_max) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (rolling_max) {
    ::google::protobuf::Arena* submessage_arena = rolling_max->GetArena();
    if (message_arena != submessage_arena) {
      rolling_max = ::google::protobuf::internal::GetOwnedMessage(message_arena, rolling_max, submessage_arena);
    }
    set_has_rolling_max();
    _impl_.type_.rolling_max_ = rolling_max;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_max)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_product(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct* rolling_product) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (rolling_product) {
    ::google::protobuf::Arena* submessage_arena = rolling_product->GetArena();
    if (message_arena != submessage_arena) {
      rolling_product = ::google::protobuf::internal::GetOwnedMessage(message_arena, rolling_product, submessage_arena);
    }
    set_has_rolling_product();
    _impl_.type_.rolling_product_ = rolling_product;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_product)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_delta(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta* delta) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (delta) {
    ::google::protobuf::Arena* submessage_arena = delta->GetArena();
    if (message_arena != submessage_arena) {
      delta = ::google::protobuf::internal::GetOwnedMessage(message_arena, delta, submessage_arena);
    }
    set_has_delta();
    _impl_.type_.delta_ = delta;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.delta)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_ems(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms* ems) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (ems) {
    ::google::protobuf::Arena* submessage_arena = ems->GetArena();
    if (message_arena != submessage_arena) {
      ems = ::google::protobuf::internal::GetOwnedMessage(message_arena, ems, submessage_arena);
    }
    set_has_ems();
    _impl_.type_.ems_ = ems;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.ems)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_em_min(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin* em_min) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (em_min) {
    ::google::protobuf::Arena* submessage_arena = em_min->GetArena();
    if (message_arena != submessage_arena) {
      em_min = ::google::protobuf::internal::GetOwnedMessage(message_arena, em_min, submessage_arena);
    }
    set_has_em_min();
    _impl_.type_.em_min_ = em_min;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.em_min)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_em_max(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax* em_max) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (em_max) {
    ::google::protobuf::Arena* submessage_arena = em_max->GetArena();
    if (message_arena != submessage_arena) {
      em_max = ::google::protobuf::internal::GetOwnedMessage(message_arena, em_max, submessage_arena);
    }
    set_has_em_max();
    _impl_.type_.em_max_ = em_max;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.em_max)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_em_std(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd* em_std) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (em_std) {
    ::google::protobuf::Arena* submessage_arena = em_std->GetArena();
    if (message_arena != submessage_arena) {
      em_std = ::google::protobuf::internal::GetOwnedMessage(message_arena, em_std, submessage_arena);
    }
    set_has_em_std();
    _impl_.type_.em_std_ = em_std;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.em_std)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_count(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount* rolling_count) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (rolling_count) {
    ::google::protobuf::Arena* submessage_arena = rolling_count->GetArena();
    if (message_arena != submessage_arena) {
      rolling_count = ::google::protobuf::internal::GetOwnedMessage(message_arena, rolling_count, submessage_arena);
    }
    set_has_rolling_count();
    _impl_.type_.rolling_count_ = rolling_count;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_count)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_std(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd* rolling_std) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (rolling_std) {
    ::google::protobuf::Arena* submessage_arena = rolling_std->GetArena();
    if (message_arena != submessage_arena) {
      rolling_std = ::google::protobuf::internal::GetOwnedMessage(message_arena, rolling_std, submessage_arena);
    }
    set_has_rolling_std();
    _impl_.type_.rolling_std_ = rolling_std;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_std)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_wavg(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg* rolling_wavg) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (rolling_wavg) {
    ::google::protobuf::Arena* submessage_arena = rolling_wavg->GetArena();
    if (message_arena != submessage_arena) {
      rolling_wavg = ::google::protobuf::internal::GetOwnedMessage(message_arena, rolling_wavg, submessage_arena);
    }
    set_has_rolling_wavg();
    _impl_.type_.rolling_wavg_ = rolling_wavg;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_wavg)
}
void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::set_allocated_rolling_formula(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula* rolling_formula) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (rolling_formula) {
    ::google::protobuf::Arena* submessage_arena = rolling_formula->GetArena();
    if (message_arena != submessage_arena) {
      rolling_formula = ::google::protobuf::internal::GetOwnedMessage(message_arena, rolling_formula, submessage_arena);
    }
    set_has_rolling_formula();
    _impl_.type_.rolling_formula_ = rolling_formula;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.rolling_formula)
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec& from_msg)
      : type_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (type_case()) {
    case TYPE_NOT_SET:
      break;
      case kSum:
        _impl_.type_.sum_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum>(arena, *from._impl_.type_.sum_);
        break;
      case kMin:
        _impl_.type_.min_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin>(arena, *from._impl_.type_.min_);
        break;
      case kMax:
        _impl_.type_.max_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax>(arena, *from._impl_.type_.max_);
        break;
      case kProduct:
        _impl_.type_.product_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct>(arena, *from._impl_.type_.product_);
        break;
      case kFill:
        _impl_.type_.fill_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill>(arena, *from._impl_.type_.fill_);
        break;
      case kEma:
        _impl_.type_.ema_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma>(arena, *from._impl_.type_.ema_);
        break;
      case kRollingSum:
        _impl_.type_.rolling_sum_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum>(arena, *from._impl_.type_.rolling_sum_);
        break;
      case kRollingGroup:
        _impl_.type_.rolling_group_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup>(arena, *from._impl_.type_.rolling_group_);
        break;
      case kRollingAvg:
        _impl_.type_.rolling_avg_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg>(arena, *from._impl_.type_.rolling_avg_);
        break;
      case kRollingMin:
        _impl_.type_.rolling_min_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin>(arena, *from._impl_.type_.rolling_min_);
        break;
      case kRollingMax:
        _impl_.type_.rolling_max_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax>(arena, *from._impl_.type_.rolling_max_);
        break;
      case kRollingProduct:
        _impl_.type_.rolling_product_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct>(arena, *from._impl_.type_.rolling_product_);
        break;
      case kDelta:
        _impl_.type_.delta_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta>(arena, *from._impl_.type_.delta_);
        break;
      case kEms:
        _impl_.type_.ems_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms>(arena, *from._impl_.type_.ems_);
        break;
      case kEmMin:
        _impl_.type_.em_min_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin>(arena, *from._impl_.type_.em_min_);
        break;
      case kEmMax:
        _impl_.type_.em_max_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax>(arena, *from._impl_.type_.em_max_);
        break;
      case kEmStd:
        _impl_.type_.em_std_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd>(arena, *from._impl_.type_.em_std_);
        break;
      case kRollingCount:
        _impl_.type_.rolling_count_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount>(arena, *from._impl_.type_.rolling_count_);
        break;
      case kRollingStd:
        _impl_.type_.rolling_std_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd>(arena, *from._impl_.type_.rolling_std_);
        break;
      case kRollingWavg:
        _impl_.type_.rolling_wavg_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg>(arena, *from._impl_.type_.rolling_wavg_);
        break;
      case kRollingFormula:
        _impl_.type_.rolling_formula_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula>(arena, *from._impl_.type_.rolling_formula_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : type_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::~UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
  _impl_.~Impl_();
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (type_case()) {
    case kSum: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.sum_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.sum_);
      }
      break;
    }
    case kMin: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.min_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.min_);
      }
      break;
    }
    case kMax: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.max_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.max_);
      }
      break;
    }
    case kProduct: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.product_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.product_);
      }
      break;
    }
    case kFill: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.fill_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.fill_);
      }
      break;
    }
    case kEma: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.ema_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.ema_);
      }
      break;
    }
    case kRollingSum: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.rolling_sum_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.rolling_sum_);
      }
      break;
    }
    case kRollingGroup: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.rolling_group_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.rolling_group_);
      }
      break;
    }
    case kRollingAvg: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.rolling_avg_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.rolling_avg_);
      }
      break;
    }
    case kRollingMin: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.rolling_min_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.rolling_min_);
      }
      break;
    }
    case kRollingMax: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.rolling_max_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.rolling_max_);
      }
      break;
    }
    case kRollingProduct: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.rolling_product_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.rolling_product_);
      }
      break;
    }
    case kDelta: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.delta_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.delta_);
      }
      break;
    }
    case kEms: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.ems_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.ems_);
      }
      break;
    }
    case kEmMin: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.em_min_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.em_min_);
      }
      break;
    }
    case kEmMax: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.em_max_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.em_max_);
      }
      break;
    }
    case kEmStd: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.em_std_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.em_std_);
      }
      break;
    }
    case kRollingCount: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.rolling_count_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.rolling_count_);
      }
      break;
    }
    case kRollingStd: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.rolling_std_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.rolling_std_);
      }
      break;
    }
    case kRollingWavg: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.rolling_wavg_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.rolling_wavg_);
      }
      break;
    }
    case kRollingFormula: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.rolling_formula_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.rolling_formula_);
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 21, 21, 0, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    21, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4292870144,  // skipmap
    offsetof(decltype(_table_), field_entries),
    21,  // num_field_entries
    21,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum sum = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.sum_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin min = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.min_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax max = 3;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.max_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct product = 4;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.product_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill fill = 5;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.fill_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma ema = 6;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.ema_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum rolling_sum = 7;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.rolling_sum_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup rolling_group = 8;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.rolling_group_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg rolling_avg = 9;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.rolling_avg_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin rolling_min = 10;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.rolling_min_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax rolling_max = 11;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.rolling_max_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct rolling_product = 12;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.rolling_product_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta delta = 13;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.delta_), _Internal::kOneofCaseOffset + 0, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms ems = 14;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.ems_), _Internal::kOneofCaseOffset + 0, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin em_min = 15;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.em_min_), _Internal::kOneofCaseOffset + 0, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax em_max = 16;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.em_max_), _Internal::kOneofCaseOffset + 0, 15,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd em_std = 17;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.em_std_), _Internal::kOneofCaseOffset + 0, 16,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount rolling_count = 18;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.rolling_count_), _Internal::kOneofCaseOffset + 0, 17,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd rolling_std = 19;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.rolling_std_), _Internal::kOneofCaseOffset + 0, 18,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg rolling_wavg = 20;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.rolling_wavg_), _Internal::kOneofCaseOffset + 0, 19,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula rolling_formula = 21;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec, _impl_.type_.rolling_formula_), _Internal::kOneofCaseOffset + 0, 20,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.type_case()) {
            case kSum: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.type_.sum_, this_._impl_.type_.sum_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMin: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.type_.min_, this_._impl_.type_.min_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMax: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.type_.max_, this_._impl_.type_.max_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kProduct: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  4, *this_._impl_.type_.product_, this_._impl_.type_.product_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kFill: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.type_.fill_, this_._impl_.type_.fill_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kEma: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  6, *this_._impl_.type_.ema_, this_._impl_.type_.ema_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRollingSum: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  7, *this_._impl_.type_.rolling_sum_, this_._impl_.type_.rolling_sum_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRollingGroup: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  8, *this_._impl_.type_.rolling_group_, this_._impl_.type_.rolling_group_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRollingAvg: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  9, *this_._impl_.type_.rolling_avg_, this_._impl_.type_.rolling_avg_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRollingMin: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  10, *this_._impl_.type_.rolling_min_, this_._impl_.type_.rolling_min_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRollingMax: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  11, *this_._impl_.type_.rolling_max_, this_._impl_.type_.rolling_max_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRollingProduct: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  12, *this_._impl_.type_.rolling_product_, this_._impl_.type_.rolling_product_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDelta: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  13, *this_._impl_.type_.delta_, this_._impl_.type_.delta_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kEms: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  14, *this_._impl_.type_.ems_, this_._impl_.type_.ems_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kEmMin: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  15, *this_._impl_.type_.em_min_, this_._impl_.type_.em_min_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kEmMax: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  16, *this_._impl_.type_.em_max_, this_._impl_.type_.em_max_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kEmStd: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  17, *this_._impl_.type_.em_std_, this_._impl_.type_.em_std_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRollingCount: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  18, *this_._impl_.type_.rolling_count_, this_._impl_.type_.rolling_count_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRollingStd: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  19, *this_._impl_.type_.rolling_std_, this_._impl_.type_.rolling_std_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRollingWavg: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  20, *this_._impl_.type_.rolling_wavg_, this_._impl_.type_.rolling_wavg_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRollingFormula: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  21, *this_._impl_.type_.rolling_formula_, this_._impl_.type_.rolling_formula_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.type_case()) {
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum sum = 1;
            case kSum: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.sum_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin min = 2;
            case kMin: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.min_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax max = 3;
            case kMax: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.max_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct product = 4;
            case kProduct: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.product_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill fill = 5;
            case kFill: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.fill_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma ema = 6;
            case kEma: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.ema_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum rolling_sum = 7;
            case kRollingSum: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.rolling_sum_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup rolling_group = 8;
            case kRollingGroup: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.rolling_group_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg rolling_avg = 9;
            case kRollingAvg: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.rolling_avg_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin rolling_min = 10;
            case kRollingMin: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.rolling_min_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax rolling_max = 11;
            case kRollingMax: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.rolling_max_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct rolling_product = 12;
            case kRollingProduct: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.rolling_product_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta delta = 13;
            case kDelta: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.delta_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms ems = 14;
            case kEms: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.ems_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin em_min = 15;
            case kEmMin: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.em_min_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax em_max = 16;
            case kEmMax: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.em_max_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd em_std = 17;
            case kEmStd: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.em_std_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount rolling_count = 18;
            case kRollingCount: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.rolling_count_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd rolling_std = 19;
            case kRollingStd: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.rolling_std_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg rolling_wavg = 20;
            case kRollingWavg: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.rolling_wavg_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula rolling_formula = 21;
            case kRollingFormula: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.rolling_formula_);
              break;
            }
            case TYPE_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_type();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kSum: {
        if (oneof_needs_init) {
          _this->_impl_.type_.sum_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeSum>(arena, *from._impl_.type_.sum_);
        } else {
          _this->_impl_.type_.sum_->MergeFrom(from._internal_sum());
        }
        break;
      }
      case kMin: {
        if (oneof_needs_init) {
          _this->_impl_.type_.min_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMin>(arena, *from._impl_.type_.min_);
        } else {
          _this->_impl_.type_.min_->MergeFrom(from._internal_min());
        }
        break;
      }
      case kMax: {
        if (oneof_needs_init) {
          _this->_impl_.type_.max_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeMax>(arena, *from._impl_.type_.max_);
        } else {
          _this->_impl_.type_.max_->MergeFrom(from._internal_max());
        }
        break;
      }
      case kProduct: {
        if (oneof_needs_init) {
          _this->_impl_.type_.product_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByCumulativeProduct>(arena, *from._impl_.type_.product_);
        } else {
          _this->_impl_.type_.product_->MergeFrom(from._internal_product());
        }
        break;
      }
      case kFill: {
        if (oneof_needs_init) {
          _this->_impl_.type_.fill_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByFill>(arena, *from._impl_.type_.fill_);
        } else {
          _this->_impl_.type_.fill_->MergeFrom(from._internal_fill());
        }
        break;
      }
      case kEma: {
        if (oneof_needs_init) {
          _this->_impl_.type_.ema_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEma>(arena, *from._impl_.type_.ema_);
        } else {
          _this->_impl_.type_.ema_->MergeFrom(from._internal_ema());
        }
        break;
      }
      case kRollingSum: {
        if (oneof_needs_init) {
          _this->_impl_.type_.rolling_sum_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingSum>(arena, *from._impl_.type_.rolling_sum_);
        } else {
          _this->_impl_.type_.rolling_sum_->MergeFrom(from._internal_rolling_sum());
        }
        break;
      }
      case kRollingGroup: {
        if (oneof_needs_init) {
          _this->_impl_.type_.rolling_group_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingGroup>(arena, *from._impl_.type_.rolling_group_);
        } else {
          _this->_impl_.type_.rolling_group_->MergeFrom(from._internal_rolling_group());
        }
        break;
      }
      case kRollingAvg: {
        if (oneof_needs_init) {
          _this->_impl_.type_.rolling_avg_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingAvg>(arena, *from._impl_.type_.rolling_avg_);
        } else {
          _this->_impl_.type_.rolling_avg_->MergeFrom(from._internal_rolling_avg());
        }
        break;
      }
      case kRollingMin: {
        if (oneof_needs_init) {
          _this->_impl_.type_.rolling_min_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMin>(arena, *from._impl_.type_.rolling_min_);
        } else {
          _this->_impl_.type_.rolling_min_->MergeFrom(from._internal_rolling_min());
        }
        break;
      }
      case kRollingMax: {
        if (oneof_needs_init) {
          _this->_impl_.type_.rolling_max_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingMax>(arena, *from._impl_.type_.rolling_max_);
        } else {
          _this->_impl_.type_.rolling_max_->MergeFrom(from._internal_rolling_max());
        }
        break;
      }
      case kRollingProduct: {
        if (oneof_needs_init) {
          _this->_impl_.type_.rolling_product_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingProduct>(arena, *from._impl_.type_.rolling_product_);
        } else {
          _this->_impl_.type_.rolling_product_->MergeFrom(from._internal_rolling_product());
        }
        break;
      }
      case kDelta: {
        if (oneof_needs_init) {
          _this->_impl_.type_.delta_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByDelta>(arena, *from._impl_.type_.delta_);
        } else {
          _this->_impl_.type_.delta_->MergeFrom(from._internal_delta());
        }
        break;
      }
      case kEms: {
        if (oneof_needs_init) {
          _this->_impl_.type_.ems_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEms>(arena, *from._impl_.type_.ems_);
        } else {
          _this->_impl_.type_.ems_->MergeFrom(from._internal_ems());
        }
        break;
      }
      case kEmMin: {
        if (oneof_needs_init) {
          _this->_impl_.type_.em_min_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMin>(arena, *from._impl_.type_.em_min_);
        } else {
          _this->_impl_.type_.em_min_->MergeFrom(from._internal_em_min());
        }
        break;
      }
      case kEmMax: {
        if (oneof_needs_init) {
          _this->_impl_.type_.em_max_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmMax>(arena, *from._impl_.type_.em_max_);
        } else {
          _this->_impl_.type_.em_max_->MergeFrom(from._internal_em_max());
        }
        break;
      }
      case kEmStd: {
        if (oneof_needs_init) {
          _this->_impl_.type_.em_std_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByEmStd>(arena, *from._impl_.type_.em_std_);
        } else {
          _this->_impl_.type_.em_std_->MergeFrom(from._internal_em_std());
        }
        break;
      }
      case kRollingCount: {
        if (oneof_needs_init) {
          _this->_impl_.type_.rolling_count_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingCount>(arena, *from._impl_.type_.rolling_count_);
        } else {
          _this->_impl_.type_.rolling_count_->MergeFrom(from._internal_rolling_count());
        }
        break;
      }
      case kRollingStd: {
        if (oneof_needs_init) {
          _this->_impl_.type_.rolling_std_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingStd>(arena, *from._impl_.type_.rolling_std_);
        } else {
          _this->_impl_.type_.rolling_std_->MergeFrom(from._internal_rolling_std());
        }
        break;
      }
      case kRollingWavg: {
        if (oneof_needs_init) {
          _this->_impl_.type_.rolling_wavg_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingWAvg>(arena, *from._impl_.type_.rolling_wavg_);
        } else {
          _this->_impl_.type_.rolling_wavg_->MergeFrom(from._internal_rolling_wavg());
        }
        break;
      }
      case kRollingFormula: {
        if (oneof_needs_init) {
          _this->_impl_.type_.rolling_formula_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec_UpdateByRollingFormula>(arena, *from._impl_.type_.rolling_formula_);
        } else {
          _this->_impl_.type_.rolling_formula_->MergeFrom(from._internal_rolling_formula());
        }
        break;
      }
      case TYPE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation_UpdateByColumn::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest_UpdateByOperation_UpdateByColumn>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn, _impl_._has_bits_);
};

UpdateByRequest_UpdateByOperation_UpdateByColumn::UpdateByRequest_UpdateByOperation_UpdateByColumn(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        match_pairs_{visibility, arena, from.match_pairs_} {}

UpdateByRequest_UpdateByOperation_UpdateByColumn::UpdateByRequest_UpdateByOperation_UpdateByColumn(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation_UpdateByColumn& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation_UpdateByColumn* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.spec_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec>(
                              arena, *from._impl_.spec_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation_UpdateByColumn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        match_pairs_{visibility, arena} {}

inline void UpdateByRequest_UpdateByOperation_UpdateByColumn::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.spec_ = {};
}
UpdateByRequest_UpdateByOperation_UpdateByColumn::~UpdateByRequest_UpdateByOperation_UpdateByColumn() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation_UpdateByColumn::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.spec_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation_UpdateByColumn::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_UpdateByColumn_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation_UpdateByColumn::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation_UpdateByColumn>(), &UpdateByRequest_UpdateByOperation_UpdateByColumn::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation_UpdateByColumn::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation_UpdateByColumn::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation_UpdateByColumn::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 102, 2> UpdateByRequest_UpdateByOperation_UpdateByColumn::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string match_pairs = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn, _impl_.match_pairs_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec spec = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn, _impl_.spec_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec spec = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn, _impl_.spec_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string match_pairs = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation_UpdateByColumn, _impl_.match_pairs_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec>()},
  }}, {{
    "\122\0\13\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn"
    "match_pairs"
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation_UpdateByColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.match_pairs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.spec_ != nullptr);
    _impl_.spec_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation_UpdateByColumn::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec spec = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.spec_, this_._impl_.spec_->GetCachedSize(), target,
                stream);
          }

          // repeated string match_pairs = 2;
          for (int i = 0, n = this_._internal_match_pairs_size(); i < n; ++i) {
            const auto& s = this_._internal_match_pairs().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.match_pairs");
            target = stream->WriteString(2, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn& this_ = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation_UpdateByColumn::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation_UpdateByColumn& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string match_pairs = 2;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_match_pairs().size());
              for (int i = 0, n = this_._internal_match_pairs().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_match_pairs().Get(i));
              }
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec spec = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.spec_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation_UpdateByColumn::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation_UpdateByColumn*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation_UpdateByColumn&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_match_pairs()->MergeFrom(from._internal_match_pairs());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.spec_ != nullptr);
    if (_this->_impl_.spec_ == nullptr) {
      _this->_impl_.spec_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn_UpdateBySpec>(arena, *from._impl_.spec_);
    } else {
      _this->_impl_.spec_->MergeFrom(*from._impl_.spec_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation_UpdateByColumn::CopyFrom(const UpdateByRequest_UpdateByOperation_UpdateByColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation_UpdateByColumn::InternalSwap(UpdateByRequest_UpdateByOperation_UpdateByColumn* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.match_pairs_.InternalSwap(&other->_impl_.match_pairs_);
  swap(_impl_.spec_, other->_impl_.spec_);
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation_UpdateByColumn::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest_UpdateByOperation::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation, _impl_._oneof_case_);
};

void UpdateByRequest_UpdateByOperation::set_allocated_column(::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn* column) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (column) {
    ::google::protobuf::Arena* submessage_arena = column->GetArena();
    if (message_arena != submessage_arena) {
      column = ::google::protobuf::internal::GetOwnedMessage(message_arena, column, submessage_arena);
    }
    set_has_column();
    _impl_.type_.column_ = column;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.column)
}
UpdateByRequest_UpdateByOperation::UpdateByRequest_UpdateByOperation(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation& from_msg)
      : type_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

UpdateByRequest_UpdateByOperation::UpdateByRequest_UpdateByOperation(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest_UpdateByOperation& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest_UpdateByOperation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (type_case()) {
    case TYPE_NOT_SET:
      break;
      case kColumn:
        _impl_.type_.column_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn>(arena, *from._impl_.type_.column_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest_UpdateByOperation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : type_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void UpdateByRequest_UpdateByOperation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
UpdateByRequest_UpdateByOperation::~UpdateByRequest_UpdateByOperation() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest_UpdateByOperation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
  _impl_.~Impl_();
}

void UpdateByRequest_UpdateByOperation::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (type_case()) {
    case kColumn: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.column_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.column_);
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest_UpdateByOperation::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_UpdateByOperation_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest_UpdateByOperation::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest_UpdateByOperation>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest_UpdateByOperation>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest_UpdateByOperation>(), &UpdateByRequest_UpdateByOperation::ByteSizeLong,
                &UpdateByRequest_UpdateByOperation::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest_UpdateByOperation::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest_UpdateByOperation::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> UpdateByRequest_UpdateByOperation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn column = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest_UpdateByOperation, _impl_.type_.column_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest_UpdateByOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest_UpdateByOperation::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest_UpdateByOperation& this_ = static_cast<const UpdateByRequest_UpdateByOperation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest_UpdateByOperation::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest_UpdateByOperation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn column = 1;
          if (this_.type_case() == kColumn) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.type_.column_, this_._impl_.type_.column_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest_UpdateByOperation::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest_UpdateByOperation& this_ = static_cast<const UpdateByRequest_UpdateByOperation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest_UpdateByOperation::ByteSizeLong() const {
          const UpdateByRequest_UpdateByOperation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.type_case()) {
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn column = 1;
            case kColumn: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.column_);
              break;
            }
            case TYPE_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest_UpdateByOperation::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest_UpdateByOperation*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest_UpdateByOperation&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_type();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kColumn: {
        if (oneof_needs_init) {
          _this->_impl_.type_.column_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation_UpdateByColumn>(arena, *from._impl_.type_.column_);
        } else {
          _this->_impl_.type_.column_->MergeFrom(from._internal_column());
        }
        break;
      }
      case TYPE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest_UpdateByOperation::CopyFrom(const UpdateByRequest_UpdateByOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest_UpdateByOperation::InternalSwap(UpdateByRequest_UpdateByOperation* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata UpdateByRequest_UpdateByOperation::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateByRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateByRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateByRequest, _impl_._has_bits_);
};

void UpdateByRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UpdateByRequest::UpdateByRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UpdateByRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        operations_{visibility, arena, from.operations_},
        group_by_columns_{visibility, arena, from.group_by_columns_} {}

UpdateByRequest::UpdateByRequest(
    ::google::protobuf::Arena* arena,
    const UpdateByRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateByRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;
  _impl_.options_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions>(
                              arena, *from._impl_.options_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UpdateByRequest)
}
inline PROTOBUF_NDEBUG_INLINE UpdateByRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        operations_{visibility, arena},
        group_by_columns_{visibility, arena} {}

inline void UpdateByRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, options_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::options_));
}
UpdateByRequest::~UpdateByRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UpdateByRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UpdateByRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  delete _impl_.options_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UpdateByRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UpdateByRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UpdateByRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UpdateByRequest>(),
            ::google::protobuf::Message::GetNewImpl<UpdateByRequest>(),
            ::google::protobuf::Message::GetClearImpl<UpdateByRequest>(), &UpdateByRequest::ByteSizeLong,
                &UpdateByRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UpdateByRequest, _impl_._cached_size_),
            false,
        },
        &UpdateByRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UpdateByRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 4, 74, 2> UpdateByRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateByRequest, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UpdateByRequest, _impl_.source_id_)}},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions options = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(UpdateByRequest, _impl_.options_)}},
    // repeated .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation operations = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(UpdateByRequest, _impl_.operations_)}},
    // repeated string group_by_columns = 5;
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateByRequest, _impl_.group_by_columns_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions options = 3;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest, _impl_.options_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation operations = 4;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest, _impl_.operations_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string group_by_columns = 5;
    {PROTOBUF_FIELD_OFFSET(UpdateByRequest, _impl_.group_by_columns_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOperation>()},
  }}, {{
    "\61\0\0\0\0\20\0\0"
    "io.deephaven.proto.backplane.grpc.UpdateByRequest"
    "group_by_columns"
  }},
};

PROTOBUF_NOINLINE void UpdateByRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UpdateByRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operations_.Clear();
  _impl_.group_by_columns_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.options_ != nullptr);
      _impl_.options_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateByRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateByRequest& this_ = static_cast<const UpdateByRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateByRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateByRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UpdateByRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions options = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.options_, this_._impl_.options_->GetCachedSize(), target,
                stream);
          }

          // repeated .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation operations = 4;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_operations_size());
               i < n; i++) {
            const auto& repfield = this_._internal_operations().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated string group_by_columns = 5;
          for (int i = 0, n = this_._internal_group_by_columns_size(); i < n; ++i) {
            const auto& s = this_._internal_group_by_columns().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.UpdateByRequest.group_by_columns");
            target = stream->WriteString(5, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UpdateByRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateByRequest::ByteSizeLong(const MessageLite& base) {
          const UpdateByRequest& this_ = static_cast<const UpdateByRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateByRequest::ByteSizeLong() const {
          const UpdateByRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UpdateByRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation operations = 4;
             {
              total_size += 1UL * this_._internal_operations_size();
              for (const auto& msg : this_._internal_operations()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated string group_by_columns = 5;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_group_by_columns().size());
              for (int i = 0, n = this_._internal_group_by_columns().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_group_by_columns().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions options = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.options_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateByRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateByRequest*>(&to_msg);
  auto& from = static_cast<const UpdateByRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_operations()->MergeFrom(
      from._internal_operations());
  _this->_internal_mutable_group_by_columns()->MergeFrom(from._internal_group_by_columns());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.options_ != nullptr);
      if (_this->_impl_.options_ == nullptr) {
        _this->_impl_.options_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest_UpdateByOptions>(arena, *from._impl_.options_);
      } else {
        _this->_impl_.options_->MergeFrom(*from._impl_.options_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateByRequest::CopyFrom(const UpdateByRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UpdateByRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateByRequest::InternalSwap(UpdateByRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.operations_.InternalSwap(&other->_impl_.operations_);
  _impl_.group_by_columns_.InternalSwap(&other->_impl_.group_by_columns_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateByRequest, _impl_.options_)
      + sizeof(UpdateByRequest::_impl_.options_)
      - PROTOBUF_FIELD_OFFSET(UpdateByRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata UpdateByRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SelectDistinctRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SelectDistinctRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SelectDistinctRequest, _impl_._has_bits_);
};

void SelectDistinctRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SelectDistinctRequest::SelectDistinctRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
}
inline PROTOBUF_NDEBUG_INLINE SelectDistinctRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::SelectDistinctRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        column_names_{visibility, arena, from.column_names_} {}

SelectDistinctRequest::SelectDistinctRequest(
    ::google::protobuf::Arena* arena,
    const SelectDistinctRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SelectDistinctRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
}
inline PROTOBUF_NDEBUG_INLINE SelectDistinctRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        column_names_{visibility, arena} {}

inline void SelectDistinctRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, source_id_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::source_id_));
}
SelectDistinctRequest::~SelectDistinctRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SelectDistinctRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SelectDistinctRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SelectDistinctRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &SelectDistinctRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SelectDistinctRequest>(),
            ::google::protobuf::Message::GetNewImpl<SelectDistinctRequest>(),
            ::google::protobuf::Message::GetClearImpl<SelectDistinctRequest>(), &SelectDistinctRequest::ByteSizeLong,
                &SelectDistinctRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SelectDistinctRequest, _impl_._cached_size_),
            false,
        },
        &SelectDistinctRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SelectDistinctRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 76, 2> SelectDistinctRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SelectDistinctRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SelectDistinctRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SelectDistinctRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SelectDistinctRequest, _impl_.source_id_)}},
    // repeated string column_names = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SelectDistinctRequest, _impl_.column_names_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(SelectDistinctRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(SelectDistinctRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string column_names = 3;
    {PROTOBUF_FIELD_OFFSET(SelectDistinctRequest, _impl_.column_names_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\67\0\0\14\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.SelectDistinctRequest"
    "column_names"
  }},
};

PROTOBUF_NOINLINE void SelectDistinctRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_names_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SelectDistinctRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SelectDistinctRequest& this_ = static_cast<const SelectDistinctRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SelectDistinctRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SelectDistinctRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // repeated string column_names = 3;
          for (int i = 0, n = this_._internal_column_names_size(); i < n; ++i) {
            const auto& s = this_._internal_column_names().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.SelectDistinctRequest.column_names");
            target = stream->WriteString(3, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SelectDistinctRequest::ByteSizeLong(const MessageLite& base) {
          const SelectDistinctRequest& this_ = static_cast<const SelectDistinctRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SelectDistinctRequest::ByteSizeLong() const {
          const SelectDistinctRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string column_names = 3;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_column_names().size());
              for (int i = 0, n = this_._internal_column_names().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_column_names().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SelectDistinctRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SelectDistinctRequest*>(&to_msg);
  auto& from = static_cast<const SelectDistinctRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_column_names()->MergeFrom(from._internal_column_names());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SelectDistinctRequest::CopyFrom(const SelectDistinctRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SelectDistinctRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SelectDistinctRequest::InternalSwap(SelectDistinctRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.column_names_.InternalSwap(&other->_impl_.column_names_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectDistinctRequest, _impl_.source_id_)
      + sizeof(SelectDistinctRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(SelectDistinctRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata SelectDistinctRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DropColumnsRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DropColumnsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DropColumnsRequest, _impl_._has_bits_);
};

void DropColumnsRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DropColumnsRequest::DropColumnsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
}
inline PROTOBUF_NDEBUG_INLINE DropColumnsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::DropColumnsRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        column_names_{visibility, arena, from.column_names_} {}

DropColumnsRequest::DropColumnsRequest(
    ::google::protobuf::Arena* arena,
    const DropColumnsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DropColumnsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
}
inline PROTOBUF_NDEBUG_INLINE DropColumnsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        column_names_{visibility, arena} {}

inline void DropColumnsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, source_id_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::source_id_));
}
DropColumnsRequest::~DropColumnsRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DropColumnsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    DropColumnsRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_DropColumnsRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &DropColumnsRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<DropColumnsRequest>(),
            ::google::protobuf::Message::GetNewImpl<DropColumnsRequest>(),
            ::google::protobuf::Message::GetClearImpl<DropColumnsRequest>(), &DropColumnsRequest::ByteSizeLong,
                &DropColumnsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(DropColumnsRequest, _impl_._cached_size_),
            false,
        },
        &DropColumnsRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* DropColumnsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 73, 2> DropColumnsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DropColumnsRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::DropColumnsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DropColumnsRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(DropColumnsRequest, _impl_.source_id_)}},
    // repeated string column_names = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(DropColumnsRequest, _impl_.column_names_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(DropColumnsRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(DropColumnsRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string column_names = 3;
    {PROTOBUF_FIELD_OFFSET(DropColumnsRequest, _impl_.column_names_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\64\0\0\14\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.DropColumnsRequest"
    "column_names"
  }},
};

PROTOBUF_NOINLINE void DropColumnsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_names_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DropColumnsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DropColumnsRequest& this_ = static_cast<const DropColumnsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DropColumnsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DropColumnsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // repeated string column_names = 3;
          for (int i = 0, n = this_._internal_column_names_size(); i < n; ++i) {
            const auto& s = this_._internal_column_names().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.DropColumnsRequest.column_names");
            target = stream->WriteString(3, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DropColumnsRequest::ByteSizeLong(const MessageLite& base) {
          const DropColumnsRequest& this_ = static_cast<const DropColumnsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DropColumnsRequest::ByteSizeLong() const {
          const DropColumnsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string column_names = 3;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_column_names().size());
              for (int i = 0, n = this_._internal_column_names().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_column_names().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DropColumnsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DropColumnsRequest*>(&to_msg);
  auto& from = static_cast<const DropColumnsRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_column_names()->MergeFrom(from._internal_column_names());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DropColumnsRequest::CopyFrom(const DropColumnsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.DropColumnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DropColumnsRequest::InternalSwap(DropColumnsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.column_names_.InternalSwap(&other->_impl_.column_names_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DropColumnsRequest, _impl_.source_id_)
      + sizeof(DropColumnsRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(DropColumnsRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata DropColumnsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UnstructuredFilterTableRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UnstructuredFilterTableRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UnstructuredFilterTableRequest, _impl_._has_bits_);
};

void UnstructuredFilterTableRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UnstructuredFilterTableRequest::UnstructuredFilterTableRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE UnstructuredFilterTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        filters_{visibility, arena, from.filters_} {}

UnstructuredFilterTableRequest::UnstructuredFilterTableRequest(
    ::google::protobuf::Arena* arena,
    const UnstructuredFilterTableRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UnstructuredFilterTableRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE UnstructuredFilterTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        filters_{visibility, arena} {}

inline void UnstructuredFilterTableRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, source_id_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::source_id_));
}
UnstructuredFilterTableRequest::~UnstructuredFilterTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UnstructuredFilterTableRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UnstructuredFilterTableRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UnstructuredFilterTableRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UnstructuredFilterTableRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UnstructuredFilterTableRequest>(),
            ::google::protobuf::Message::GetNewImpl<UnstructuredFilterTableRequest>(),
            ::google::protobuf::Message::GetClearImpl<UnstructuredFilterTableRequest>(), &UnstructuredFilterTableRequest::ByteSizeLong,
                &UnstructuredFilterTableRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UnstructuredFilterTableRequest, _impl_._cached_size_),
            false,
        },
        &UnstructuredFilterTableRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UnstructuredFilterTableRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 80, 2> UnstructuredFilterTableRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UnstructuredFilterTableRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UnstructuredFilterTableRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UnstructuredFilterTableRequest, _impl_.source_id_)}},
    // repeated string filters = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(UnstructuredFilterTableRequest, _impl_.filters_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(UnstructuredFilterTableRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(UnstructuredFilterTableRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string filters = 3;
    {PROTOBUF_FIELD_OFFSET(UnstructuredFilterTableRequest, _impl_.filters_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\100\0\0\7\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest"
    "filters"
  }},
};

PROTOBUF_NOINLINE void UnstructuredFilterTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filters_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UnstructuredFilterTableRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UnstructuredFilterTableRequest& this_ = static_cast<const UnstructuredFilterTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UnstructuredFilterTableRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UnstructuredFilterTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // repeated string filters = 3;
          for (int i = 0, n = this_._internal_filters_size(); i < n; ++i) {
            const auto& s = this_._internal_filters().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest.filters");
            target = stream->WriteString(3, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UnstructuredFilterTableRequest::ByteSizeLong(const MessageLite& base) {
          const UnstructuredFilterTableRequest& this_ = static_cast<const UnstructuredFilterTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UnstructuredFilterTableRequest::ByteSizeLong() const {
          const UnstructuredFilterTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string filters = 3;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_filters().size());
              for (int i = 0, n = this_._internal_filters().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_filters().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UnstructuredFilterTableRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UnstructuredFilterTableRequest*>(&to_msg);
  auto& from = static_cast<const UnstructuredFilterTableRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_filters()->MergeFrom(from._internal_filters());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UnstructuredFilterTableRequest::CopyFrom(const UnstructuredFilterTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UnstructuredFilterTableRequest::InternalSwap(UnstructuredFilterTableRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.filters_.InternalSwap(&other->_impl_.filters_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnstructuredFilterTableRequest, _impl_.source_id_)
      + sizeof(UnstructuredFilterTableRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(UnstructuredFilterTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata UnstructuredFilterTableRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HeadOrTailRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<HeadOrTailRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(HeadOrTailRequest, _impl_._has_bits_);
};

void HeadOrTailRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
HeadOrTailRequest::HeadOrTailRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
}
inline PROTOBUF_NDEBUG_INLINE HeadOrTailRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::HeadOrTailRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

HeadOrTailRequest::HeadOrTailRequest(
    ::google::protobuf::Arena* arena,
    const HeadOrTailRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HeadOrTailRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;
  _impl_.num_rows_ = from._impl_.num_rows_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
}
inline PROTOBUF_NDEBUG_INLINE HeadOrTailRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void HeadOrTailRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, num_rows_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::num_rows_));
}
HeadOrTailRequest::~HeadOrTailRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HeadOrTailRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    HeadOrTailRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_HeadOrTailRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &HeadOrTailRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<HeadOrTailRequest>(),
            ::google::protobuf::Message::GetNewImpl<HeadOrTailRequest>(),
            ::google::protobuf::Message::GetClearImpl<HeadOrTailRequest>(), &HeadOrTailRequest::ByteSizeLong,
                &HeadOrTailRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(HeadOrTailRequest, _impl_._cached_size_),
            false,
        },
        &HeadOrTailRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* HeadOrTailRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> HeadOrTailRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HeadOrTailRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::HeadOrTailRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HeadOrTailRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(HeadOrTailRequest, _impl_.source_id_)}},
    // sint64 num_rows = 3 [jstype = JS_STRING];
    {::_pbi::TcParser::FastZ64S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(HeadOrTailRequest, _impl_.num_rows_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(HeadOrTailRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(HeadOrTailRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // sint64 num_rows = 3 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(HeadOrTailRequest, _impl_.num_rows_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void HeadOrTailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
  }
  _impl_.num_rows_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HeadOrTailRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HeadOrTailRequest& this_ = static_cast<const HeadOrTailRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HeadOrTailRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HeadOrTailRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // sint64 num_rows = 3 [jstype = JS_STRING];
          if (this_._internal_num_rows() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
                3, this_._internal_num_rows(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HeadOrTailRequest::ByteSizeLong(const MessageLite& base) {
          const HeadOrTailRequest& this_ = static_cast<const HeadOrTailRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HeadOrTailRequest::ByteSizeLong() const {
          const HeadOrTailRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
          }
           {
            // sint64 num_rows = 3 [jstype = JS_STRING];
            if (this_._internal_num_rows() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
                  this_._internal_num_rows());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HeadOrTailRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HeadOrTailRequest*>(&to_msg);
  auto& from = static_cast<const HeadOrTailRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
  }
  if (from._internal_num_rows() != 0) {
    _this->_impl_.num_rows_ = from._impl_.num_rows_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HeadOrTailRequest::CopyFrom(const HeadOrTailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HeadOrTailRequest::InternalSwap(HeadOrTailRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeadOrTailRequest, _impl_.num_rows_)
      + sizeof(HeadOrTailRequest::_impl_.num_rows_)
      - PROTOBUF_FIELD_OFFSET(HeadOrTailRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata HeadOrTailRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HeadOrTailByRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<HeadOrTailByRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, _impl_._has_bits_);
};

void HeadOrTailByRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
HeadOrTailByRequest::HeadOrTailByRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
}
inline PROTOBUF_NDEBUG_INLINE HeadOrTailByRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        group_by_column_specs_{visibility, arena, from.group_by_column_specs_} {}

HeadOrTailByRequest::HeadOrTailByRequest(
    ::google::protobuf::Arena* arena,
    const HeadOrTailByRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HeadOrTailByRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;
  _impl_.num_rows_ = from._impl_.num_rows_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
}
inline PROTOBUF_NDEBUG_INLINE HeadOrTailByRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        group_by_column_specs_{visibility, arena} {}

inline void HeadOrTailByRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, num_rows_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::num_rows_));
}
HeadOrTailByRequest::~HeadOrTailByRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HeadOrTailByRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    HeadOrTailByRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_HeadOrTailByRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &HeadOrTailByRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<HeadOrTailByRequest>(),
            ::google::protobuf::Message::GetNewImpl<HeadOrTailByRequest>(),
            ::google::protobuf::Message::GetClearImpl<HeadOrTailByRequest>(), &HeadOrTailByRequest::ByteSizeLong,
                &HeadOrTailByRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, _impl_._cached_size_),
            false,
        },
        &HeadOrTailByRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* HeadOrTailByRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 83, 2> HeadOrTailByRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string group_by_column_specs = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, _impl_.group_by_column_specs_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, _impl_.source_id_)}},
    // sint64 num_rows = 3 [jstype = JS_STRING];
    {::_pbi::TcParser::FastZ64S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, _impl_.num_rows_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // sint64 num_rows = 3 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, _impl_.num_rows_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt64)},
    // repeated string group_by_column_specs = 4;
    {PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, _impl_.group_by_column_specs_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\65\0\0\0\25\0\0\0"
    "io.deephaven.proto.backplane.grpc.HeadOrTailByRequest"
    "group_by_column_specs"
  }},
};

PROTOBUF_NOINLINE void HeadOrTailByRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_by_column_specs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
  }
  _impl_.num_rows_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HeadOrTailByRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HeadOrTailByRequest& this_ = static_cast<const HeadOrTailByRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HeadOrTailByRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HeadOrTailByRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // sint64 num_rows = 3 [jstype = JS_STRING];
          if (this_._internal_num_rows() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
                3, this_._internal_num_rows(), target);
          }

          // repeated string group_by_column_specs = 4;
          for (int i = 0, n = this_._internal_group_by_column_specs_size(); i < n; ++i) {
            const auto& s = this_._internal_group_by_column_specs().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.HeadOrTailByRequest.group_by_column_specs");
            target = stream->WriteString(4, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HeadOrTailByRequest::ByteSizeLong(const MessageLite& base) {
          const HeadOrTailByRequest& this_ = static_cast<const HeadOrTailByRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HeadOrTailByRequest::ByteSizeLong() const {
          const HeadOrTailByRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string group_by_column_specs = 4;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_group_by_column_specs().size());
              for (int i = 0, n = this_._internal_group_by_column_specs().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_group_by_column_specs().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
          }
           {
            // sint64 num_rows = 3 [jstype = JS_STRING];
            if (this_._internal_num_rows() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
                  this_._internal_num_rows());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HeadOrTailByRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HeadOrTailByRequest*>(&to_msg);
  auto& from = static_cast<const HeadOrTailByRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_group_by_column_specs()->MergeFrom(from._internal_group_by_column_specs());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
  }
  if (from._internal_num_rows() != 0) {
    _this->_impl_.num_rows_ = from._impl_.num_rows_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HeadOrTailByRequest::CopyFrom(const HeadOrTailByRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.HeadOrTailByRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HeadOrTailByRequest::InternalSwap(HeadOrTailByRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.group_by_column_specs_.InternalSwap(&other->_impl_.group_by_column_specs_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, _impl_.num_rows_)
      + sizeof(HeadOrTailByRequest::_impl_.num_rows_)
      - PROTOBUF_FIELD_OFFSET(HeadOrTailByRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata HeadOrTailByRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UngroupRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UngroupRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UngroupRequest, _impl_._has_bits_);
};

void UngroupRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UngroupRequest::UngroupRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.UngroupRequest)
}
inline PROTOBUF_NDEBUG_INLINE UngroupRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::UngroupRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        columns_to_ungroup_{visibility, arena, from.columns_to_ungroup_} {}

UngroupRequest::UngroupRequest(
    ::google::protobuf::Arena* arena,
    const UngroupRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UngroupRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;
  _impl_.null_fill_ = from._impl_.null_fill_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.UngroupRequest)
}
inline PROTOBUF_NDEBUG_INLINE UngroupRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        columns_to_ungroup_{visibility, arena} {}

inline void UngroupRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, null_fill_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::null_fill_));
}
UngroupRequest::~UngroupRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.UngroupRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UngroupRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    UngroupRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_UngroupRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &UngroupRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<UngroupRequest>(),
            ::google::protobuf::Message::GetNewImpl<UngroupRequest>(),
            ::google::protobuf::Message::GetClearImpl<UngroupRequest>(), &UngroupRequest::ByteSizeLong,
                &UngroupRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(UngroupRequest, _impl_._cached_size_),
            false,
        },
        &UngroupRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* UngroupRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 75, 2> UngroupRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UngroupRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UngroupRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string columns_to_ungroup = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(UngroupRequest, _impl_.columns_to_ungroup_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UngroupRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UngroupRequest, _impl_.source_id_)}},
    // bool null_fill = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(UngroupRequest, _impl_.null_fill_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(UngroupRequest, _impl_.null_fill_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(UngroupRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(UngroupRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool null_fill = 3;
    {PROTOBUF_FIELD_OFFSET(UngroupRequest, _impl_.null_fill_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string columns_to_ungroup = 4;
    {PROTOBUF_FIELD_OFFSET(UngroupRequest, _impl_.columns_to_ungroup_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\60\0\0\0\22\0\0\0"
    "io.deephaven.proto.backplane.grpc.UngroupRequest"
    "columns_to_ungroup"
  }},
};

PROTOBUF_NOINLINE void UngroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_to_ungroup_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
  }
  _impl_.null_fill_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UngroupRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UngroupRequest& this_ = static_cast<const UngroupRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UngroupRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UngroupRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // bool null_fill = 3;
          if (this_._internal_null_fill() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_null_fill(), target);
          }

          // repeated string columns_to_ungroup = 4;
          for (int i = 0, n = this_._internal_columns_to_ungroup_size(); i < n; ++i) {
            const auto& s = this_._internal_columns_to_ungroup().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.UngroupRequest.columns_to_ungroup");
            target = stream->WriteString(4, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.UngroupRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UngroupRequest::ByteSizeLong(const MessageLite& base) {
          const UngroupRequest& this_ = static_cast<const UngroupRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UngroupRequest::ByteSizeLong() const {
          const UngroupRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string columns_to_ungroup = 4;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_columns_to_ungroup().size());
              for (int i = 0, n = this_._internal_columns_to_ungroup().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_columns_to_ungroup().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
          }
           {
            // bool null_fill = 3;
            if (this_._internal_null_fill() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UngroupRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UngroupRequest*>(&to_msg);
  auto& from = static_cast<const UngroupRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_columns_to_ungroup()->MergeFrom(from._internal_columns_to_ungroup());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
  }
  if (from._internal_null_fill() != 0) {
    _this->_impl_.null_fill_ = from._impl_.null_fill_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UngroupRequest::CopyFrom(const UngroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.UngroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UngroupRequest::InternalSwap(UngroupRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.columns_to_ungroup_.InternalSwap(&other->_impl_.columns_to_ungroup_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UngroupRequest, _impl_.null_fill_)
      + sizeof(UngroupRequest::_impl_.null_fill_)
      - PROTOBUF_FIELD_OFFSET(UngroupRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata UngroupRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MergeTablesRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MergeTablesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MergeTablesRequest, _impl_._has_bits_);
};

void MergeTablesRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MergeTablesRequest::MergeTablesRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE MergeTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::MergeTablesRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        source_ids_{visibility, arena, from.source_ids_},
        key_column_(arena, from.key_column_) {}

MergeTablesRequest::MergeTablesRequest(
    ::google::protobuf::Arena* arena,
    const MergeTablesRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MergeTablesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE MergeTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        source_ids_{visibility, arena},
        key_column_(arena) {}

inline void MergeTablesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.result_id_ = {};
}
MergeTablesRequest::~MergeTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MergeTablesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.key_column_.Destroy();
  delete _impl_.result_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    MergeTablesRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_MergeTablesRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &MergeTablesRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<MergeTablesRequest>(),
            ::google::protobuf::Message::GetNewImpl<MergeTablesRequest>(),
            ::google::protobuf::Message::GetClearImpl<MergeTablesRequest>(), &MergeTablesRequest::ByteSizeLong,
                &MergeTablesRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(MergeTablesRequest, _impl_._cached_size_),
            false,
        },
        &MergeTablesRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* MergeTablesRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 71, 2> MergeTablesRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MergeTablesRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::MergeTablesRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MergeTablesRequest, _impl_.result_id_)}},
    // repeated .io.deephaven.proto.backplane.grpc.TableReference source_ids = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(MergeTablesRequest, _impl_.source_ids_)}},
    // string key_column = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(MergeTablesRequest, _impl_.key_column_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(MergeTablesRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.grpc.TableReference source_ids = 2;
    {PROTOBUF_FIELD_OFFSET(MergeTablesRequest, _impl_.source_ids_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string key_column = 3;
    {PROTOBUF_FIELD_OFFSET(MergeTablesRequest, _impl_.key_column_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\64\0\0\12\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.MergeTablesRequest"
    "key_column"
  }},
};

PROTOBUF_NOINLINE void MergeTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_ids_.Clear();
  _impl_.key_column_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_id_ != nullptr);
    _impl_.result_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MergeTablesRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MergeTablesRequest& this_ = static_cast<const MergeTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MergeTablesRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MergeTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // repeated .io.deephaven.proto.backplane.grpc.TableReference source_ids = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_source_ids_size());
               i < n; i++) {
            const auto& repfield = this_._internal_source_ids().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // string key_column = 3;
          if (!this_._internal_key_column().empty()) {
            const std::string& _s = this_._internal_key_column();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.MergeTablesRequest.key_column");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MergeTablesRequest::ByteSizeLong(const MessageLite& base) {
          const MergeTablesRequest& this_ = static_cast<const MergeTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MergeTablesRequest::ByteSizeLong() const {
          const MergeTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .io.deephaven.proto.backplane.grpc.TableReference source_ids = 2;
             {
              total_size += 1UL * this_._internal_source_ids_size();
              for (const auto& msg : this_._internal_source_ids()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string key_column = 3;
            if (!this_._internal_key_column().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_key_column());
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MergeTablesRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MergeTablesRequest*>(&to_msg);
  auto& from = static_cast<const MergeTablesRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_source_ids()->MergeFrom(
      from._internal_source_ids());
  if (!from._internal_key_column().empty()) {
    _this->_internal_set_key_column(from._internal_key_column());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.result_id_ != nullptr);
    if (_this->_impl_.result_id_ == nullptr) {
      _this->_impl_.result_id_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
    } else {
      _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MergeTablesRequest::CopyFrom(const MergeTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.MergeTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MergeTablesRequest::InternalSwap(MergeTablesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.source_ids_.InternalSwap(&other->_impl_.source_ids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_column_, &other->_impl_.key_column_, arena);
  swap(_impl_.result_id_, other->_impl_.result_id_);
}

::google::protobuf::Metadata MergeTablesRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SnapshotTableRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SnapshotTableRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SnapshotTableRequest, _impl_._has_bits_);
};

void SnapshotTableRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SnapshotTableRequest::SnapshotTableRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE SnapshotTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::SnapshotTableRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SnapshotTableRequest::SnapshotTableRequest(
    ::google::protobuf::Arena* arena,
    const SnapshotTableRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SnapshotTableRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE SnapshotTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SnapshotTableRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, source_id_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::source_id_));
}
SnapshotTableRequest::~SnapshotTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SnapshotTableRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SnapshotTableRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SnapshotTableRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &SnapshotTableRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SnapshotTableRequest>(),
            ::google::protobuf::Message::GetNewImpl<SnapshotTableRequest>(),
            ::google::protobuf::Message::GetClearImpl<SnapshotTableRequest>(), &SnapshotTableRequest::ByteSizeLong,
                &SnapshotTableRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SnapshotTableRequest, _impl_._cached_size_),
            false,
        },
        &SnapshotTableRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SnapshotTableRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> SnapshotTableRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SnapshotTableRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SnapshotTableRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SnapshotTableRequest, _impl_.source_id_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SnapshotTableRequest, _impl_.result_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(SnapshotTableRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(SnapshotTableRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SnapshotTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SnapshotTableRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SnapshotTableRequest& this_ = static_cast<const SnapshotTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SnapshotTableRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SnapshotTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SnapshotTableRequest::ByteSizeLong(const MessageLite& base) {
          const SnapshotTableRequest& this_ = static_cast<const SnapshotTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SnapshotTableRequest::ByteSizeLong() const {
          const SnapshotTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SnapshotTableRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SnapshotTableRequest*>(&to_msg);
  auto& from = static_cast<const SnapshotTableRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotTableRequest::CopyFrom(const SnapshotTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SnapshotTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SnapshotTableRequest::InternalSwap(SnapshotTableRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnapshotTableRequest, _impl_.source_id_)
      + sizeof(SnapshotTableRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(SnapshotTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata SnapshotTableRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SnapshotWhenTableRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SnapshotWhenTableRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_._has_bits_);
};

void SnapshotWhenTableRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SnapshotWhenTableRequest::SnapshotWhenTableRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE SnapshotWhenTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        stamp_columns_{visibility, arena, from.stamp_columns_} {}

SnapshotWhenTableRequest::SnapshotWhenTableRequest(
    ::google::protobuf::Arena* arena,
    const SnapshotWhenTableRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SnapshotWhenTableRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.base_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.base_id_)
                        : nullptr;
  _impl_.trigger_id_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.trigger_id_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, initial_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, initial_),
           offsetof(Impl_, history_) -
               offsetof(Impl_, initial_) +
               sizeof(Impl_::history_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE SnapshotWhenTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        stamp_columns_{visibility, arena} {}

inline void SnapshotWhenTableRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, history_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::history_));
}
SnapshotWhenTableRequest::~SnapshotWhenTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SnapshotWhenTableRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.base_id_;
  delete _impl_.trigger_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SnapshotWhenTableRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SnapshotWhenTableRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &SnapshotWhenTableRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SnapshotWhenTableRequest>(),
            ::google::protobuf::Message::GetNewImpl<SnapshotWhenTableRequest>(),
            ::google::protobuf::Message::GetClearImpl<SnapshotWhenTableRequest>(), &SnapshotWhenTableRequest::ByteSizeLong,
                &SnapshotWhenTableRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_._cached_size_),
            false,
        },
        &SnapshotWhenTableRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SnapshotWhenTableRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 3, 80, 2> SnapshotWhenTableRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference base_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.base_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference trigger_id = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.trigger_id_)}},
    // bool initial = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SnapshotWhenTableRequest, _impl_.initial_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.initial_)}},
    // bool incremental = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SnapshotWhenTableRequest, _impl_.incremental_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.incremental_)}},
    // bool history = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SnapshotWhenTableRequest, _impl_.history_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.history_)}},
    // repeated string stamp_columns = 7;
    {::_pbi::TcParser::FastUR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.stamp_columns_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference base_id = 2;
    {PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.base_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference trigger_id = 3;
    {PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.trigger_id_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool initial = 4;
    {PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.initial_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool incremental = 5;
    {PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.incremental_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool history = 6;
    {PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.history_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string stamp_columns = 7;
    {PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.stamp_columns_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\72\0\0\0\0\0\0\15"
    "io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest"
    "stamp_columns"
  }},
};

PROTOBUF_NOINLINE void SnapshotWhenTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stamp_columns_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.base_id_ != nullptr);
      _impl_.base_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.trigger_id_ != nullptr);
      _impl_.trigger_id_->Clear();
    }
  }
  ::memset(&_impl_.initial_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.history_) -
      reinterpret_cast<char*>(&_impl_.initial_)) + sizeof(_impl_.history_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SnapshotWhenTableRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SnapshotWhenTableRequest& this_ = static_cast<const SnapshotWhenTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SnapshotWhenTableRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SnapshotWhenTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference base_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.base_id_, this_._impl_.base_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference trigger_id = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.trigger_id_, this_._impl_.trigger_id_->GetCachedSize(), target,
                stream);
          }

          // bool initial = 4;
          if (this_._internal_initial() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_initial(), target);
          }

          // bool incremental = 5;
          if (this_._internal_incremental() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_incremental(), target);
          }

          // bool history = 6;
          if (this_._internal_history() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_history(), target);
          }

          // repeated string stamp_columns = 7;
          for (int i = 0, n = this_._internal_stamp_columns_size(); i < n; ++i) {
            const auto& s = this_._internal_stamp_columns().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest.stamp_columns");
            target = stream->WriteString(7, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SnapshotWhenTableRequest::ByteSizeLong(const MessageLite& base) {
          const SnapshotWhenTableRequest& this_ = static_cast<const SnapshotWhenTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SnapshotWhenTableRequest::ByteSizeLong() const {
          const SnapshotWhenTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string stamp_columns = 7;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_stamp_columns().size());
              for (int i = 0, n = this_._internal_stamp_columns().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_stamp_columns().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference base_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.base_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference trigger_id = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.trigger_id_);
            }
          }
           {
            // bool initial = 4;
            if (this_._internal_initial() != 0) {
              total_size += 2;
            }
            // bool incremental = 5;
            if (this_._internal_incremental() != 0) {
              total_size += 2;
            }
            // bool history = 6;
            if (this_._internal_history() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SnapshotWhenTableRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SnapshotWhenTableRequest*>(&to_msg);
  auto& from = static_cast<const SnapshotWhenTableRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_stamp_columns()->MergeFrom(from._internal_stamp_columns());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.base_id_ != nullptr);
      if (_this->_impl_.base_id_ == nullptr) {
        _this->_impl_.base_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.base_id_);
      } else {
        _this->_impl_.base_id_->MergeFrom(*from._impl_.base_id_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.trigger_id_ != nullptr);
      if (_this->_impl_.trigger_id_ == nullptr) {
        _this->_impl_.trigger_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.trigger_id_);
      } else {
        _this->_impl_.trigger_id_->MergeFrom(*from._impl_.trigger_id_);
      }
    }
  }
  if (from._internal_initial() != 0) {
    _this->_impl_.initial_ = from._impl_.initial_;
  }
  if (from._internal_incremental() != 0) {
    _this->_impl_.incremental_ = from._impl_.incremental_;
  }
  if (from._internal_history() != 0) {
    _this->_impl_.history_ = from._impl_.history_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotWhenTableRequest::CopyFrom(const SnapshotWhenTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SnapshotWhenTableRequest::InternalSwap(SnapshotWhenTableRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stamp_columns_.InternalSwap(&other->_impl_.stamp_columns_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.history_)
      + sizeof(SnapshotWhenTableRequest::_impl_.history_)
      - PROTOBUF_FIELD_OFFSET(SnapshotWhenTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata SnapshotWhenTableRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CrossJoinTablesRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CrossJoinTablesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_._has_bits_);
};

void CrossJoinTablesRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CrossJoinTablesRequest::CrossJoinTablesRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE CrossJoinTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        columns_to_match_{visibility, arena, from.columns_to_match_},
        columns_to_add_{visibility, arena, from.columns_to_add_} {}

CrossJoinTablesRequest::CrossJoinTablesRequest(
    ::google::protobuf::Arena* arena,
    const CrossJoinTablesRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CrossJoinTablesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.left_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.left_id_)
                        : nullptr;
  _impl_.right_id_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.right_id_)
                        : nullptr;
  _impl_.reserve_bits_ = from._impl_.reserve_bits_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE CrossJoinTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        columns_to_match_{visibility, arena},
        columns_to_add_{visibility, arena} {}

inline void CrossJoinTablesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, reserve_bits_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::reserve_bits_));
}
CrossJoinTablesRequest::~CrossJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CrossJoinTablesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.left_id_;
  delete _impl_.right_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    CrossJoinTablesRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_CrossJoinTablesRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &CrossJoinTablesRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<CrossJoinTablesRequest>(),
            ::google::protobuf::Message::GetNewImpl<CrossJoinTablesRequest>(),
            ::google::protobuf::Message::GetClearImpl<CrossJoinTablesRequest>(), &CrossJoinTablesRequest::ByteSizeLong,
                &CrossJoinTablesRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_._cached_size_),
            false,
        },
        &CrossJoinTablesRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* CrossJoinTablesRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 3, 95, 2> CrossJoinTablesRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_.left_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_.right_id_)}},
    // repeated string columns_to_match = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_.columns_to_match_)}},
    // repeated string columns_to_add = 5;
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_.columns_to_add_)}},
    // int32 reserve_bits = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CrossJoinTablesRequest, _impl_.reserve_bits_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_.reserve_bits_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
    {PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_.left_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
    {PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_.right_id_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string columns_to_match = 4;
    {PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_.columns_to_match_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string columns_to_add = 5;
    {PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_.columns_to_add_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // int32 reserve_bits = 6;
    {PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_.reserve_bits_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\70\0\0\0\20\16\0\0"
    "io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest"
    "columns_to_match"
    "columns_to_add"
  }},
};

PROTOBUF_NOINLINE void CrossJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_to_match_.Clear();
  _impl_.columns_to_add_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.left_id_ != nullptr);
      _impl_.left_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.right_id_ != nullptr);
      _impl_.right_id_->Clear();
    }
  }
  _impl_.reserve_bits_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CrossJoinTablesRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CrossJoinTablesRequest& this_ = static_cast<const CrossJoinTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CrossJoinTablesRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CrossJoinTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.left_id_, this_._impl_.left_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.right_id_, this_._impl_.right_id_->GetCachedSize(), target,
                stream);
          }

          // repeated string columns_to_match = 4;
          for (int i = 0, n = this_._internal_columns_to_match_size(); i < n; ++i) {
            const auto& s = this_._internal_columns_to_match().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest.columns_to_match");
            target = stream->WriteString(4, s, target);
          }

          // repeated string columns_to_add = 5;
          for (int i = 0, n = this_._internal_columns_to_add_size(); i < n; ++i) {
            const auto& s = this_._internal_columns_to_add().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest.columns_to_add");
            target = stream->WriteString(5, s, target);
          }

          // int32 reserve_bits = 6;
          if (this_._internal_reserve_bits() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_reserve_bits(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CrossJoinTablesRequest::ByteSizeLong(const MessageLite& base) {
          const CrossJoinTablesRequest& this_ = static_cast<const CrossJoinTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CrossJoinTablesRequest::ByteSizeLong() const {
          const CrossJoinTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string columns_to_match = 4;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_columns_to_match().size());
              for (int i = 0, n = this_._internal_columns_to_match().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_columns_to_match().Get(i));
              }
            }
            // repeated string columns_to_add = 5;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_columns_to_add().size());
              for (int i = 0, n = this_._internal_columns_to_add().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_columns_to_add().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.left_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.right_id_);
            }
          }
           {
            // int32 reserve_bits = 6;
            if (this_._internal_reserve_bits() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_reserve_bits());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CrossJoinTablesRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CrossJoinTablesRequest*>(&to_msg);
  auto& from = static_cast<const CrossJoinTablesRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_columns_to_match()->MergeFrom(from._internal_columns_to_match());
  _this->_internal_mutable_columns_to_add()->MergeFrom(from._internal_columns_to_add());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.left_id_ != nullptr);
      if (_this->_impl_.left_id_ == nullptr) {
        _this->_impl_.left_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.left_id_);
      } else {
        _this->_impl_.left_id_->MergeFrom(*from._impl_.left_id_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.right_id_ != nullptr);
      if (_this->_impl_.right_id_ == nullptr) {
        _this->_impl_.right_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.right_id_);
      } else {
        _this->_impl_.right_id_->MergeFrom(*from._impl_.right_id_);
      }
    }
  }
  if (from._internal_reserve_bits() != 0) {
    _this->_impl_.reserve_bits_ = from._impl_.reserve_bits_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CrossJoinTablesRequest::CopyFrom(const CrossJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CrossJoinTablesRequest::InternalSwap(CrossJoinTablesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.columns_to_match_.InternalSwap(&other->_impl_.columns_to_match_);
  _impl_.columns_to_add_.InternalSwap(&other->_impl_.columns_to_add_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_.reserve_bits_)
      + sizeof(CrossJoinTablesRequest::_impl_.reserve_bits_)
      - PROTOBUF_FIELD_OFFSET(CrossJoinTablesRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata CrossJoinTablesRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NaturalJoinTablesRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<NaturalJoinTablesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, _impl_._has_bits_);
};

void NaturalJoinTablesRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
NaturalJoinTablesRequest::NaturalJoinTablesRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE NaturalJoinTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        columns_to_match_{visibility, arena, from.columns_to_match_},
        columns_to_add_{visibility, arena, from.columns_to_add_} {}

NaturalJoinTablesRequest::NaturalJoinTablesRequest(
    ::google::protobuf::Arena* arena,
    const NaturalJoinTablesRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  NaturalJoinTablesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.left_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.left_id_)
                        : nullptr;
  _impl_.right_id_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.right_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE NaturalJoinTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        columns_to_match_{visibility, arena},
        columns_to_add_{visibility, arena} {}

inline void NaturalJoinTablesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, right_id_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::right_id_));
}
NaturalJoinTablesRequest::~NaturalJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NaturalJoinTablesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.left_id_;
  delete _impl_.right_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    NaturalJoinTablesRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_NaturalJoinTablesRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &NaturalJoinTablesRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<NaturalJoinTablesRequest>(),
            ::google::protobuf::Message::GetNewImpl<NaturalJoinTablesRequest>(),
            ::google::protobuf::Message::GetClearImpl<NaturalJoinTablesRequest>(), &NaturalJoinTablesRequest::ByteSizeLong,
                &NaturalJoinTablesRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, _impl_._cached_size_),
            false,
        },
        &NaturalJoinTablesRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* NaturalJoinTablesRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 97, 2> NaturalJoinTablesRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, _impl_.left_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, _impl_.right_id_)}},
    // repeated string columns_to_match = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, _impl_.columns_to_match_)}},
    // repeated string columns_to_add = 5;
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, _impl_.columns_to_add_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
    {PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, _impl_.left_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
    {PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, _impl_.right_id_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string columns_to_match = 4;
    {PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, _impl_.columns_to_match_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string columns_to_add = 5;
    {PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, _impl_.columns_to_add_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\72\0\0\0\20\16\0\0"
    "io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest"
    "columns_to_match"
    "columns_to_add"
  }},
};

PROTOBUF_NOINLINE void NaturalJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_to_match_.Clear();
  _impl_.columns_to_add_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.left_id_ != nullptr);
      _impl_.left_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.right_id_ != nullptr);
      _impl_.right_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* NaturalJoinTablesRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const NaturalJoinTablesRequest& this_ = static_cast<const NaturalJoinTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* NaturalJoinTablesRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const NaturalJoinTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.left_id_, this_._impl_.left_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.right_id_, this_._impl_.right_id_->GetCachedSize(), target,
                stream);
          }

          // repeated string columns_to_match = 4;
          for (int i = 0, n = this_._internal_columns_to_match_size(); i < n; ++i) {
            const auto& s = this_._internal_columns_to_match().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest.columns_to_match");
            target = stream->WriteString(4, s, target);
          }

          // repeated string columns_to_add = 5;
          for (int i = 0, n = this_._internal_columns_to_add_size(); i < n; ++i) {
            const auto& s = this_._internal_columns_to_add().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest.columns_to_add");
            target = stream->WriteString(5, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t NaturalJoinTablesRequest::ByteSizeLong(const MessageLite& base) {
          const NaturalJoinTablesRequest& this_ = static_cast<const NaturalJoinTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t NaturalJoinTablesRequest::ByteSizeLong() const {
          const NaturalJoinTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string columns_to_match = 4;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_columns_to_match().size());
              for (int i = 0, n = this_._internal_columns_to_match().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_columns_to_match().Get(i));
              }
            }
            // repeated string columns_to_add = 5;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_columns_to_add().size());
              for (int i = 0, n = this_._internal_columns_to_add().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_columns_to_add().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.left_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.right_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void NaturalJoinTablesRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NaturalJoinTablesRequest*>(&to_msg);
  auto& from = static_cast<const NaturalJoinTablesRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_columns_to_match()->MergeFrom(from._internal_columns_to_match());
  _this->_internal_mutable_columns_to_add()->MergeFrom(from._internal_columns_to_add());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.left_id_ != nullptr);
      if (_this->_impl_.left_id_ == nullptr) {
        _this->_impl_.left_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.left_id_);
      } else {
        _this->_impl_.left_id_->MergeFrom(*from._impl_.left_id_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.right_id_ != nullptr);
      if (_this->_impl_.right_id_ == nullptr) {
        _this->_impl_.right_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.right_id_);
      } else {
        _this->_impl_.right_id_->MergeFrom(*from._impl_.right_id_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NaturalJoinTablesRequest::CopyFrom(const NaturalJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NaturalJoinTablesRequest::InternalSwap(NaturalJoinTablesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.columns_to_match_.InternalSwap(&other->_impl_.columns_to_match_);
  _impl_.columns_to_add_.InternalSwap(&other->_impl_.columns_to_add_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, _impl_.right_id_)
      + sizeof(NaturalJoinTablesRequest::_impl_.right_id_)
      - PROTOBUF_FIELD_OFFSET(NaturalJoinTablesRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata NaturalJoinTablesRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ExactJoinTablesRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ExactJoinTablesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, _impl_._has_bits_);
};

void ExactJoinTablesRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ExactJoinTablesRequest::ExactJoinTablesRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE ExactJoinTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        columns_to_match_{visibility, arena, from.columns_to_match_},
        columns_to_add_{visibility, arena, from.columns_to_add_} {}

ExactJoinTablesRequest::ExactJoinTablesRequest(
    ::google::protobuf::Arena* arena,
    const ExactJoinTablesRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ExactJoinTablesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.left_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.left_id_)
                        : nullptr;
  _impl_.right_id_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.right_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE ExactJoinTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        columns_to_match_{visibility, arena},
        columns_to_add_{visibility, arena} {}

inline void ExactJoinTablesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, right_id_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::right_id_));
}
ExactJoinTablesRequest::~ExactJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ExactJoinTablesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.left_id_;
  delete _impl_.right_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    ExactJoinTablesRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_ExactJoinTablesRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ExactJoinTablesRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<ExactJoinTablesRequest>(),
            ::google::protobuf::Message::GetNewImpl<ExactJoinTablesRequest>(),
            ::google::protobuf::Message::GetClearImpl<ExactJoinTablesRequest>(), &ExactJoinTablesRequest::ByteSizeLong,
                &ExactJoinTablesRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, _impl_._cached_size_),
            false,
        },
        &ExactJoinTablesRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* ExactJoinTablesRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 95, 2> ExactJoinTablesRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, _impl_.left_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, _impl_.right_id_)}},
    // repeated string columns_to_match = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, _impl_.columns_to_match_)}},
    // repeated string columns_to_add = 5;
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, _impl_.columns_to_add_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
    {PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, _impl_.left_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
    {PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, _impl_.right_id_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string columns_to_match = 4;
    {PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, _impl_.columns_to_match_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string columns_to_add = 5;
    {PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, _impl_.columns_to_add_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\70\0\0\0\20\16\0\0"
    "io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest"
    "columns_to_match"
    "columns_to_add"
  }},
};

PROTOBUF_NOINLINE void ExactJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_to_match_.Clear();
  _impl_.columns_to_add_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.left_id_ != nullptr);
      _impl_.left_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.right_id_ != nullptr);
      _impl_.right_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ExactJoinTablesRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ExactJoinTablesRequest& this_ = static_cast<const ExactJoinTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ExactJoinTablesRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ExactJoinTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.left_id_, this_._impl_.left_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.right_id_, this_._impl_.right_id_->GetCachedSize(), target,
                stream);
          }

          // repeated string columns_to_match = 4;
          for (int i = 0, n = this_._internal_columns_to_match_size(); i < n; ++i) {
            const auto& s = this_._internal_columns_to_match().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest.columns_to_match");
            target = stream->WriteString(4, s, target);
          }

          // repeated string columns_to_add = 5;
          for (int i = 0, n = this_._internal_columns_to_add_size(); i < n; ++i) {
            const auto& s = this_._internal_columns_to_add().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest.columns_to_add");
            target = stream->WriteString(5, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ExactJoinTablesRequest::ByteSizeLong(const MessageLite& base) {
          const ExactJoinTablesRequest& this_ = static_cast<const ExactJoinTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ExactJoinTablesRequest::ByteSizeLong() const {
          const ExactJoinTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string columns_to_match = 4;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_columns_to_match().size());
              for (int i = 0, n = this_._internal_columns_to_match().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_columns_to_match().Get(i));
              }
            }
            // repeated string columns_to_add = 5;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_columns_to_add().size());
              for (int i = 0, n = this_._internal_columns_to_add().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_columns_to_add().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.left_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.right_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ExactJoinTablesRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ExactJoinTablesRequest*>(&to_msg);
  auto& from = static_cast<const ExactJoinTablesRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_columns_to_match()->MergeFrom(from._internal_columns_to_match());
  _this->_internal_mutable_columns_to_add()->MergeFrom(from._internal_columns_to_add());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.left_id_ != nullptr);
      if (_this->_impl_.left_id_ == nullptr) {
        _this->_impl_.left_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.left_id_);
      } else {
        _this->_impl_.left_id_->MergeFrom(*from._impl_.left_id_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.right_id_ != nullptr);
      if (_this->_impl_.right_id_ == nullptr) {
        _this->_impl_.right_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.right_id_);
      } else {
        _this->_impl_.right_id_->MergeFrom(*from._impl_.right_id_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExactJoinTablesRequest::CopyFrom(const ExactJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ExactJoinTablesRequest::InternalSwap(ExactJoinTablesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.columns_to_match_.InternalSwap(&other->_impl_.columns_to_match_);
  _impl_.columns_to_add_.InternalSwap(&other->_impl_.columns_to_add_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, _impl_.right_id_)
      + sizeof(ExactJoinTablesRequest::_impl_.right_id_)
      - PROTOBUF_FIELD_OFFSET(ExactJoinTablesRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata ExactJoinTablesRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LeftJoinTablesRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LeftJoinTablesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, _impl_._has_bits_);
};

void LeftJoinTablesRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LeftJoinTablesRequest::LeftJoinTablesRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE LeftJoinTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        columns_to_match_{visibility, arena, from.columns_to_match_},
        columns_to_add_{visibility, arena, from.columns_to_add_} {}

LeftJoinTablesRequest::LeftJoinTablesRequest(
    ::google::protobuf::Arena* arena,
    const LeftJoinTablesRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LeftJoinTablesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.left_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.left_id_)
                        : nullptr;
  _impl_.right_id_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.right_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE LeftJoinTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        columns_to_match_{visibility, arena},
        columns_to_add_{visibility, arena} {}

inline void LeftJoinTablesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, right_id_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::right_id_));
}
LeftJoinTablesRequest::~LeftJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LeftJoinTablesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.left_id_;
  delete _impl_.right_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    LeftJoinTablesRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_LeftJoinTablesRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &LeftJoinTablesRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<LeftJoinTablesRequest>(),
            ::google::protobuf::Message::GetNewImpl<LeftJoinTablesRequest>(),
            ::google::protobuf::Message::GetClearImpl<LeftJoinTablesRequest>(), &LeftJoinTablesRequest::ByteSizeLong,
                &LeftJoinTablesRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, _impl_._cached_size_),
            false,
        },
        &LeftJoinTablesRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* LeftJoinTablesRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 94, 2> LeftJoinTablesRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, _impl_.left_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, _impl_.right_id_)}},
    // repeated string columns_to_match = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, _impl_.columns_to_match_)}},
    // repeated string columns_to_add = 5;
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, _impl_.columns_to_add_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
    {PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, _impl_.left_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
    {PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, _impl_.right_id_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string columns_to_match = 4;
    {PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, _impl_.columns_to_match_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string columns_to_add = 5;
    {PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, _impl_.columns_to_add_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\67\0\0\0\20\16\0\0"
    "io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest"
    "columns_to_match"
    "columns_to_add"
  }},
};

PROTOBUF_NOINLINE void LeftJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_to_match_.Clear();
  _impl_.columns_to_add_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.left_id_ != nullptr);
      _impl_.left_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.right_id_ != nullptr);
      _impl_.right_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LeftJoinTablesRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LeftJoinTablesRequest& this_ = static_cast<const LeftJoinTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LeftJoinTablesRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LeftJoinTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.left_id_, this_._impl_.left_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.right_id_, this_._impl_.right_id_->GetCachedSize(), target,
                stream);
          }

          // repeated string columns_to_match = 4;
          for (int i = 0, n = this_._internal_columns_to_match_size(); i < n; ++i) {
            const auto& s = this_._internal_columns_to_match().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest.columns_to_match");
            target = stream->WriteString(4, s, target);
          }

          // repeated string columns_to_add = 5;
          for (int i = 0, n = this_._internal_columns_to_add_size(); i < n; ++i) {
            const auto& s = this_._internal_columns_to_add().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest.columns_to_add");
            target = stream->WriteString(5, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LeftJoinTablesRequest::ByteSizeLong(const MessageLite& base) {
          const LeftJoinTablesRequest& this_ = static_cast<const LeftJoinTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LeftJoinTablesRequest::ByteSizeLong() const {
          const LeftJoinTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string columns_to_match = 4;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_columns_to_match().size());
              for (int i = 0, n = this_._internal_columns_to_match().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_columns_to_match().Get(i));
              }
            }
            // repeated string columns_to_add = 5;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_columns_to_add().size());
              for (int i = 0, n = this_._internal_columns_to_add().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_columns_to_add().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.left_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.right_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LeftJoinTablesRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LeftJoinTablesRequest*>(&to_msg);
  auto& from = static_cast<const LeftJoinTablesRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_columns_to_match()->MergeFrom(from._internal_columns_to_match());
  _this->_internal_mutable_columns_to_add()->MergeFrom(from._internal_columns_to_add());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.left_id_ != nullptr);
      if (_this->_impl_.left_id_ == nullptr) {
        _this->_impl_.left_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.left_id_);
      } else {
        _this->_impl_.left_id_->MergeFrom(*from._impl_.left_id_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.right_id_ != nullptr);
      if (_this->_impl_.right_id_ == nullptr) {
        _this->_impl_.right_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.right_id_);
      } else {
        _this->_impl_.right_id_->MergeFrom(*from._impl_.right_id_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LeftJoinTablesRequest::CopyFrom(const LeftJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LeftJoinTablesRequest::InternalSwap(LeftJoinTablesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.columns_to_match_.InternalSwap(&other->_impl_.columns_to_match_);
  _impl_.columns_to_add_.InternalSwap(&other->_impl_.columns_to_add_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, _impl_.right_id_)
      + sizeof(LeftJoinTablesRequest::_impl_.right_id_)
      - PROTOBUF_FIELD_OFFSET(LeftJoinTablesRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata LeftJoinTablesRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AsOfJoinTablesRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AsOfJoinTablesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_._has_bits_);
};

void AsOfJoinTablesRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AsOfJoinTablesRequest::AsOfJoinTablesRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE AsOfJoinTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        columns_to_match_{visibility, arena, from.columns_to_match_},
        columns_to_add_{visibility, arena, from.columns_to_add_} {}

AsOfJoinTablesRequest::AsOfJoinTablesRequest(
    ::google::protobuf::Arena* arena,
    const AsOfJoinTablesRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AsOfJoinTablesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.left_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.left_id_)
                        : nullptr;
  _impl_.right_id_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.right_id_)
                        : nullptr;
  _impl_.as_of_match_rule_ = from._impl_.as_of_match_rule_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE AsOfJoinTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        columns_to_match_{visibility, arena},
        columns_to_add_{visibility, arena} {}

inline void AsOfJoinTablesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, as_of_match_rule_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::as_of_match_rule_));
}
AsOfJoinTablesRequest::~AsOfJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AsOfJoinTablesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.left_id_;
  delete _impl_.right_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AsOfJoinTablesRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AsOfJoinTablesRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AsOfJoinTablesRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AsOfJoinTablesRequest>(),
            ::google::protobuf::Message::GetNewImpl<AsOfJoinTablesRequest>(),
            ::google::protobuf::Message::GetClearImpl<AsOfJoinTablesRequest>(), &AsOfJoinTablesRequest::ByteSizeLong,
                &AsOfJoinTablesRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_._cached_size_),
            false,
        },
        &AsOfJoinTablesRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AsOfJoinTablesRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 3, 94, 2> AsOfJoinTablesRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_.left_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_.right_id_)}},
    // repeated string columns_to_match = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_.columns_to_match_)}},
    // repeated string columns_to_add = 5;
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_.columns_to_add_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.MatchRule as_of_match_rule = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AsOfJoinTablesRequest, _impl_.as_of_match_rule_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_.as_of_match_rule_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
    {PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_.left_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
    {PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_.right_id_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string columns_to_match = 4;
    {PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_.columns_to_match_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string columns_to_add = 5;
    {PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_.columns_to_add_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.MatchRule as_of_match_rule = 7;
    {PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_.as_of_match_rule_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\67\0\0\0\20\16\0\0"
    "io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest"
    "columns_to_match"
    "columns_to_add"
  }},
};

PROTOBUF_NOINLINE void AsOfJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_to_match_.Clear();
  _impl_.columns_to_add_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.left_id_ != nullptr);
      _impl_.left_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.right_id_ != nullptr);
      _impl_.right_id_->Clear();
    }
  }
  _impl_.as_of_match_rule_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AsOfJoinTablesRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AsOfJoinTablesRequest& this_ = static_cast<const AsOfJoinTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AsOfJoinTablesRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AsOfJoinTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.left_id_, this_._impl_.left_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.right_id_, this_._impl_.right_id_->GetCachedSize(), target,
                stream);
          }

          // repeated string columns_to_match = 4;
          for (int i = 0, n = this_._internal_columns_to_match_size(); i < n; ++i) {
            const auto& s = this_._internal_columns_to_match().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.columns_to_match");
            target = stream->WriteString(4, s, target);
          }

          // repeated string columns_to_add = 5;
          for (int i = 0, n = this_._internal_columns_to_add_size(); i < n; ++i) {
            const auto& s = this_._internal_columns_to_add().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.columns_to_add");
            target = stream->WriteString(5, s, target);
          }

          // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.MatchRule as_of_match_rule = 7;
          if (this_._internal_as_of_match_rule() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                7, this_._internal_as_of_match_rule(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AsOfJoinTablesRequest::ByteSizeLong(const MessageLite& base) {
          const AsOfJoinTablesRequest& this_ = static_cast<const AsOfJoinTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AsOfJoinTablesRequest::ByteSizeLong() const {
          const AsOfJoinTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string columns_to_match = 4;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_columns_to_match().size());
              for (int i = 0, n = this_._internal_columns_to_match().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_columns_to_match().Get(i));
              }
            }
            // repeated string columns_to_add = 5;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_columns_to_add().size());
              for (int i = 0, n = this_._internal_columns_to_add().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_columns_to_add().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.left_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.right_id_);
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest.MatchRule as_of_match_rule = 7;
            if (this_._internal_as_of_match_rule() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_as_of_match_rule());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AsOfJoinTablesRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AsOfJoinTablesRequest*>(&to_msg);
  auto& from = static_cast<const AsOfJoinTablesRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_columns_to_match()->MergeFrom(from._internal_columns_to_match());
  _this->_internal_mutable_columns_to_add()->MergeFrom(from._internal_columns_to_add());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.left_id_ != nullptr);
      if (_this->_impl_.left_id_ == nullptr) {
        _this->_impl_.left_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.left_id_);
      } else {
        _this->_impl_.left_id_->MergeFrom(*from._impl_.left_id_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.right_id_ != nullptr);
      if (_this->_impl_.right_id_ == nullptr) {
        _this->_impl_.right_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.right_id_);
      } else {
        _this->_impl_.right_id_->MergeFrom(*from._impl_.right_id_);
      }
    }
  }
  if (from._internal_as_of_match_rule() != 0) {
    _this->_impl_.as_of_match_rule_ = from._impl_.as_of_match_rule_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AsOfJoinTablesRequest::CopyFrom(const AsOfJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AsOfJoinTablesRequest::InternalSwap(AsOfJoinTablesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.columns_to_match_.InternalSwap(&other->_impl_.columns_to_match_);
  _impl_.columns_to_add_.InternalSwap(&other->_impl_.columns_to_add_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_.as_of_match_rule_)
      + sizeof(AsOfJoinTablesRequest::_impl_.as_of_match_rule_)
      - PROTOBUF_FIELD_OFFSET(AsOfJoinTablesRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata AsOfJoinTablesRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AjRajTablesRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AjRajTablesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_._has_bits_);
};

void AjRajTablesRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AjRajTablesRequest::AjRajTablesRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE AjRajTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::AjRajTablesRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        exact_match_columns_{visibility, arena, from.exact_match_columns_},
        columns_to_add_{visibility, arena, from.columns_to_add_},
        as_of_column_(arena, from.as_of_column_) {}

AjRajTablesRequest::AjRajTablesRequest(
    ::google::protobuf::Arena* arena,
    const AjRajTablesRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AjRajTablesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.left_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.left_id_)
                        : nullptr;
  _impl_.right_id_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.right_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE AjRajTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        exact_match_columns_{visibility, arena},
        columns_to_add_{visibility, arena},
        as_of_column_(arena) {}

inline void AjRajTablesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, right_id_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::right_id_));
}
AjRajTablesRequest::~AjRajTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AjRajTablesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.as_of_column_.Destroy();
  delete _impl_.result_id_;
  delete _impl_.left_id_;
  delete _impl_.right_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AjRajTablesRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AjRajTablesRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AjRajTablesRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AjRajTablesRequest>(),
            ::google::protobuf::Message::GetNewImpl<AjRajTablesRequest>(),
            ::google::protobuf::Message::GetClearImpl<AjRajTablesRequest>(), &AjRajTablesRequest::ByteSizeLong,
                &AjRajTablesRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_._cached_size_),
            false,
        },
        &AjRajTablesRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AjRajTablesRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 3, 106, 2> AjRajTablesRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AjRajTablesRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_.left_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_.right_id_)}},
    // repeated string exact_match_columns = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_.exact_match_columns_)}},
    // string as_of_column = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_.as_of_column_)}},
    // repeated string columns_to_add = 6;
    {::_pbi::TcParser::FastUR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_.columns_to_add_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
    {PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_.left_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
    {PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_.right_id_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string exact_match_columns = 4;
    {PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_.exact_match_columns_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string as_of_column = 5;
    {PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_.as_of_column_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string columns_to_add = 6;
    {PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_.columns_to_add_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\64\0\0\0\23\14\16\0"
    "io.deephaven.proto.backplane.grpc.AjRajTablesRequest"
    "exact_match_columns"
    "as_of_column"
    "columns_to_add"
  }},
};

PROTOBUF_NOINLINE void AjRajTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exact_match_columns_.Clear();
  _impl_.columns_to_add_.Clear();
  _impl_.as_of_column_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.left_id_ != nullptr);
      _impl_.left_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.right_id_ != nullptr);
      _impl_.right_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AjRajTablesRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AjRajTablesRequest& this_ = static_cast<const AjRajTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AjRajTablesRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AjRajTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.left_id_, this_._impl_.left_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.right_id_, this_._impl_.right_id_->GetCachedSize(), target,
                stream);
          }

          // repeated string exact_match_columns = 4;
          for (int i = 0, n = this_._internal_exact_match_columns_size(); i < n; ++i) {
            const auto& s = this_._internal_exact_match_columns().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.AjRajTablesRequest.exact_match_columns");
            target = stream->WriteString(4, s, target);
          }

          // string as_of_column = 5;
          if (!this_._internal_as_of_column().empty()) {
            const std::string& _s = this_._internal_as_of_column();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.AjRajTablesRequest.as_of_column");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // repeated string columns_to_add = 6;
          for (int i = 0, n = this_._internal_columns_to_add_size(); i < n; ++i) {
            const auto& s = this_._internal_columns_to_add().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.AjRajTablesRequest.columns_to_add");
            target = stream->WriteString(6, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AjRajTablesRequest::ByteSizeLong(const MessageLite& base) {
          const AjRajTablesRequest& this_ = static_cast<const AjRajTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AjRajTablesRequest::ByteSizeLong() const {
          const AjRajTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string exact_match_columns = 4;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_exact_match_columns().size());
              for (int i = 0, n = this_._internal_exact_match_columns().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_exact_match_columns().Get(i));
              }
            }
            // repeated string columns_to_add = 6;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_columns_to_add().size());
              for (int i = 0, n = this_._internal_columns_to_add().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_columns_to_add().Get(i));
              }
            }
          }
           {
            // string as_of_column = 5;
            if (!this_._internal_as_of_column().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_as_of_column());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.left_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.right_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AjRajTablesRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AjRajTablesRequest*>(&to_msg);
  auto& from = static_cast<const AjRajTablesRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_exact_match_columns()->MergeFrom(from._internal_exact_match_columns());
  _this->_internal_mutable_columns_to_add()->MergeFrom(from._internal_columns_to_add());
  if (!from._internal_as_of_column().empty()) {
    _this->_internal_set_as_of_column(from._internal_as_of_column());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.left_id_ != nullptr);
      if (_this->_impl_.left_id_ == nullptr) {
        _this->_impl_.left_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.left_id_);
      } else {
        _this->_impl_.left_id_->MergeFrom(*from._impl_.left_id_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.right_id_ != nullptr);
      if (_this->_impl_.right_id_ == nullptr) {
        _this->_impl_.right_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.right_id_);
      } else {
        _this->_impl_.right_id_->MergeFrom(*from._impl_.right_id_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AjRajTablesRequest::CopyFrom(const AjRajTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AjRajTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AjRajTablesRequest::InternalSwap(AjRajTablesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.exact_match_columns_.InternalSwap(&other->_impl_.exact_match_columns_);
  _impl_.columns_to_add_.InternalSwap(&other->_impl_.columns_to_add_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.as_of_column_, &other->_impl_.as_of_column_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_.right_id_)
      + sizeof(AjRajTablesRequest::_impl_.right_id_)
      - PROTOBUF_FIELD_OFFSET(AjRajTablesRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata AjRajTablesRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MultiJoinInput::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MultiJoinInput>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MultiJoinInput, _impl_._has_bits_);
};

MultiJoinInput::MultiJoinInput(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.MultiJoinInput)
}
inline PROTOBUF_NDEBUG_INLINE MultiJoinInput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::MultiJoinInput& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        columns_to_match_{visibility, arena, from.columns_to_match_},
        columns_to_add_{visibility, arena, from.columns_to_add_} {}

MultiJoinInput::MultiJoinInput(
    ::google::protobuf::Arena* arena,
    const MultiJoinInput& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MultiJoinInput* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.source_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.MultiJoinInput)
}
inline PROTOBUF_NDEBUG_INLINE MultiJoinInput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        columns_to_match_{visibility, arena},
        columns_to_add_{visibility, arena} {}

inline void MultiJoinInput::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.source_id_ = {};
}
MultiJoinInput::~MultiJoinInput() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.MultiJoinInput)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MultiJoinInput::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.source_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    MultiJoinInput::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_MultiJoinInput_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &MultiJoinInput::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<MultiJoinInput>(),
            ::google::protobuf::Message::GetNewImpl<MultiJoinInput>(),
            ::google::protobuf::Message::GetClearImpl<MultiJoinInput>(), &MultiJoinInput::ByteSizeLong,
                &MultiJoinInput::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(MultiJoinInput, _impl_._cached_size_),
            false,
        },
        &MultiJoinInput::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* MultiJoinInput::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 87, 2> MultiJoinInput::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MultiJoinInput, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::MultiJoinInput>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MultiJoinInput, _impl_.source_id_)}},
    // repeated string columns_to_match = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MultiJoinInput, _impl_.columns_to_match_)}},
    // repeated string columns_to_add = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(MultiJoinInput, _impl_.columns_to_add_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
    {PROTOBUF_FIELD_OFFSET(MultiJoinInput, _impl_.source_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string columns_to_match = 2;
    {PROTOBUF_FIELD_OFFSET(MultiJoinInput, _impl_.columns_to_match_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string columns_to_add = 3;
    {PROTOBUF_FIELD_OFFSET(MultiJoinInput, _impl_.columns_to_add_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\60\0\20\16\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.MultiJoinInput"
    "columns_to_match"
    "columns_to_add"
  }},
};

PROTOBUF_NOINLINE void MultiJoinInput::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.MultiJoinInput)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_to_match_.Clear();
  _impl_.columns_to_add_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.source_id_ != nullptr);
    _impl_.source_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MultiJoinInput::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MultiJoinInput& this_ = static_cast<const MultiJoinInput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MultiJoinInput::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MultiJoinInput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.MultiJoinInput)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // repeated string columns_to_match = 2;
          for (int i = 0, n = this_._internal_columns_to_match_size(); i < n; ++i) {
            const auto& s = this_._internal_columns_to_match().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.MultiJoinInput.columns_to_match");
            target = stream->WriteString(2, s, target);
          }

          // repeated string columns_to_add = 3;
          for (int i = 0, n = this_._internal_columns_to_add_size(); i < n; ++i) {
            const auto& s = this_._internal_columns_to_add().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.MultiJoinInput.columns_to_add");
            target = stream->WriteString(3, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.MultiJoinInput)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MultiJoinInput::ByteSizeLong(const MessageLite& base) {
          const MultiJoinInput& this_ = static_cast<const MultiJoinInput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MultiJoinInput::ByteSizeLong() const {
          const MultiJoinInput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.MultiJoinInput)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string columns_to_match = 2;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_columns_to_match().size());
              for (int i = 0, n = this_._internal_columns_to_match().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_columns_to_match().Get(i));
              }
            }
            // repeated string columns_to_add = 3;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_columns_to_add().size());
              for (int i = 0, n = this_._internal_columns_to_add().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_columns_to_add().Get(i));
              }
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MultiJoinInput::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MultiJoinInput*>(&to_msg);
  auto& from = static_cast<const MultiJoinInput&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.MultiJoinInput)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_columns_to_match()->MergeFrom(from._internal_columns_to_match());
  _this->_internal_mutable_columns_to_add()->MergeFrom(from._internal_columns_to_add());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.source_id_ != nullptr);
    if (_this->_impl_.source_id_ == nullptr) {
      _this->_impl_.source_id_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
    } else {
      _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MultiJoinInput::CopyFrom(const MultiJoinInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.MultiJoinInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MultiJoinInput::InternalSwap(MultiJoinInput* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.columns_to_match_.InternalSwap(&other->_impl_.columns_to_match_);
  _impl_.columns_to_add_.InternalSwap(&other->_impl_.columns_to_add_);
  swap(_impl_.source_id_, other->_impl_.source_id_);
}

::google::protobuf::Metadata MultiJoinInput::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MultiJoinTablesRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MultiJoinTablesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MultiJoinTablesRequest, _impl_._has_bits_);
};

void MultiJoinTablesRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MultiJoinTablesRequest::MultiJoinTablesRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.MultiJoinTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE MultiJoinTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::MultiJoinTablesRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        multi_join_inputs_{visibility, arena, from.multi_join_inputs_} {}

MultiJoinTablesRequest::MultiJoinTablesRequest(
    ::google::protobuf::Arena* arena,
    const MultiJoinTablesRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MultiJoinTablesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.MultiJoinTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE MultiJoinTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        multi_join_inputs_{visibility, arena} {}

inline void MultiJoinTablesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.result_id_ = {};
}
MultiJoinTablesRequest::~MultiJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.MultiJoinTablesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MultiJoinTablesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    MultiJoinTablesRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_MultiJoinTablesRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &MultiJoinTablesRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<MultiJoinTablesRequest>(),
            ::google::protobuf::Message::GetNewImpl<MultiJoinTablesRequest>(),
            ::google::protobuf::Message::GetClearImpl<MultiJoinTablesRequest>(), &MultiJoinTablesRequest::ByteSizeLong,
                &MultiJoinTablesRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(MultiJoinTablesRequest, _impl_._cached_size_),
            false,
        },
        &MultiJoinTablesRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* MultiJoinTablesRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> MultiJoinTablesRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MultiJoinTablesRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::MultiJoinTablesRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .io.deephaven.proto.backplane.grpc.MultiJoinInput multi_join_inputs = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(MultiJoinTablesRequest, _impl_.multi_join_inputs_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MultiJoinTablesRequest, _impl_.result_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(MultiJoinTablesRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.grpc.MultiJoinInput multi_join_inputs = 2;
    {PROTOBUF_FIELD_OFFSET(MultiJoinTablesRequest, _impl_.multi_join_inputs_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::MultiJoinInput>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MultiJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.MultiJoinTablesRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.multi_join_inputs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_id_ != nullptr);
    _impl_.result_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MultiJoinTablesRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MultiJoinTablesRequest& this_ = static_cast<const MultiJoinTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MultiJoinTablesRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MultiJoinTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.MultiJoinTablesRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // repeated .io.deephaven.proto.backplane.grpc.MultiJoinInput multi_join_inputs = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_multi_join_inputs_size());
               i < n; i++) {
            const auto& repfield = this_._internal_multi_join_inputs().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.MultiJoinTablesRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MultiJoinTablesRequest::ByteSizeLong(const MessageLite& base) {
          const MultiJoinTablesRequest& this_ = static_cast<const MultiJoinTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MultiJoinTablesRequest::ByteSizeLong() const {
          const MultiJoinTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.MultiJoinTablesRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .io.deephaven.proto.backplane.grpc.MultiJoinInput multi_join_inputs = 2;
             {
              total_size += 1UL * this_._internal_multi_join_inputs_size();
              for (const auto& msg : this_._internal_multi_join_inputs()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MultiJoinTablesRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MultiJoinTablesRequest*>(&to_msg);
  auto& from = static_cast<const MultiJoinTablesRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.MultiJoinTablesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_multi_join_inputs()->MergeFrom(
      from._internal_multi_join_inputs());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.result_id_ != nullptr);
    if (_this->_impl_.result_id_ == nullptr) {
      _this->_impl_.result_id_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
    } else {
      _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MultiJoinTablesRequest::CopyFrom(const MultiJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.MultiJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MultiJoinTablesRequest::InternalSwap(MultiJoinTablesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.multi_join_inputs_.InternalSwap(&other->_impl_.multi_join_inputs_);
  swap(_impl_.result_id_, other->_impl_.result_id_);
}

::google::protobuf::Metadata MultiJoinTablesRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RangeJoinTablesRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RangeJoinTablesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_._has_bits_);
};

void RangeJoinTablesRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RangeJoinTablesRequest::RangeJoinTablesRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE RangeJoinTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        exact_match_columns_{visibility, arena, from.exact_match_columns_},
        aggregations_{visibility, arena, from.aggregations_},
        left_start_column_(arena, from.left_start_column_),
        right_range_column_(arena, from.right_range_column_),
        left_end_column_(arena, from.left_end_column_),
        range_match_(arena, from.range_match_) {}

RangeJoinTablesRequest::RangeJoinTablesRequest(
    ::google::protobuf::Arena* arena,
    const RangeJoinTablesRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RangeJoinTablesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.left_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.left_id_)
                        : nullptr;
  _impl_.right_id_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.right_id_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, range_start_rule_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, range_start_rule_),
           offsetof(Impl_, range_end_rule_) -
               offsetof(Impl_, range_start_rule_) +
               sizeof(Impl_::range_end_rule_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
}
inline PROTOBUF_NDEBUG_INLINE RangeJoinTablesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        exact_match_columns_{visibility, arena},
        aggregations_{visibility, arena},
        left_start_column_(arena),
        right_range_column_(arena),
        left_end_column_(arena),
        range_match_(arena) {}

inline void RangeJoinTablesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, range_end_rule_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::range_end_rule_));
}
RangeJoinTablesRequest::~RangeJoinTablesRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RangeJoinTablesRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.left_start_column_.Destroy();
  _impl_.right_range_column_.Destroy();
  _impl_.left_end_column_.Destroy();
  _impl_.range_match_.Destroy();
  delete _impl_.result_id_;
  delete _impl_.left_id_;
  delete _impl_.right_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    RangeJoinTablesRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_RangeJoinTablesRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &RangeJoinTablesRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<RangeJoinTablesRequest>(),
            ::google::protobuf::Message::GetNewImpl<RangeJoinTablesRequest>(),
            ::google::protobuf::Message::GetClearImpl<RangeJoinTablesRequest>(), &RangeJoinTablesRequest::ByteSizeLong,
                &RangeJoinTablesRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_._cached_size_),
            false,
        },
        &RangeJoinTablesRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* RangeJoinTablesRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 4, 153, 2> RangeJoinTablesRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.left_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.right_id_)}},
    // repeated string exact_match_columns = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.exact_match_columns_)}},
    // string left_start_column = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.left_start_column_)}},
    // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.RangeStartRule range_start_rule = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RangeJoinTablesRequest, _impl_.range_start_rule_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.range_start_rule_)}},
    // string right_range_column = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.right_range_column_)}},
    // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.RangeEndRule range_end_rule = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RangeJoinTablesRequest, _impl_.range_end_rule_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.range_end_rule_)}},
    // string left_end_column = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.left_end_column_)}},
    // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 3, PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.aggregations_)}},
    // string range_match = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.range_match_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
    {PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.left_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
    {PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.right_id_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string exact_match_columns = 4;
    {PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.exact_match_columns_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string left_start_column = 5;
    {PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.left_start_column_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.RangeStartRule range_start_rule = 6;
    {PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.range_start_rule_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string right_range_column = 7;
    {PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.right_range_column_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.RangeEndRule range_end_rule = 8;
    {PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.range_end_rule_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string left_end_column = 9;
    {PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.left_end_column_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 10;
    {PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.aggregations_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string range_match = 11;
    {PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.range_match_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Aggregation>()},
  }}, {{
    "\70\0\0\0\23\21\0\22\0\17\0\13\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest"
    "exact_match_columns"
    "left_start_column"
    "right_range_column"
    "left_end_column"
    "range_match"
  }},
};

PROTOBUF_NOINLINE void RangeJoinTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exact_match_columns_.Clear();
  _impl_.aggregations_.Clear();
  _impl_.left_start_column_.ClearToEmpty();
  _impl_.right_range_column_.ClearToEmpty();
  _impl_.left_end_column_.ClearToEmpty();
  _impl_.range_match_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.left_id_ != nullptr);
      _impl_.left_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.right_id_ != nullptr);
      _impl_.right_id_->Clear();
    }
  }
  ::memset(&_impl_.range_start_rule_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.range_end_rule_) -
      reinterpret_cast<char*>(&_impl_.range_start_rule_)) + sizeof(_impl_.range_end_rule_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RangeJoinTablesRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RangeJoinTablesRequest& this_ = static_cast<const RangeJoinTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RangeJoinTablesRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RangeJoinTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.left_id_, this_._impl_.left_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.right_id_, this_._impl_.right_id_->GetCachedSize(), target,
                stream);
          }

          // repeated string exact_match_columns = 4;
          for (int i = 0, n = this_._internal_exact_match_columns_size(); i < n; ++i) {
            const auto& s = this_._internal_exact_match_columns().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.exact_match_columns");
            target = stream->WriteString(4, s, target);
          }

          // string left_start_column = 5;
          if (!this_._internal_left_start_column().empty()) {
            const std::string& _s = this_._internal_left_start_column();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.left_start_column");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.RangeStartRule range_start_rule = 6;
          if (this_._internal_range_start_rule() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_range_start_rule(), target);
          }

          // string right_range_column = 7;
          if (!this_._internal_right_range_column().empty()) {
            const std::string& _s = this_._internal_right_range_column();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.right_range_column");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.RangeEndRule range_end_rule = 8;
          if (this_._internal_range_end_rule() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                8, this_._internal_range_end_rule(), target);
          }

          // string left_end_column = 9;
          if (!this_._internal_left_end_column().empty()) {
            const std::string& _s = this_._internal_left_end_column();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.left_end_column");
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 10;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_aggregations_size());
               i < n; i++) {
            const auto& repfield = this_._internal_aggregations().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    10, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // string range_match = 11;
          if (!this_._internal_range_match().empty()) {
            const std::string& _s = this_._internal_range_match();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.range_match");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RangeJoinTablesRequest::ByteSizeLong(const MessageLite& base) {
          const RangeJoinTablesRequest& this_ = static_cast<const RangeJoinTablesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RangeJoinTablesRequest::ByteSizeLong() const {
          const RangeJoinTablesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string exact_match_columns = 4;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_exact_match_columns().size());
              for (int i = 0, n = this_._internal_exact_match_columns().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_exact_match_columns().Get(i));
              }
            }
            // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 10;
             {
              total_size += 1UL * this_._internal_aggregations_size();
              for (const auto& msg : this_._internal_aggregations()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string left_start_column = 5;
            if (!this_._internal_left_start_column().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_left_start_column());
            }
            // string right_range_column = 7;
            if (!this_._internal_right_range_column().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_right_range_column());
            }
            // string left_end_column = 9;
            if (!this_._internal_left_end_column().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_left_end_column());
            }
            // string range_match = 11;
            if (!this_._internal_range_match().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_range_match());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.left_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.right_id_);
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.RangeStartRule range_start_rule = 6;
            if (this_._internal_range_start_rule() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_range_start_rule());
            }
            // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest.RangeEndRule range_end_rule = 8;
            if (this_._internal_range_end_rule() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_range_end_rule());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RangeJoinTablesRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RangeJoinTablesRequest*>(&to_msg);
  auto& from = static_cast<const RangeJoinTablesRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_exact_match_columns()->MergeFrom(from._internal_exact_match_columns());
  _this->_internal_mutable_aggregations()->MergeFrom(
      from._internal_aggregations());
  if (!from._internal_left_start_column().empty()) {
    _this->_internal_set_left_start_column(from._internal_left_start_column());
  }
  if (!from._internal_right_range_column().empty()) {
    _this->_internal_set_right_range_column(from._internal_right_range_column());
  }
  if (!from._internal_left_end_column().empty()) {
    _this->_internal_set_left_end_column(from._internal_left_end_column());
  }
  if (!from._internal_range_match().empty()) {
    _this->_internal_set_range_match(from._internal_range_match());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.left_id_ != nullptr);
      if (_this->_impl_.left_id_ == nullptr) {
        _this->_impl_.left_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.left_id_);
      } else {
        _this->_impl_.left_id_->MergeFrom(*from._impl_.left_id_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.right_id_ != nullptr);
      if (_this->_impl_.right_id_ == nullptr) {
        _this->_impl_.right_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.right_id_);
      } else {
        _this->_impl_.right_id_->MergeFrom(*from._impl_.right_id_);
      }
    }
  }
  if (from._internal_range_start_rule() != 0) {
    _this->_impl_.range_start_rule_ = from._impl_.range_start_rule_;
  }
  if (from._internal_range_end_rule() != 0) {
    _this->_impl_.range_end_rule_ = from._impl_.range_end_rule_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RangeJoinTablesRequest::CopyFrom(const RangeJoinTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RangeJoinTablesRequest::InternalSwap(RangeJoinTablesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.exact_match_columns_.InternalSwap(&other->_impl_.exact_match_columns_);
  _impl_.aggregations_.InternalSwap(&other->_impl_.aggregations_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.left_start_column_, &other->_impl_.left_start_column_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.right_range_column_, &other->_impl_.right_range_column_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.left_end_column_, &other->_impl_.left_end_column_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.range_match_, &other->_impl_.range_match_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.range_end_rule_)
      + sizeof(RangeJoinTablesRequest::_impl_.range_end_rule_)
      - PROTOBUF_FIELD_OFFSET(RangeJoinTablesRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata RangeJoinTablesRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ComboAggregateRequest_Aggregate::_Internal {
 public:
};

ComboAggregateRequest_Aggregate::ComboAggregateRequest_Aggregate(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
}
inline PROTOBUF_NDEBUG_INLINE ComboAggregateRequest_Aggregate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate& from_msg)
      : match_pairs_{visibility, arena, from.match_pairs_},
        column_name_(arena, from.column_name_),
        _cached_size_{0} {}

ComboAggregateRequest_Aggregate::ComboAggregateRequest_Aggregate(
    ::google::protobuf::Arena* arena,
    const ComboAggregateRequest_Aggregate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ComboAggregateRequest_Aggregate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, percentile_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::percentile_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
}
inline PROTOBUF_NDEBUG_INLINE ComboAggregateRequest_Aggregate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : match_pairs_{visibility, arena},
        column_name_(arena),
        _cached_size_{0} {}

inline void ComboAggregateRequest_Aggregate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           0,
           offsetof(Impl_, percentile_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::percentile_));
}
ComboAggregateRequest_Aggregate::~ComboAggregateRequest_Aggregate() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ComboAggregateRequest_Aggregate::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.column_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    ComboAggregateRequest_Aggregate::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_ComboAggregateRequest_Aggregate_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ComboAggregateRequest_Aggregate::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<ComboAggregateRequest_Aggregate>(),
            ::google::protobuf::Message::GetNewImpl<ComboAggregateRequest_Aggregate>(),
            ::google::protobuf::Message::GetClearImpl<ComboAggregateRequest_Aggregate>(), &ComboAggregateRequest_Aggregate::ByteSizeLong,
                &ComboAggregateRequest_Aggregate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, _impl_._cached_size_),
            false,
        },
        &ComboAggregateRequest_Aggregate::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* ComboAggregateRequest_Aggregate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 96, 2> ComboAggregateRequest_Aggregate::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ComboAggregateRequest_Aggregate, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, _impl_.type_)}},
    // repeated string match_pairs = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, _impl_.match_pairs_)}},
    // string column_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, _impl_.column_name_)}},
    // double percentile = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, _impl_.percentile_)}},
    // bool avg_median = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ComboAggregateRequest_Aggregate, _impl_.avg_median_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, _impl_.avg_median_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggType type = 1;
    {PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated string match_pairs = 2;
    {PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, _impl_.match_pairs_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string column_name = 3;
    {PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, _impl_.column_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double percentile = 4;
    {PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, _impl_.percentile_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // bool avg_median = 5;
    {PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, _impl_.avg_median_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\101\0\13\13\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate"
    "match_pairs"
    "column_name"
  }},
};

PROTOBUF_NOINLINE void ComboAggregateRequest_Aggregate::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.match_pairs_.Clear();
  _impl_.column_name_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.percentile_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.percentile_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ComboAggregateRequest_Aggregate::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ComboAggregateRequest_Aggregate& this_ = static_cast<const ComboAggregateRequest_Aggregate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ComboAggregateRequest_Aggregate::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ComboAggregateRequest_Aggregate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggType type = 1;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_type(), target);
          }

          // repeated string match_pairs = 2;
          for (int i = 0, n = this_._internal_match_pairs_size(); i < n; ++i) {
            const auto& s = this_._internal_match_pairs().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.match_pairs");
            target = stream->WriteString(2, s, target);
          }

          // string column_name = 3;
          if (!this_._internal_column_name().empty()) {
            const std::string& _s = this_._internal_column_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate.column_name");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // double percentile = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_percentile()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_percentile(), target);
          }

          // bool avg_median = 5;
          if (this_._internal_avg_median() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_avg_median(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ComboAggregateRequest_Aggregate::ByteSizeLong(const MessageLite& base) {
          const ComboAggregateRequest_Aggregate& this_ = static_cast<const ComboAggregateRequest_Aggregate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ComboAggregateRequest_Aggregate::ByteSizeLong() const {
          const ComboAggregateRequest_Aggregate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string match_pairs = 2;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_match_pairs().size());
              for (int i = 0, n = this_._internal_match_pairs().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_match_pairs().Get(i));
              }
            }
          }
           {
            // string column_name = 3;
            if (!this_._internal_column_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_column_name());
            }
            // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.AggType type = 1;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
            // bool avg_median = 5;
            if (this_._internal_avg_median() != 0) {
              total_size += 2;
            }
            // double percentile = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_percentile()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ComboAggregateRequest_Aggregate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ComboAggregateRequest_Aggregate*>(&to_msg);
  auto& from = static_cast<const ComboAggregateRequest_Aggregate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_match_pairs()->MergeFrom(from._internal_match_pairs());
  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_avg_median() != 0) {
    _this->_impl_.avg_median_ = from._impl_.avg_median_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_percentile()) != 0) {
    _this->_impl_.percentile_ = from._impl_.percentile_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ComboAggregateRequest_Aggregate::CopyFrom(const ComboAggregateRequest_Aggregate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ComboAggregateRequest_Aggregate::InternalSwap(ComboAggregateRequest_Aggregate* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.match_pairs_.InternalSwap(&other->_impl_.match_pairs_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.column_name_, &other->_impl_.column_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, _impl_.percentile_)
      + sizeof(ComboAggregateRequest_Aggregate::_impl_.percentile_)
      - PROTOBUF_FIELD_OFFSET(ComboAggregateRequest_Aggregate, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::google::protobuf::Metadata ComboAggregateRequest_Aggregate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ComboAggregateRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ComboAggregateRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, _impl_._has_bits_);
};

void ComboAggregateRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ComboAggregateRequest::ComboAggregateRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
}
inline PROTOBUF_NDEBUG_INLINE ComboAggregateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::ComboAggregateRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        aggregates_{visibility, arena, from.aggregates_},
        group_by_columns_{visibility, arena, from.group_by_columns_} {}

ComboAggregateRequest::ComboAggregateRequest(
    ::google::protobuf::Arena* arena,
    const ComboAggregateRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ComboAggregateRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;
  _impl_.force_combo_ = from._impl_.force_combo_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
}
inline PROTOBUF_NDEBUG_INLINE ComboAggregateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        aggregates_{visibility, arena},
        group_by_columns_{visibility, arena} {}

inline void ComboAggregateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, force_combo_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::force_combo_));
}
ComboAggregateRequest::~ComboAggregateRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ComboAggregateRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    ComboAggregateRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_ComboAggregateRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ComboAggregateRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<ComboAggregateRequest>(),
            ::google::protobuf::Message::GetNewImpl<ComboAggregateRequest>(),
            ::google::protobuf::Message::GetClearImpl<ComboAggregateRequest>(), &ComboAggregateRequest::ByteSizeLong,
                &ComboAggregateRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, _impl_._cached_size_),
            false,
        },
        &ComboAggregateRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* ComboAggregateRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 80, 2> ComboAggregateRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ComboAggregateRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, _impl_.source_id_)}},
    // repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, _impl_.aggregates_)}},
    // repeated string group_by_columns = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, _impl_.group_by_columns_)}},
    // bool force_combo = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ComboAggregateRequest, _impl_.force_combo_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, _impl_.force_combo_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;
    {PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, _impl_.aggregates_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string group_by_columns = 4;
    {PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, _impl_.group_by_columns_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool force_combo = 5;
    {PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, _impl_.force_combo_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ComboAggregateRequest_Aggregate>()},
  }}, {{
    "\67\0\0\0\20\0\0\0"
    "io.deephaven.proto.backplane.grpc.ComboAggregateRequest"
    "group_by_columns"
  }},
};

PROTOBUF_NOINLINE void ComboAggregateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aggregates_.Clear();
  _impl_.group_by_columns_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
  }
  _impl_.force_combo_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ComboAggregateRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ComboAggregateRequest& this_ = static_cast<const ComboAggregateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ComboAggregateRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ComboAggregateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_aggregates_size());
               i < n; i++) {
            const auto& repfield = this_._internal_aggregates().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated string group_by_columns = 4;
          for (int i = 0, n = this_._internal_group_by_columns_size(); i < n; ++i) {
            const auto& s = this_._internal_group_by_columns().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.ComboAggregateRequest.group_by_columns");
            target = stream->WriteString(4, s, target);
          }

          // bool force_combo = 5;
          if (this_._internal_force_combo() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_force_combo(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ComboAggregateRequest::ByteSizeLong(const MessageLite& base) {
          const ComboAggregateRequest& this_ = static_cast<const ComboAggregateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ComboAggregateRequest::ByteSizeLong() const {
          const ComboAggregateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate aggregates = 3;
             {
              total_size += 1UL * this_._internal_aggregates_size();
              for (const auto& msg : this_._internal_aggregates()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated string group_by_columns = 4;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_group_by_columns().size());
              for (int i = 0, n = this_._internal_group_by_columns().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_group_by_columns().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
          }
           {
            // bool force_combo = 5;
            if (this_._internal_force_combo() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ComboAggregateRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ComboAggregateRequest*>(&to_msg);
  auto& from = static_cast<const ComboAggregateRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_aggregates()->MergeFrom(
      from._internal_aggregates());
  _this->_internal_mutable_group_by_columns()->MergeFrom(from._internal_group_by_columns());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
  }
  if (from._internal_force_combo() != 0) {
    _this->_impl_.force_combo_ = from._impl_.force_combo_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ComboAggregateRequest::CopyFrom(const ComboAggregateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ComboAggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ComboAggregateRequest::InternalSwap(ComboAggregateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.aggregates_.InternalSwap(&other->_impl_.aggregates_);
  _impl_.group_by_columns_.InternalSwap(&other->_impl_.group_by_columns_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, _impl_.force_combo_)
      + sizeof(ComboAggregateRequest::_impl_.force_combo_)
      - PROTOBUF_FIELD_OFFSET(ComboAggregateRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata ComboAggregateRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggregateAllRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AggregateAllRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AggregateAllRequest, _impl_._has_bits_);
};

void AggregateAllRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AggregateAllRequest::AggregateAllRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
}
inline PROTOBUF_NDEBUG_INLINE AggregateAllRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::AggregateAllRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        group_by_columns_{visibility, arena, from.group_by_columns_} {}

AggregateAllRequest::AggregateAllRequest(
    ::google::protobuf::Arena* arena,
    const AggregateAllRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggregateAllRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;
  _impl_.spec_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec>(
                              arena, *from._impl_.spec_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
}
inline PROTOBUF_NDEBUG_INLINE AggregateAllRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        group_by_columns_{visibility, arena} {}

inline void AggregateAllRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, spec_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::spec_));
}
AggregateAllRequest::~AggregateAllRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AggregateAllRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  delete _impl_.spec_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggregateAllRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AggregateAllRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggregateAllRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AggregateAllRequest>(),
            ::google::protobuf::Message::GetNewImpl<AggregateAllRequest>(),
            ::google::protobuf::Message::GetClearImpl<AggregateAllRequest>(), &AggregateAllRequest::ByteSizeLong,
                &AggregateAllRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggregateAllRequest, _impl_._cached_size_),
            false,
        },
        &AggregateAllRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggregateAllRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 78, 2> AggregateAllRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AggregateAllRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggregateAllRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string group_by_columns = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AggregateAllRequest, _impl_.group_by_columns_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AggregateAllRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AggregateAllRequest, _impl_.source_id_)}},
    // .io.deephaven.proto.backplane.grpc.AggSpec spec = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(AggregateAllRequest, _impl_.spec_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(AggregateAllRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(AggregateAllRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec spec = 3;
    {PROTOBUF_FIELD_OFFSET(AggregateAllRequest, _impl_.spec_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string group_by_columns = 4;
    {PROTOBUF_FIELD_OFFSET(AggregateAllRequest, _impl_.group_by_columns_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec>()},
  }}, {{
    "\65\0\0\0\20\0\0\0"
    "io.deephaven.proto.backplane.grpc.AggregateAllRequest"
    "group_by_columns"
  }},
};

PROTOBUF_NOINLINE void AggregateAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_by_columns_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.spec_ != nullptr);
      _impl_.spec_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AggregateAllRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AggregateAllRequest& this_ = static_cast<const AggregateAllRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AggregateAllRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AggregateAllRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.AggSpec spec = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.spec_, this_._impl_.spec_->GetCachedSize(), target,
                stream);
          }

          // repeated string group_by_columns = 4;
          for (int i = 0, n = this_._internal_group_by_columns_size(); i < n; ++i) {
            const auto& s = this_._internal_group_by_columns().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.AggregateAllRequest.group_by_columns");
            target = stream->WriteString(4, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AggregateAllRequest::ByteSizeLong(const MessageLite& base) {
          const AggregateAllRequest& this_ = static_cast<const AggregateAllRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AggregateAllRequest::ByteSizeLong() const {
          const AggregateAllRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string group_by_columns = 4;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_group_by_columns().size());
              for (int i = 0, n = this_._internal_group_by_columns().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_group_by_columns().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec spec = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.spec_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AggregateAllRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AggregateAllRequest*>(&to_msg);
  auto& from = static_cast<const AggregateAllRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_group_by_columns()->MergeFrom(from._internal_group_by_columns());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.spec_ != nullptr);
      if (_this->_impl_.spec_ == nullptr) {
        _this->_impl_.spec_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec>(arena, *from._impl_.spec_);
      } else {
        _this->_impl_.spec_->MergeFrom(*from._impl_.spec_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AggregateAllRequest::CopyFrom(const AggregateAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggregateAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AggregateAllRequest::InternalSwap(AggregateAllRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.group_by_columns_.InternalSwap(&other->_impl_.group_by_columns_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregateAllRequest, _impl_.spec_)
      + sizeof(AggregateAllRequest::_impl_.spec_)
      - PROTOBUF_FIELD_OFFSET(AggregateAllRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata AggregateAllRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecApproximatePercentile::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AggSpec_AggSpecApproximatePercentile>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecApproximatePercentile, _impl_._has_bits_);
};

AggSpec_AggSpecApproximatePercentile::AggSpec_AggSpecApproximatePercentile(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile)
}
AggSpec_AggSpecApproximatePercentile::AggSpec_AggSpecApproximatePercentile(
    ::google::protobuf::Arena* arena, const AggSpec_AggSpecApproximatePercentile& from)
    : AggSpec_AggSpecApproximatePercentile(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecApproximatePercentile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AggSpec_AggSpecApproximatePercentile::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, percentile_),
           0,
           offsetof(Impl_, compression_) -
               offsetof(Impl_, percentile_) +
               sizeof(Impl_::compression_));
}
AggSpec_AggSpecApproximatePercentile::~AggSpec_AggSpecApproximatePercentile() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AggSpec_AggSpecApproximatePercentile::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecApproximatePercentile::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AggSpec_AggSpecApproximatePercentile_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecApproximatePercentile::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AggSpec_AggSpecApproximatePercentile>(),
            ::google::protobuf::Message::GetNewImpl<AggSpec_AggSpecApproximatePercentile>(),
            ::google::protobuf::Message::GetClearImpl<AggSpec_AggSpecApproximatePercentile>(), &AggSpec_AggSpecApproximatePercentile::ByteSizeLong,
                &AggSpec_AggSpecApproximatePercentile::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecApproximatePercentile, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecApproximatePercentile::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecApproximatePercentile::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> AggSpec_AggSpecApproximatePercentile::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecApproximatePercentile, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional double compression = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 0, 0, PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecApproximatePercentile, _impl_.compression_)}},
    // double percentile = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecApproximatePercentile, _impl_.percentile_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double percentile = 1;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecApproximatePercentile, _impl_.percentile_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // optional double compression = 2;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecApproximatePercentile, _impl_.compression_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AggSpec_AggSpecApproximatePercentile::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.percentile_ = 0;
  _impl_.compression_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AggSpec_AggSpecApproximatePercentile::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AggSpec_AggSpecApproximatePercentile& this_ = static_cast<const AggSpec_AggSpecApproximatePercentile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AggSpec_AggSpecApproximatePercentile::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AggSpec_AggSpecApproximatePercentile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double percentile = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_percentile()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_percentile(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional double compression = 2;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_compression(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AggSpec_AggSpecApproximatePercentile::ByteSizeLong(const MessageLite& base) {
          const AggSpec_AggSpecApproximatePercentile& this_ = static_cast<const AggSpec_AggSpecApproximatePercentile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AggSpec_AggSpecApproximatePercentile::ByteSizeLong() const {
          const AggSpec_AggSpecApproximatePercentile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // double percentile = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_percentile()) != 0) {
              total_size += 9;
            }
          }
           {
            // optional double compression = 2;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AggSpec_AggSpecApproximatePercentile::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecApproximatePercentile*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecApproximatePercentile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint64_t>(from._internal_percentile()) != 0) {
    _this->_impl_.percentile_ = from._impl_.percentile_;
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.compression_ = from._impl_.compression_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecApproximatePercentile::CopyFrom(const AggSpec_AggSpecApproximatePercentile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AggSpec_AggSpecApproximatePercentile::InternalSwap(AggSpec_AggSpecApproximatePercentile* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecApproximatePercentile, _impl_.compression_)
      + sizeof(AggSpec_AggSpecApproximatePercentile::_impl_.compression_)
      - PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecApproximatePercentile, _impl_.percentile_)>(
          reinterpret_cast<char*>(&_impl_.percentile_),
          reinterpret_cast<char*>(&other->_impl_.percentile_));
}

::google::protobuf::Metadata AggSpec_AggSpecApproximatePercentile::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecCountDistinct::_Internal {
 public:
};

AggSpec_AggSpecCountDistinct::AggSpec_AggSpecCountDistinct(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct)
}
AggSpec_AggSpecCountDistinct::AggSpec_AggSpecCountDistinct(
    ::google::protobuf::Arena* arena, const AggSpec_AggSpecCountDistinct& from)
    : AggSpec_AggSpecCountDistinct(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecCountDistinct::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AggSpec_AggSpecCountDistinct::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.count_nulls_ = {};
}
AggSpec_AggSpecCountDistinct::~AggSpec_AggSpecCountDistinct() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AggSpec_AggSpecCountDistinct::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecCountDistinct::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AggSpec_AggSpecCountDistinct_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecCountDistinct::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AggSpec_AggSpecCountDistinct>(),
            ::google::protobuf::Message::GetNewImpl<AggSpec_AggSpecCountDistinct>(),
            ::google::protobuf::Message::GetClearImpl<AggSpec_AggSpecCountDistinct>(), &AggSpec_AggSpecCountDistinct::ByteSizeLong,
                &AggSpec_AggSpecCountDistinct::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecCountDistinct, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecCountDistinct::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecCountDistinct::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> AggSpec_AggSpecCountDistinct::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool count_nulls = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AggSpec_AggSpecCountDistinct, _impl_.count_nulls_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecCountDistinct, _impl_.count_nulls_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool count_nulls = 1;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecCountDistinct, _impl_.count_nulls_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AggSpec_AggSpecCountDistinct::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.count_nulls_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AggSpec_AggSpecCountDistinct::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AggSpec_AggSpecCountDistinct& this_ = static_cast<const AggSpec_AggSpecCountDistinct&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AggSpec_AggSpecCountDistinct::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AggSpec_AggSpecCountDistinct& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool count_nulls = 1;
          if (this_._internal_count_nulls() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_count_nulls(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AggSpec_AggSpecCountDistinct::ByteSizeLong(const MessageLite& base) {
          const AggSpec_AggSpecCountDistinct& this_ = static_cast<const AggSpec_AggSpecCountDistinct&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AggSpec_AggSpecCountDistinct::ByteSizeLong() const {
          const AggSpec_AggSpecCountDistinct& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // bool count_nulls = 1;
            if (this_._internal_count_nulls() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AggSpec_AggSpecCountDistinct::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecCountDistinct*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecCountDistinct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count_nulls() != 0) {
    _this->_impl_.count_nulls_ = from._impl_.count_nulls_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecCountDistinct::CopyFrom(const AggSpec_AggSpecCountDistinct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AggSpec_AggSpecCountDistinct::InternalSwap(AggSpec_AggSpecCountDistinct* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.count_nulls_, other->_impl_.count_nulls_);
}

::google::protobuf::Metadata AggSpec_AggSpecCountDistinct::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecDistinct::_Internal {
 public:
};

AggSpec_AggSpecDistinct::AggSpec_AggSpecDistinct(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct)
}
AggSpec_AggSpecDistinct::AggSpec_AggSpecDistinct(
    ::google::protobuf::Arena* arena, const AggSpec_AggSpecDistinct& from)
    : AggSpec_AggSpecDistinct(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecDistinct::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AggSpec_AggSpecDistinct::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.include_nulls_ = {};
}
AggSpec_AggSpecDistinct::~AggSpec_AggSpecDistinct() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AggSpec_AggSpecDistinct::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecDistinct::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AggSpec_AggSpecDistinct_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecDistinct::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AggSpec_AggSpecDistinct>(),
            ::google::protobuf::Message::GetNewImpl<AggSpec_AggSpecDistinct>(),
            ::google::protobuf::Message::GetClearImpl<AggSpec_AggSpecDistinct>(), &AggSpec_AggSpecDistinct::ByteSizeLong,
                &AggSpec_AggSpecDistinct::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecDistinct, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecDistinct::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecDistinct::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> AggSpec_AggSpecDistinct::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool include_nulls = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AggSpec_AggSpecDistinct, _impl_.include_nulls_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecDistinct, _impl_.include_nulls_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool include_nulls = 1;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecDistinct, _impl_.include_nulls_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AggSpec_AggSpecDistinct::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.include_nulls_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AggSpec_AggSpecDistinct::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AggSpec_AggSpecDistinct& this_ = static_cast<const AggSpec_AggSpecDistinct&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AggSpec_AggSpecDistinct::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AggSpec_AggSpecDistinct& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool include_nulls = 1;
          if (this_._internal_include_nulls() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_include_nulls(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AggSpec_AggSpecDistinct::ByteSizeLong(const MessageLite& base) {
          const AggSpec_AggSpecDistinct& this_ = static_cast<const AggSpec_AggSpecDistinct&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AggSpec_AggSpecDistinct::ByteSizeLong() const {
          const AggSpec_AggSpecDistinct& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // bool include_nulls = 1;
            if (this_._internal_include_nulls() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AggSpec_AggSpecDistinct::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecDistinct*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecDistinct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_include_nulls() != 0) {
    _this->_impl_.include_nulls_ = from._impl_.include_nulls_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecDistinct::CopyFrom(const AggSpec_AggSpecDistinct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AggSpec_AggSpecDistinct::InternalSwap(AggSpec_AggSpecDistinct* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.include_nulls_, other->_impl_.include_nulls_);
}

::google::protobuf::Metadata AggSpec_AggSpecDistinct::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecFormula::_Internal {
 public:
};

AggSpec_AggSpecFormula::AggSpec_AggSpecFormula(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecFormula::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula& from_msg)
      : formula_(arena, from.formula_),
        param_token_(arena, from.param_token_),
        _cached_size_{0} {}

AggSpec_AggSpecFormula::AggSpec_AggSpecFormula(
    ::google::protobuf::Arena* arena,
    const AggSpec_AggSpecFormula& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec_AggSpecFormula* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecFormula::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : formula_(arena),
        param_token_(arena),
        _cached_size_{0} {}

inline void AggSpec_AggSpecFormula::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AggSpec_AggSpecFormula::~AggSpec_AggSpecFormula() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AggSpec_AggSpecFormula::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.formula_.Destroy();
  _impl_.param_token_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecFormula::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AggSpec_AggSpecFormula_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecFormula::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AggSpec_AggSpecFormula>(),
            ::google::protobuf::Message::GetNewImpl<AggSpec_AggSpecFormula>(),
            ::google::protobuf::Message::GetClearImpl<AggSpec_AggSpecFormula>(), &AggSpec_AggSpecFormula::ByteSizeLong,
                &AggSpec_AggSpecFormula::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecFormula, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecFormula::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecFormula::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 83, 2> AggSpec_AggSpecFormula::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string param_token = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecFormula, _impl_.param_token_)}},
    // string formula = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecFormula, _impl_.formula_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string formula = 1;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecFormula, _impl_.formula_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string param_token = 2;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecFormula, _impl_.param_token_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\70\7\13\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula"
    "formula"
    "param_token"
  }},
};

PROTOBUF_NOINLINE void AggSpec_AggSpecFormula::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.formula_.ClearToEmpty();
  _impl_.param_token_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AggSpec_AggSpecFormula::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AggSpec_AggSpecFormula& this_ = static_cast<const AggSpec_AggSpecFormula&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AggSpec_AggSpecFormula::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AggSpec_AggSpecFormula& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string formula = 1;
          if (!this_._internal_formula().empty()) {
            const std::string& _s = this_._internal_formula();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula.formula");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string param_token = 2;
          if (!this_._internal_param_token().empty()) {
            const std::string& _s = this_._internal_param_token();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula.param_token");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AggSpec_AggSpecFormula::ByteSizeLong(const MessageLite& base) {
          const AggSpec_AggSpecFormula& this_ = static_cast<const AggSpec_AggSpecFormula&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AggSpec_AggSpecFormula::ByteSizeLong() const {
          const AggSpec_AggSpecFormula& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string formula = 1;
            if (!this_._internal_formula().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_formula());
            }
            // string param_token = 2;
            if (!this_._internal_param_token().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_param_token());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AggSpec_AggSpecFormula::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecFormula*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecFormula&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_formula().empty()) {
    _this->_internal_set_formula(from._internal_formula());
  }
  if (!from._internal_param_token().empty()) {
    _this->_internal_set_param_token(from._internal_param_token());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecFormula::CopyFrom(const AggSpec_AggSpecFormula& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AggSpec_AggSpecFormula::InternalSwap(AggSpec_AggSpecFormula* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.formula_, &other->_impl_.formula_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.param_token_, &other->_impl_.param_token_, arena);
}

::google::protobuf::Metadata AggSpec_AggSpecFormula::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecMedian::_Internal {
 public:
};

AggSpec_AggSpecMedian::AggSpec_AggSpecMedian(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian)
}
AggSpec_AggSpecMedian::AggSpec_AggSpecMedian(
    ::google::protobuf::Arena* arena, const AggSpec_AggSpecMedian& from)
    : AggSpec_AggSpecMedian(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecMedian::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AggSpec_AggSpecMedian::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.average_evenly_divided_ = {};
}
AggSpec_AggSpecMedian::~AggSpec_AggSpecMedian() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AggSpec_AggSpecMedian::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecMedian::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AggSpec_AggSpecMedian_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecMedian::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AggSpec_AggSpecMedian>(),
            ::google::protobuf::Message::GetNewImpl<AggSpec_AggSpecMedian>(),
            ::google::protobuf::Message::GetClearImpl<AggSpec_AggSpecMedian>(), &AggSpec_AggSpecMedian::ByteSizeLong,
                &AggSpec_AggSpecMedian::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecMedian, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecMedian::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecMedian::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> AggSpec_AggSpecMedian::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool average_evenly_divided = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AggSpec_AggSpecMedian, _impl_.average_evenly_divided_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecMedian, _impl_.average_evenly_divided_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool average_evenly_divided = 1;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecMedian, _impl_.average_evenly_divided_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AggSpec_AggSpecMedian::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.average_evenly_divided_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AggSpec_AggSpecMedian::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AggSpec_AggSpecMedian& this_ = static_cast<const AggSpec_AggSpecMedian&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AggSpec_AggSpecMedian::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AggSpec_AggSpecMedian& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool average_evenly_divided = 1;
          if (this_._internal_average_evenly_divided() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_average_evenly_divided(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AggSpec_AggSpecMedian::ByteSizeLong(const MessageLite& base) {
          const AggSpec_AggSpecMedian& this_ = static_cast<const AggSpec_AggSpecMedian&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AggSpec_AggSpecMedian::ByteSizeLong() const {
          const AggSpec_AggSpecMedian& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // bool average_evenly_divided = 1;
            if (this_._internal_average_evenly_divided() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AggSpec_AggSpecMedian::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecMedian*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecMedian&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_average_evenly_divided() != 0) {
    _this->_impl_.average_evenly_divided_ = from._impl_.average_evenly_divided_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecMedian::CopyFrom(const AggSpec_AggSpecMedian& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AggSpec_AggSpecMedian::InternalSwap(AggSpec_AggSpecMedian* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.average_evenly_divided_, other->_impl_.average_evenly_divided_);
}

::google::protobuf::Metadata AggSpec_AggSpecMedian::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecPercentile::_Internal {
 public:
};

AggSpec_AggSpecPercentile::AggSpec_AggSpecPercentile(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile)
}
AggSpec_AggSpecPercentile::AggSpec_AggSpecPercentile(
    ::google::protobuf::Arena* arena, const AggSpec_AggSpecPercentile& from)
    : AggSpec_AggSpecPercentile(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecPercentile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AggSpec_AggSpecPercentile::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, percentile_),
           0,
           offsetof(Impl_, average_evenly_divided_) -
               offsetof(Impl_, percentile_) +
               sizeof(Impl_::average_evenly_divided_));
}
AggSpec_AggSpecPercentile::~AggSpec_AggSpecPercentile() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AggSpec_AggSpecPercentile::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecPercentile::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AggSpec_AggSpecPercentile_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecPercentile::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AggSpec_AggSpecPercentile>(),
            ::google::protobuf::Message::GetNewImpl<AggSpec_AggSpecPercentile>(),
            ::google::protobuf::Message::GetClearImpl<AggSpec_AggSpecPercentile>(), &AggSpec_AggSpecPercentile::ByteSizeLong,
                &AggSpec_AggSpecPercentile::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecPercentile, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecPercentile::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecPercentile::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> AggSpec_AggSpecPercentile::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool average_evenly_divided = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AggSpec_AggSpecPercentile, _impl_.average_evenly_divided_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecPercentile, _impl_.average_evenly_divided_)}},
    // double percentile = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecPercentile, _impl_.percentile_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double percentile = 1;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecPercentile, _impl_.percentile_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // bool average_evenly_divided = 2;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecPercentile, _impl_.average_evenly_divided_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AggSpec_AggSpecPercentile::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.percentile_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.average_evenly_divided_) -
      reinterpret_cast<char*>(&_impl_.percentile_)) + sizeof(_impl_.average_evenly_divided_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AggSpec_AggSpecPercentile::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AggSpec_AggSpecPercentile& this_ = static_cast<const AggSpec_AggSpecPercentile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AggSpec_AggSpecPercentile::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AggSpec_AggSpecPercentile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double percentile = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_percentile()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_percentile(), target);
          }

          // bool average_evenly_divided = 2;
          if (this_._internal_average_evenly_divided() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_average_evenly_divided(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AggSpec_AggSpecPercentile::ByteSizeLong(const MessageLite& base) {
          const AggSpec_AggSpecPercentile& this_ = static_cast<const AggSpec_AggSpecPercentile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AggSpec_AggSpecPercentile::ByteSizeLong() const {
          const AggSpec_AggSpecPercentile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // double percentile = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_percentile()) != 0) {
              total_size += 9;
            }
            // bool average_evenly_divided = 2;
            if (this_._internal_average_evenly_divided() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AggSpec_AggSpecPercentile::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecPercentile*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecPercentile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint64_t>(from._internal_percentile()) != 0) {
    _this->_impl_.percentile_ = from._impl_.percentile_;
  }
  if (from._internal_average_evenly_divided() != 0) {
    _this->_impl_.average_evenly_divided_ = from._impl_.average_evenly_divided_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecPercentile::CopyFrom(const AggSpec_AggSpecPercentile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AggSpec_AggSpecPercentile::InternalSwap(AggSpec_AggSpecPercentile* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecPercentile, _impl_.average_evenly_divided_)
      + sizeof(AggSpec_AggSpecPercentile::_impl_.average_evenly_divided_)
      - PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecPercentile, _impl_.percentile_)>(
          reinterpret_cast<char*>(&_impl_.percentile_),
          reinterpret_cast<char*>(&other->_impl_.percentile_));
}

::google::protobuf::Metadata AggSpec_AggSpecPercentile::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecSorted::_Internal {
 public:
};

AggSpec_AggSpecSorted::AggSpec_AggSpecSorted(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecSorted::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted& from_msg)
      : columns_{visibility, arena, from.columns_},
        _cached_size_{0} {}

AggSpec_AggSpecSorted::AggSpec_AggSpecSorted(
    ::google::protobuf::Arena* arena,
    const AggSpec_AggSpecSorted& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec_AggSpecSorted* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecSorted::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : columns_{visibility, arena},
        _cached_size_{0} {}

inline void AggSpec_AggSpecSorted::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AggSpec_AggSpecSorted::~AggSpec_AggSpecSorted() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AggSpec_AggSpecSorted::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecSorted::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AggSpec_AggSpecSorted_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecSorted::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AggSpec_AggSpecSorted>(),
            ::google::protobuf::Message::GetNewImpl<AggSpec_AggSpecSorted>(),
            ::google::protobuf::Message::GetClearImpl<AggSpec_AggSpecSorted>(), &AggSpec_AggSpecSorted::ByteSizeLong,
                &AggSpec_AggSpecSorted::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecSorted, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecSorted::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecSorted::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AggSpec_AggSpecSorted::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn columns = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecSorted, _impl_.columns_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn columns = 1;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecSorted, _impl_.columns_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSortedColumn>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void AggSpec_AggSpecSorted::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AggSpec_AggSpecSorted::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AggSpec_AggSpecSorted& this_ = static_cast<const AggSpec_AggSpecSorted&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AggSpec_AggSpecSorted::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AggSpec_AggSpecSorted& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn columns = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_columns_size());
               i < n; i++) {
            const auto& repfield = this_._internal_columns().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AggSpec_AggSpecSorted::ByteSizeLong(const MessageLite& base) {
          const AggSpec_AggSpecSorted& this_ = static_cast<const AggSpec_AggSpecSorted&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AggSpec_AggSpecSorted::ByteSizeLong() const {
          const AggSpec_AggSpecSorted& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn columns = 1;
             {
              total_size += 1UL * this_._internal_columns_size();
              for (const auto& msg : this_._internal_columns()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AggSpec_AggSpecSorted::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecSorted*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecSorted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_columns()->MergeFrom(
      from._internal_columns());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecSorted::CopyFrom(const AggSpec_AggSpecSorted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AggSpec_AggSpecSorted::InternalSwap(AggSpec_AggSpecSorted* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.columns_.InternalSwap(&other->_impl_.columns_);
}

::google::protobuf::Metadata AggSpec_AggSpecSorted::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecSortedColumn::_Internal {
 public:
};

AggSpec_AggSpecSortedColumn::AggSpec_AggSpecSortedColumn(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecSortedColumn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSortedColumn& from_msg)
      : column_name_(arena, from.column_name_),
        _cached_size_{0} {}

AggSpec_AggSpecSortedColumn::AggSpec_AggSpecSortedColumn(
    ::google::protobuf::Arena* arena,
    const AggSpec_AggSpecSortedColumn& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec_AggSpecSortedColumn* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecSortedColumn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : column_name_(arena),
        _cached_size_{0} {}

inline void AggSpec_AggSpecSortedColumn::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AggSpec_AggSpecSortedColumn::~AggSpec_AggSpecSortedColumn() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AggSpec_AggSpecSortedColumn::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.column_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecSortedColumn::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AggSpec_AggSpecSortedColumn_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecSortedColumn::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AggSpec_AggSpecSortedColumn>(),
            ::google::protobuf::Message::GetNewImpl<AggSpec_AggSpecSortedColumn>(),
            ::google::protobuf::Message::GetClearImpl<AggSpec_AggSpecSortedColumn>(), &AggSpec_AggSpecSortedColumn::ByteSizeLong,
                &AggSpec_AggSpecSortedColumn::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecSortedColumn, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecSortedColumn::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecSortedColumn::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 81, 2> AggSpec_AggSpecSortedColumn::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSortedColumn>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string column_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecSortedColumn, _impl_.column_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string column_name = 1;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecSortedColumn, _impl_.column_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\75\13\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn"
    "column_name"
  }},
};

PROTOBUF_NOINLINE void AggSpec_AggSpecSortedColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AggSpec_AggSpecSortedColumn::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AggSpec_AggSpecSortedColumn& this_ = static_cast<const AggSpec_AggSpecSortedColumn&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AggSpec_AggSpecSortedColumn::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AggSpec_AggSpecSortedColumn& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string column_name = 1;
          if (!this_._internal_column_name().empty()) {
            const std::string& _s = this_._internal_column_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn.column_name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AggSpec_AggSpecSortedColumn::ByteSizeLong(const MessageLite& base) {
          const AggSpec_AggSpecSortedColumn& this_ = static_cast<const AggSpec_AggSpecSortedColumn&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AggSpec_AggSpecSortedColumn::ByteSizeLong() const {
          const AggSpec_AggSpecSortedColumn& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string column_name = 1;
            if (!this_._internal_column_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_column_name());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AggSpec_AggSpecSortedColumn::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecSortedColumn*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecSortedColumn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecSortedColumn::CopyFrom(const AggSpec_AggSpecSortedColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AggSpec_AggSpecSortedColumn::InternalSwap(AggSpec_AggSpecSortedColumn* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.column_name_, &other->_impl_.column_name_, arena);
}

::google::protobuf::Metadata AggSpec_AggSpecSortedColumn::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecTDigest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AggSpec_AggSpecTDigest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecTDigest, _impl_._has_bits_);
};

AggSpec_AggSpecTDigest::AggSpec_AggSpecTDigest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest)
}
AggSpec_AggSpecTDigest::AggSpec_AggSpecTDigest(
    ::google::protobuf::Arena* arena, const AggSpec_AggSpecTDigest& from)
    : AggSpec_AggSpecTDigest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecTDigest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AggSpec_AggSpecTDigest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.compression_ = {};
}
AggSpec_AggSpecTDigest::~AggSpec_AggSpecTDigest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AggSpec_AggSpecTDigest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecTDigest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AggSpec_AggSpecTDigest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecTDigest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AggSpec_AggSpecTDigest>(),
            ::google::protobuf::Message::GetNewImpl<AggSpec_AggSpecTDigest>(),
            ::google::protobuf::Message::GetClearImpl<AggSpec_AggSpecTDigest>(), &AggSpec_AggSpecTDigest::ByteSizeLong,
                &AggSpec_AggSpecTDigest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecTDigest, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecTDigest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecTDigest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> AggSpec_AggSpecTDigest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecTDigest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional double compression = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecTDigest, _impl_.compression_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional double compression = 1;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecTDigest, _impl_.compression_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AggSpec_AggSpecTDigest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.compression_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AggSpec_AggSpecTDigest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AggSpec_AggSpecTDigest& this_ = static_cast<const AggSpec_AggSpecTDigest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AggSpec_AggSpecTDigest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AggSpec_AggSpecTDigest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional double compression = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_compression(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AggSpec_AggSpecTDigest::ByteSizeLong(const MessageLite& base) {
          const AggSpec_AggSpecTDigest& this_ = static_cast<const AggSpec_AggSpecTDigest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AggSpec_AggSpecTDigest::ByteSizeLong() const {
          const AggSpec_AggSpecTDigest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // optional double compression = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AggSpec_AggSpecTDigest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecTDigest*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecTDigest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.compression_ = from._impl_.compression_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecTDigest::CopyFrom(const AggSpec_AggSpecTDigest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AggSpec_AggSpecTDigest::InternalSwap(AggSpec_AggSpecTDigest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.compression_, other->_impl_.compression_);
}

::google::protobuf::Metadata AggSpec_AggSpecTDigest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecUnique::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AggSpec_AggSpecUnique>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecUnique, _impl_._has_bits_);
};

AggSpec_AggSpecUnique::AggSpec_AggSpecUnique(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecUnique::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AggSpec_AggSpecUnique::AggSpec_AggSpecUnique(
    ::google::protobuf::Arena* arena,
    const AggSpec_AggSpecUnique& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec_AggSpecUnique* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.non_unique_sentinel_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel>(
                              arena, *from._impl_.non_unique_sentinel_)
                        : nullptr;
  _impl_.include_nulls_ = from._impl_.include_nulls_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecUnique::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AggSpec_AggSpecUnique::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, non_unique_sentinel_),
           0,
           offsetof(Impl_, include_nulls_) -
               offsetof(Impl_, non_unique_sentinel_) +
               sizeof(Impl_::include_nulls_));
}
AggSpec_AggSpecUnique::~AggSpec_AggSpecUnique() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AggSpec_AggSpecUnique::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.non_unique_sentinel_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecUnique::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AggSpec_AggSpecUnique_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecUnique::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AggSpec_AggSpecUnique>(),
            ::google::protobuf::Message::GetNewImpl<AggSpec_AggSpecUnique>(),
            ::google::protobuf::Message::GetClearImpl<AggSpec_AggSpecUnique>(), &AggSpec_AggSpecUnique::ByteSizeLong,
                &AggSpec_AggSpecUnique::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecUnique, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecUnique::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecUnique::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> AggSpec_AggSpecUnique::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecUnique, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel non_unique_sentinel = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecUnique, _impl_.non_unique_sentinel_)}},
    // bool include_nulls = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AggSpec_AggSpecUnique, _impl_.include_nulls_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecUnique, _impl_.include_nulls_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool include_nulls = 1;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecUnique, _impl_.include_nulls_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel non_unique_sentinel = 2;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecUnique, _impl_.non_unique_sentinel_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void AggSpec_AggSpecUnique::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.non_unique_sentinel_ != nullptr);
    _impl_.non_unique_sentinel_->Clear();
  }
  _impl_.include_nulls_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AggSpec_AggSpecUnique::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AggSpec_AggSpecUnique& this_ = static_cast<const AggSpec_AggSpecUnique&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AggSpec_AggSpecUnique::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AggSpec_AggSpecUnique& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool include_nulls = 1;
          if (this_._internal_include_nulls() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_include_nulls(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel non_unique_sentinel = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.non_unique_sentinel_, this_._impl_.non_unique_sentinel_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AggSpec_AggSpecUnique::ByteSizeLong(const MessageLite& base) {
          const AggSpec_AggSpecUnique& this_ = static_cast<const AggSpec_AggSpecUnique&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AggSpec_AggSpecUnique::ByteSizeLong() const {
          const AggSpec_AggSpecUnique& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel non_unique_sentinel = 2;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.non_unique_sentinel_);
            }
          }
           {
            // bool include_nulls = 1;
            if (this_._internal_include_nulls() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AggSpec_AggSpecUnique::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecUnique*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecUnique&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.non_unique_sentinel_ != nullptr);
    if (_this->_impl_.non_unique_sentinel_ == nullptr) {
      _this->_impl_.non_unique_sentinel_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel>(arena, *from._impl_.non_unique_sentinel_);
    } else {
      _this->_impl_.non_unique_sentinel_->MergeFrom(*from._impl_.non_unique_sentinel_);
    }
  }
  if (from._internal_include_nulls() != 0) {
    _this->_impl_.include_nulls_ = from._impl_.include_nulls_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecUnique::CopyFrom(const AggSpec_AggSpecUnique& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AggSpec_AggSpecUnique::InternalSwap(AggSpec_AggSpecUnique* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecUnique, _impl_.include_nulls_)
      + sizeof(AggSpec_AggSpecUnique::_impl_.include_nulls_)
      - PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecUnique, _impl_.non_unique_sentinel_)>(
          reinterpret_cast<char*>(&_impl_.non_unique_sentinel_),
          reinterpret_cast<char*>(&other->_impl_.non_unique_sentinel_));
}

::google::protobuf::Metadata AggSpec_AggSpecUnique::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecNonUniqueSentinel::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel, _impl_._oneof_case_);
};

AggSpec_AggSpecNonUniqueSentinel::AggSpec_AggSpecNonUniqueSentinel(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecNonUniqueSentinel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel& from_msg)
      : type_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

AggSpec_AggSpecNonUniqueSentinel::AggSpec_AggSpecNonUniqueSentinel(
    ::google::protobuf::Arena* arena,
    const AggSpec_AggSpecNonUniqueSentinel& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec_AggSpecNonUniqueSentinel* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (type_case()) {
    case TYPE_NOT_SET:
      break;
      case kNullValue:
        _impl_.type_.null_value_ = from._impl_.type_.null_value_;
        break;
      case kStringValue:
        new (&_impl_.type_.string_value_) decltype(_impl_.type_.string_value_){arena, from._impl_.type_.string_value_};
        break;
      case kIntValue:
        _impl_.type_.int_value_ = from._impl_.type_.int_value_;
        break;
      case kLongValue:
        _impl_.type_.long_value_ = from._impl_.type_.long_value_;
        break;
      case kFloatValue:
        _impl_.type_.float_value_ = from._impl_.type_.float_value_;
        break;
      case kDoubleValue:
        _impl_.type_.double_value_ = from._impl_.type_.double_value_;
        break;
      case kBoolValue:
        _impl_.type_.bool_value_ = from._impl_.type_.bool_value_;
        break;
      case kByteValue:
        _impl_.type_.byte_value_ = from._impl_.type_.byte_value_;
        break;
      case kShortValue:
        _impl_.type_.short_value_ = from._impl_.type_.short_value_;
        break;
      case kCharValue:
        _impl_.type_.char_value_ = from._impl_.type_.char_value_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecNonUniqueSentinel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : type_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void AggSpec_AggSpecNonUniqueSentinel::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AggSpec_AggSpecNonUniqueSentinel::~AggSpec_AggSpecNonUniqueSentinel() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AggSpec_AggSpecNonUniqueSentinel::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
  _impl_.~Impl_();
}

void AggSpec_AggSpecNonUniqueSentinel::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (type_case()) {
    case kNullValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      _impl_.type_.string_value_.Destroy();
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kLongValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kByteValue: {
      // No need to clear
      break;
    }
    case kShortValue: {
      // No need to clear
      break;
    }
    case kCharValue: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecNonUniqueSentinel::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AggSpec_AggSpecNonUniqueSentinel_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecNonUniqueSentinel::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AggSpec_AggSpecNonUniqueSentinel>(),
            ::google::protobuf::Message::GetNewImpl<AggSpec_AggSpecNonUniqueSentinel>(),
            ::google::protobuf::Message::GetClearImpl<AggSpec_AggSpecNonUniqueSentinel>(), &AggSpec_AggSpecNonUniqueSentinel::ByteSizeLong,
                &AggSpec_AggSpecNonUniqueSentinel::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecNonUniqueSentinel, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecNonUniqueSentinel::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecNonUniqueSentinel::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 10, 0, 95, 2> AggSpec_AggSpecNonUniqueSentinel::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecNonUniqueSentinel>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.NullValue null_value = 1;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecNonUniqueSentinel, _impl_.type_.null_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
    // string string_value = 2;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecNonUniqueSentinel, _impl_.type_.string_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // sint32 int_value = 3;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecNonUniqueSentinel, _impl_.type_.int_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kSInt32)},
    // sint64 long_value = 4 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecNonUniqueSentinel, _impl_.type_.long_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kSInt64)},
    // float float_value = 5;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecNonUniqueSentinel, _impl_.type_.float_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kFloat)},
    // double double_value = 6;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecNonUniqueSentinel, _impl_.type_.double_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
    // bool bool_value = 7;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecNonUniqueSentinel, _impl_.type_.bool_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // sint32 byte_value = 8;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecNonUniqueSentinel, _impl_.type_.byte_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kSInt32)},
    // sint32 short_value = 9;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecNonUniqueSentinel, _impl_.type_.short_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kSInt32)},
    // sint32 char_value = 10;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecNonUniqueSentinel, _impl_.type_.char_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kSInt32)},
  }},
  // no aux_entries
  {{
    "\102\0\14\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel"
    "string_value"
  }},
};

PROTOBUF_NOINLINE void AggSpec_AggSpecNonUniqueSentinel::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AggSpec_AggSpecNonUniqueSentinel::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AggSpec_AggSpecNonUniqueSentinel& this_ = static_cast<const AggSpec_AggSpecNonUniqueSentinel&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AggSpec_AggSpecNonUniqueSentinel::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AggSpec_AggSpecNonUniqueSentinel& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.type_case()) {
            case kNullValue: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteEnumToArray(
                  1, this_._internal_null_value(), target);
              break;
            }
            case kStringValue: {
              const std::string& _s = this_._internal_string_value();
              ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                  _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel.string_value");
              target = stream->WriteStringMaybeAliased(2, _s, target);
              break;
            }
            case kIntValue: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                  3, this_._internal_int_value(), target);
              break;
            }
            case kLongValue: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
                  4, this_._internal_long_value(), target);
              break;
            }
            case kFloatValue: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteFloatToArray(
                  5, this_._internal_float_value(), target);
              break;
            }
            case kDoubleValue: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                  6, this_._internal_double_value(), target);
              break;
            }
            case kBoolValue: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteBoolToArray(
                  7, this_._internal_bool_value(), target);
              break;
            }
            case kByteValue: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                  8, this_._internal_byte_value(), target);
              break;
            }
            case kShortValue: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                  9, this_._internal_short_value(), target);
              break;
            }
            case kCharValue: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                  10, this_._internal_char_value(), target);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AggSpec_AggSpecNonUniqueSentinel::ByteSizeLong(const MessageLite& base) {
          const AggSpec_AggSpecNonUniqueSentinel& this_ = static_cast<const AggSpec_AggSpecNonUniqueSentinel&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AggSpec_AggSpecNonUniqueSentinel::ByteSizeLong() const {
          const AggSpec_AggSpecNonUniqueSentinel& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.type_case()) {
            // .io.deephaven.proto.backplane.grpc.NullValue null_value = 1;
            case kNullValue: {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_null_value());
              break;
            }
            // string string_value = 2;
            case kStringValue: {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_string_value());
              break;
            }
            // sint32 int_value = 3;
            case kIntValue: {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_int_value());
              break;
            }
            // sint64 long_value = 4 [jstype = JS_STRING];
            case kLongValue: {
              total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
                  this_._internal_long_value());
              break;
            }
            // float float_value = 5;
            case kFloatValue: {
              total_size += 5;
              break;
            }
            // double double_value = 6;
            case kDoubleValue: {
              total_size += 9;
              break;
            }
            // bool bool_value = 7;
            case kBoolValue: {
              total_size += 2;
              break;
            }
            // sint32 byte_value = 8;
            case kByteValue: {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_byte_value());
              break;
            }
            // sint32 short_value = 9;
            case kShortValue: {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_short_value());
              break;
            }
            // sint32 char_value = 10;
            case kCharValue: {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_char_value());
              break;
            }
            case TYPE_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AggSpec_AggSpecNonUniqueSentinel::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecNonUniqueSentinel*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecNonUniqueSentinel&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_type();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kNullValue: {
        _this->_impl_.type_.null_value_ = from._impl_.type_.null_value_;
        break;
      }
      case kStringValue: {
        if (oneof_needs_init) {
          _this->_impl_.type_.string_value_.InitDefault();
        }
        _this->_impl_.type_.string_value_.Set(from._internal_string_value(), arena);
        break;
      }
      case kIntValue: {
        _this->_impl_.type_.int_value_ = from._impl_.type_.int_value_;
        break;
      }
      case kLongValue: {
        _this->_impl_.type_.long_value_ = from._impl_.type_.long_value_;
        break;
      }
      case kFloatValue: {
        _this->_impl_.type_.float_value_ = from._impl_.type_.float_value_;
        break;
      }
      case kDoubleValue: {
        _this->_impl_.type_.double_value_ = from._impl_.type_.double_value_;
        break;
      }
      case kBoolValue: {
        _this->_impl_.type_.bool_value_ = from._impl_.type_.bool_value_;
        break;
      }
      case kByteValue: {
        _this->_impl_.type_.byte_value_ = from._impl_.type_.byte_value_;
        break;
      }
      case kShortValue: {
        _this->_impl_.type_.short_value_ = from._impl_.type_.short_value_;
        break;
      }
      case kCharValue: {
        _this->_impl_.type_.char_value_ = from._impl_.type_.char_value_;
        break;
      }
      case TYPE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecNonUniqueSentinel::CopyFrom(const AggSpec_AggSpecNonUniqueSentinel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AggSpec_AggSpecNonUniqueSentinel::InternalSwap(AggSpec_AggSpecNonUniqueSentinel* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AggSpec_AggSpecNonUniqueSentinel::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecWeighted::_Internal {
 public:
};

AggSpec_AggSpecWeighted::AggSpec_AggSpecWeighted(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecWeighted::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted& from_msg)
      : weight_column_(arena, from.weight_column_),
        _cached_size_{0} {}

AggSpec_AggSpecWeighted::AggSpec_AggSpecWeighted(
    ::google::protobuf::Arena* arena,
    const AggSpec_AggSpecWeighted& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec_AggSpecWeighted* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
}
inline PROTOBUF_NDEBUG_INLINE AggSpec_AggSpecWeighted::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : weight_column_(arena),
        _cached_size_{0} {}

inline void AggSpec_AggSpecWeighted::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AggSpec_AggSpecWeighted::~AggSpec_AggSpecWeighted() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AggSpec_AggSpecWeighted::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.weight_column_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecWeighted::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AggSpec_AggSpecWeighted_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecWeighted::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AggSpec_AggSpecWeighted>(),
            ::google::protobuf::Message::GetNewImpl<AggSpec_AggSpecWeighted>(),
            ::google::protobuf::Message::GetClearImpl<AggSpec_AggSpecWeighted>(), &AggSpec_AggSpecWeighted::ByteSizeLong,
                &AggSpec_AggSpecWeighted::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecWeighted, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecWeighted::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecWeighted::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 79, 2> AggSpec_AggSpecWeighted::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string weight_column = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecWeighted, _impl_.weight_column_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string weight_column = 1;
    {PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecWeighted, _impl_.weight_column_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\71\15\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted"
    "weight_column"
  }},
};

PROTOBUF_NOINLINE void AggSpec_AggSpecWeighted::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.weight_column_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AggSpec_AggSpecWeighted::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AggSpec_AggSpecWeighted& this_ = static_cast<const AggSpec_AggSpecWeighted&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AggSpec_AggSpecWeighted::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AggSpec_AggSpecWeighted& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string weight_column = 1;
          if (!this_._internal_weight_column().empty()) {
            const std::string& _s = this_._internal_weight_column();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted.weight_column");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AggSpec_AggSpecWeighted::ByteSizeLong(const MessageLite& base) {
          const AggSpec_AggSpecWeighted& this_ = static_cast<const AggSpec_AggSpecWeighted&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AggSpec_AggSpecWeighted::ByteSizeLong() const {
          const AggSpec_AggSpecWeighted& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string weight_column = 1;
            if (!this_._internal_weight_column().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_weight_column());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AggSpec_AggSpecWeighted::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AggSpec_AggSpecWeighted*>(&to_msg);
  auto& from = static_cast<const AggSpec_AggSpecWeighted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_weight_column().empty()) {
    _this->_internal_set_weight_column(from._internal_weight_column());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec_AggSpecWeighted::CopyFrom(const AggSpec_AggSpecWeighted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AggSpec_AggSpecWeighted::InternalSwap(AggSpec_AggSpecWeighted* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.weight_column_, &other->_impl_.weight_column_, arena);
}

::google::protobuf::Metadata AggSpec_AggSpecWeighted::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecAbsSum::_Internal {
 public:
};

AggSpec_AggSpecAbsSum::AggSpec_AggSpecAbsSum(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAbsSum)
}
AggSpec_AggSpecAbsSum::AggSpec_AggSpecAbsSum(
    ::google::protobuf::Arena* arena,
    const AggSpec_AggSpecAbsSum& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec_AggSpecAbsSum* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAbsSum)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecAbsSum::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_AggSpec_AggSpecAbsSum_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecAbsSum::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<AggSpec_AggSpecAbsSum>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<AggSpec_AggSpecAbsSum>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<AggSpec_AggSpecAbsSum>(), &AggSpec_AggSpecAbsSum::ByteSizeLong,
                &AggSpec_AggSpecAbsSum::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecAbsSum, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecAbsSum::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecAbsSum::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> AggSpec_AggSpecAbsSum::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAbsSum>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata AggSpec_AggSpecAbsSum::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecAvg::_Internal {
 public:
};

AggSpec_AggSpecAvg::AggSpec_AggSpecAvg(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAvg)
}
AggSpec_AggSpecAvg::AggSpec_AggSpecAvg(
    ::google::protobuf::Arena* arena,
    const AggSpec_AggSpecAvg& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec_AggSpecAvg* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAvg)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecAvg::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_AggSpec_AggSpecAvg_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecAvg::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<AggSpec_AggSpecAvg>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<AggSpec_AggSpecAvg>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<AggSpec_AggSpecAvg>(), &AggSpec_AggSpecAvg::ByteSizeLong,
                &AggSpec_AggSpecAvg::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecAvg, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecAvg::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecAvg::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> AggSpec_AggSpecAvg::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAvg>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata AggSpec_AggSpecAvg::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecFirst::_Internal {
 public:
};

AggSpec_AggSpecFirst::AggSpec_AggSpecFirst(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFirst)
}
AggSpec_AggSpecFirst::AggSpec_AggSpecFirst(
    ::google::protobuf::Arena* arena,
    const AggSpec_AggSpecFirst& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec_AggSpecFirst* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFirst)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecFirst::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_AggSpec_AggSpecFirst_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecFirst::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<AggSpec_AggSpecFirst>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<AggSpec_AggSpecFirst>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<AggSpec_AggSpecFirst>(), &AggSpec_AggSpecFirst::ByteSizeLong,
                &AggSpec_AggSpecFirst::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecFirst, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecFirst::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecFirst::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> AggSpec_AggSpecFirst::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFirst>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata AggSpec_AggSpecFirst::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecFreeze::_Internal {
 public:
};

AggSpec_AggSpecFreeze::AggSpec_AggSpecFreeze(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFreeze)
}
AggSpec_AggSpecFreeze::AggSpec_AggSpecFreeze(
    ::google::protobuf::Arena* arena,
    const AggSpec_AggSpecFreeze& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec_AggSpecFreeze* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFreeze)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecFreeze::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_AggSpec_AggSpecFreeze_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecFreeze::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<AggSpec_AggSpecFreeze>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<AggSpec_AggSpecFreeze>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<AggSpec_AggSpecFreeze>(), &AggSpec_AggSpecFreeze::ByteSizeLong,
                &AggSpec_AggSpecFreeze::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecFreeze, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecFreeze::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecFreeze::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> AggSpec_AggSpecFreeze::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFreeze>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata AggSpec_AggSpecFreeze::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecGroup::_Internal {
 public:
};

AggSpec_AggSpecGroup::AggSpec_AggSpecGroup(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecGroup)
}
AggSpec_AggSpecGroup::AggSpec_AggSpecGroup(
    ::google::protobuf::Arena* arena,
    const AggSpec_AggSpecGroup& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec_AggSpecGroup* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecGroup)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecGroup::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_AggSpec_AggSpecGroup_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecGroup::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<AggSpec_AggSpecGroup>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<AggSpec_AggSpecGroup>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<AggSpec_AggSpecGroup>(), &AggSpec_AggSpecGroup::ByteSizeLong,
                &AggSpec_AggSpecGroup::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecGroup, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecGroup::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecGroup::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> AggSpec_AggSpecGroup::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecGroup>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata AggSpec_AggSpecGroup::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecLast::_Internal {
 public:
};

AggSpec_AggSpecLast::AggSpec_AggSpecLast(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecLast)
}
AggSpec_AggSpecLast::AggSpec_AggSpecLast(
    ::google::protobuf::Arena* arena,
    const AggSpec_AggSpecLast& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec_AggSpecLast* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecLast)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecLast::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_AggSpec_AggSpecLast_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecLast::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<AggSpec_AggSpecLast>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<AggSpec_AggSpecLast>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<AggSpec_AggSpecLast>(), &AggSpec_AggSpecLast::ByteSizeLong,
                &AggSpec_AggSpecLast::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecLast, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecLast::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecLast::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> AggSpec_AggSpecLast::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecLast>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata AggSpec_AggSpecLast::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecMax::_Internal {
 public:
};

AggSpec_AggSpecMax::AggSpec_AggSpecMax(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMax)
}
AggSpec_AggSpecMax::AggSpec_AggSpecMax(
    ::google::protobuf::Arena* arena,
    const AggSpec_AggSpecMax& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec_AggSpecMax* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMax)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecMax::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_AggSpec_AggSpecMax_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecMax::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<AggSpec_AggSpecMax>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<AggSpec_AggSpecMax>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<AggSpec_AggSpecMax>(), &AggSpec_AggSpecMax::ByteSizeLong,
                &AggSpec_AggSpecMax::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecMax, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecMax::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecMax::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> AggSpec_AggSpecMax::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMax>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata AggSpec_AggSpecMax::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecMin::_Internal {
 public:
};

AggSpec_AggSpecMin::AggSpec_AggSpecMin(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMin)
}
AggSpec_AggSpecMin::AggSpec_AggSpecMin(
    ::google::protobuf::Arena* arena,
    const AggSpec_AggSpecMin& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec_AggSpecMin* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMin)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecMin::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_AggSpec_AggSpecMin_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecMin::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<AggSpec_AggSpecMin>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<AggSpec_AggSpecMin>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<AggSpec_AggSpecMin>(), &AggSpec_AggSpecMin::ByteSizeLong,
                &AggSpec_AggSpecMin::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecMin, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecMin::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecMin::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> AggSpec_AggSpecMin::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMin>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata AggSpec_AggSpecMin::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecStd::_Internal {
 public:
};

AggSpec_AggSpecStd::AggSpec_AggSpecStd(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecStd)
}
AggSpec_AggSpecStd::AggSpec_AggSpecStd(
    ::google::protobuf::Arena* arena,
    const AggSpec_AggSpecStd& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec_AggSpecStd* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecStd)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecStd::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_AggSpec_AggSpecStd_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecStd::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<AggSpec_AggSpecStd>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<AggSpec_AggSpecStd>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<AggSpec_AggSpecStd>(), &AggSpec_AggSpecStd::ByteSizeLong,
                &AggSpec_AggSpecStd::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecStd, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecStd::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecStd::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> AggSpec_AggSpecStd::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecStd>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata AggSpec_AggSpecStd::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecSum::_Internal {
 public:
};

AggSpec_AggSpecSum::AggSpec_AggSpecSum(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSum)
}
AggSpec_AggSpecSum::AggSpec_AggSpecSum(
    ::google::protobuf::Arena* arena,
    const AggSpec_AggSpecSum& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec_AggSpecSum* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSum)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecSum::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_AggSpec_AggSpecSum_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecSum::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<AggSpec_AggSpecSum>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<AggSpec_AggSpecSum>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<AggSpec_AggSpecSum>(), &AggSpec_AggSpecSum::ByteSizeLong,
                &AggSpec_AggSpecSum::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecSum, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecSum::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecSum::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> AggSpec_AggSpecSum::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSum>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata AggSpec_AggSpecSum::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec_AggSpecVar::_Internal {
 public:
};

AggSpec_AggSpecVar::AggSpec_AggSpecVar(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecVar)
}
AggSpec_AggSpecVar::AggSpec_AggSpecVar(
    ::google::protobuf::Arena* arena,
    const AggSpec_AggSpecVar& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec_AggSpecVar* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec.AggSpecVar)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec_AggSpecVar::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_AggSpec_AggSpecVar_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec_AggSpecVar::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<AggSpec_AggSpecVar>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<AggSpec_AggSpecVar>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<AggSpec_AggSpecVar>(), &AggSpec_AggSpecVar::ByteSizeLong,
                &AggSpec_AggSpecVar::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec_AggSpecVar, _impl_._cached_size_),
            false,
        },
        &AggSpec_AggSpecVar::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec_AggSpecVar::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> AggSpec_AggSpecVar::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecVar>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata AggSpec_AggSpecVar::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggSpec::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::AggSpec, _impl_._oneof_case_);
};

void AggSpec::set_allocated_abs_sum(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAbsSum* abs_sum) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (abs_sum) {
    ::google::protobuf::Arena* submessage_arena = abs_sum->GetArena();
    if (message_arena != submessage_arena) {
      abs_sum = ::google::protobuf::internal::GetOwnedMessage(message_arena, abs_sum, submessage_arena);
    }
    set_has_abs_sum();
    _impl_.type_.abs_sum_ = abs_sum;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.abs_sum)
}
void AggSpec::set_allocated_approximate_percentile(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile* approximate_percentile) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (approximate_percentile) {
    ::google::protobuf::Arena* submessage_arena = approximate_percentile->GetArena();
    if (message_arena != submessage_arena) {
      approximate_percentile = ::google::protobuf::internal::GetOwnedMessage(message_arena, approximate_percentile, submessage_arena);
    }
    set_has_approximate_percentile();
    _impl_.type_.approximate_percentile_ = approximate_percentile;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.approximate_percentile)
}
void AggSpec::set_allocated_avg(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAvg* avg) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (avg) {
    ::google::protobuf::Arena* submessage_arena = avg->GetArena();
    if (message_arena != submessage_arena) {
      avg = ::google::protobuf::internal::GetOwnedMessage(message_arena, avg, submessage_arena);
    }
    set_has_avg();
    _impl_.type_.avg_ = avg;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.avg)
}
void AggSpec::set_allocated_count_distinct(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct* count_distinct) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (count_distinct) {
    ::google::protobuf::Arena* submessage_arena = count_distinct->GetArena();
    if (message_arena != submessage_arena) {
      count_distinct = ::google::protobuf::internal::GetOwnedMessage(message_arena, count_distinct, submessage_arena);
    }
    set_has_count_distinct();
    _impl_.type_.count_distinct_ = count_distinct;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.count_distinct)
}
void AggSpec::set_allocated_distinct(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct* distinct) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (distinct) {
    ::google::protobuf::Arena* submessage_arena = distinct->GetArena();
    if (message_arena != submessage_arena) {
      distinct = ::google::protobuf::internal::GetOwnedMessage(message_arena, distinct, submessage_arena);
    }
    set_has_distinct();
    _impl_.type_.distinct_ = distinct;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.distinct)
}
void AggSpec::set_allocated_first(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFirst* first) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (first) {
    ::google::protobuf::Arena* submessage_arena = first->GetArena();
    if (message_arena != submessage_arena) {
      first = ::google::protobuf::internal::GetOwnedMessage(message_arena, first, submessage_arena);
    }
    set_has_first();
    _impl_.type_.first_ = first;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.first)
}
void AggSpec::set_allocated_formula(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula* formula) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (formula) {
    ::google::protobuf::Arena* submessage_arena = formula->GetArena();
    if (message_arena != submessage_arena) {
      formula = ::google::protobuf::internal::GetOwnedMessage(message_arena, formula, submessage_arena);
    }
    set_has_formula();
    _impl_.type_.formula_ = formula;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.formula)
}
void AggSpec::set_allocated_freeze(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFreeze* freeze) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (freeze) {
    ::google::protobuf::Arena* submessage_arena = freeze->GetArena();
    if (message_arena != submessage_arena) {
      freeze = ::google::protobuf::internal::GetOwnedMessage(message_arena, freeze, submessage_arena);
    }
    set_has_freeze();
    _impl_.type_.freeze_ = freeze;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.freeze)
}
void AggSpec::set_allocated_group(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecGroup* group) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (group) {
    ::google::protobuf::Arena* submessage_arena = group->GetArena();
    if (message_arena != submessage_arena) {
      group = ::google::protobuf::internal::GetOwnedMessage(message_arena, group, submessage_arena);
    }
    set_has_group();
    _impl_.type_.group_ = group;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.group)
}
void AggSpec::set_allocated_last(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecLast* last) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (last) {
    ::google::protobuf::Arena* submessage_arena = last->GetArena();
    if (message_arena != submessage_arena) {
      last = ::google::protobuf::internal::GetOwnedMessage(message_arena, last, submessage_arena);
    }
    set_has_last();
    _impl_.type_.last_ = last;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.last)
}
void AggSpec::set_allocated_max(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMax* max) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (max) {
    ::google::protobuf::Arena* submessage_arena = max->GetArena();
    if (message_arena != submessage_arena) {
      max = ::google::protobuf::internal::GetOwnedMessage(message_arena, max, submessage_arena);
    }
    set_has_max();
    _impl_.type_.max_ = max;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.max)
}
void AggSpec::set_allocated_median(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian* median) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (median) {
    ::google::protobuf::Arena* submessage_arena = median->GetArena();
    if (message_arena != submessage_arena) {
      median = ::google::protobuf::internal::GetOwnedMessage(message_arena, median, submessage_arena);
    }
    set_has_median();
    _impl_.type_.median_ = median;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.median)
}
void AggSpec::set_allocated_min(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMin* min) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (min) {
    ::google::protobuf::Arena* submessage_arena = min->GetArena();
    if (message_arena != submessage_arena) {
      min = ::google::protobuf::internal::GetOwnedMessage(message_arena, min, submessage_arena);
    }
    set_has_min();
    _impl_.type_.min_ = min;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.min)
}
void AggSpec::set_allocated_percentile(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile* percentile) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (percentile) {
    ::google::protobuf::Arena* submessage_arena = percentile->GetArena();
    if (message_arena != submessage_arena) {
      percentile = ::google::protobuf::internal::GetOwnedMessage(message_arena, percentile, submessage_arena);
    }
    set_has_percentile();
    _impl_.type_.percentile_ = percentile;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.percentile)
}
void AggSpec::set_allocated_sorted_first(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted* sorted_first) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (sorted_first) {
    ::google::protobuf::Arena* submessage_arena = sorted_first->GetArena();
    if (message_arena != submessage_arena) {
      sorted_first = ::google::protobuf::internal::GetOwnedMessage(message_arena, sorted_first, submessage_arena);
    }
    set_has_sorted_first();
    _impl_.type_.sorted_first_ = sorted_first;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.sorted_first)
}
void AggSpec::set_allocated_sorted_last(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted* sorted_last) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (sorted_last) {
    ::google::protobuf::Arena* submessage_arena = sorted_last->GetArena();
    if (message_arena != submessage_arena) {
      sorted_last = ::google::protobuf::internal::GetOwnedMessage(message_arena, sorted_last, submessage_arena);
    }
    set_has_sorted_last();
    _impl_.type_.sorted_last_ = sorted_last;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.sorted_last)
}
void AggSpec::set_allocated_std(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecStd* std) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (std) {
    ::google::protobuf::Arena* submessage_arena = std->GetArena();
    if (message_arena != submessage_arena) {
      std = ::google::protobuf::internal::GetOwnedMessage(message_arena, std, submessage_arena);
    }
    set_has_std();
    _impl_.type_.std_ = std;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.std)
}
void AggSpec::set_allocated_sum(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSum* sum) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (sum) {
    ::google::protobuf::Arena* submessage_arena = sum->GetArena();
    if (message_arena != submessage_arena) {
      sum = ::google::protobuf::internal::GetOwnedMessage(message_arena, sum, submessage_arena);
    }
    set_has_sum();
    _impl_.type_.sum_ = sum;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.sum)
}
void AggSpec::set_allocated_t_digest(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest* t_digest) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (t_digest) {
    ::google::protobuf::Arena* submessage_arena = t_digest->GetArena();
    if (message_arena != submessage_arena) {
      t_digest = ::google::protobuf::internal::GetOwnedMessage(message_arena, t_digest, submessage_arena);
    }
    set_has_t_digest();
    _impl_.type_.t_digest_ = t_digest;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.t_digest)
}
void AggSpec::set_allocated_unique(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique* unique) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (unique) {
    ::google::protobuf::Arena* submessage_arena = unique->GetArena();
    if (message_arena != submessage_arena) {
      unique = ::google::protobuf::internal::GetOwnedMessage(message_arena, unique, submessage_arena);
    }
    set_has_unique();
    _impl_.type_.unique_ = unique;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.unique)
}
void AggSpec::set_allocated_weighted_avg(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted* weighted_avg) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (weighted_avg) {
    ::google::protobuf::Arena* submessage_arena = weighted_avg->GetArena();
    if (message_arena != submessage_arena) {
      weighted_avg = ::google::protobuf::internal::GetOwnedMessage(message_arena, weighted_avg, submessage_arena);
    }
    set_has_weighted_avg();
    _impl_.type_.weighted_avg_ = weighted_avg;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.weighted_avg)
}
void AggSpec::set_allocated_weighted_sum(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted* weighted_sum) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (weighted_sum) {
    ::google::protobuf::Arena* submessage_arena = weighted_sum->GetArena();
    if (message_arena != submessage_arena) {
      weighted_sum = ::google::protobuf::internal::GetOwnedMessage(message_arena, weighted_sum, submessage_arena);
    }
    set_has_weighted_sum();
    _impl_.type_.weighted_sum_ = weighted_sum;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.weighted_sum)
}
void AggSpec::set_allocated_var(::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecVar* var) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (var) {
    ::google::protobuf::Arena* submessage_arena = var->GetArena();
    if (message_arena != submessage_arena) {
      var = ::google::protobuf::internal::GetOwnedMessage(message_arena, var, submessage_arena);
    }
    set_has_var();
    _impl_.type_.var_ = var;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.AggSpec.var)
}
AggSpec::AggSpec(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggSpec)
}
inline PROTOBUF_NDEBUG_INLINE AggSpec::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::AggSpec& from_msg)
      : type_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

AggSpec::AggSpec(
    ::google::protobuf::Arena* arena,
    const AggSpec& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggSpec* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (type_case()) {
    case TYPE_NOT_SET:
      break;
      case kAbsSum:
        _impl_.type_.abs_sum_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAbsSum>(arena, *from._impl_.type_.abs_sum_);
        break;
      case kApproximatePercentile:
        _impl_.type_.approximate_percentile_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile>(arena, *from._impl_.type_.approximate_percentile_);
        break;
      case kAvg:
        _impl_.type_.avg_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAvg>(arena, *from._impl_.type_.avg_);
        break;
      case kCountDistinct:
        _impl_.type_.count_distinct_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct>(arena, *from._impl_.type_.count_distinct_);
        break;
      case kDistinct:
        _impl_.type_.distinct_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct>(arena, *from._impl_.type_.distinct_);
        break;
      case kFirst:
        _impl_.type_.first_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFirst>(arena, *from._impl_.type_.first_);
        break;
      case kFormula:
        _impl_.type_.formula_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula>(arena, *from._impl_.type_.formula_);
        break;
      case kFreeze:
        _impl_.type_.freeze_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFreeze>(arena, *from._impl_.type_.freeze_);
        break;
      case kGroup:
        _impl_.type_.group_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecGroup>(arena, *from._impl_.type_.group_);
        break;
      case kLast:
        _impl_.type_.last_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecLast>(arena, *from._impl_.type_.last_);
        break;
      case kMax:
        _impl_.type_.max_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMax>(arena, *from._impl_.type_.max_);
        break;
      case kMedian:
        _impl_.type_.median_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian>(arena, *from._impl_.type_.median_);
        break;
      case kMin:
        _impl_.type_.min_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMin>(arena, *from._impl_.type_.min_);
        break;
      case kPercentile:
        _impl_.type_.percentile_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile>(arena, *from._impl_.type_.percentile_);
        break;
      case kSortedFirst:
        _impl_.type_.sorted_first_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted>(arena, *from._impl_.type_.sorted_first_);
        break;
      case kSortedLast:
        _impl_.type_.sorted_last_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted>(arena, *from._impl_.type_.sorted_last_);
        break;
      case kStd:
        _impl_.type_.std_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecStd>(arena, *from._impl_.type_.std_);
        break;
      case kSum:
        _impl_.type_.sum_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSum>(arena, *from._impl_.type_.sum_);
        break;
      case kTDigest:
        _impl_.type_.t_digest_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest>(arena, *from._impl_.type_.t_digest_);
        break;
      case kUnique:
        _impl_.type_.unique_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique>(arena, *from._impl_.type_.unique_);
        break;
      case kWeightedAvg:
        _impl_.type_.weighted_avg_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted>(arena, *from._impl_.type_.weighted_avg_);
        break;
      case kWeightedSum:
        _impl_.type_.weighted_sum_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted>(arena, *from._impl_.type_.weighted_sum_);
        break;
      case kVar:
        _impl_.type_.var_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecVar>(arena, *from._impl_.type_.var_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggSpec)
}
inline PROTOBUF_NDEBUG_INLINE AggSpec::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : type_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void AggSpec::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AggSpec::~AggSpec() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggSpec)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AggSpec::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
  _impl_.~Impl_();
}

void AggSpec::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.AggSpec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (type_case()) {
    case kAbsSum: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.abs_sum_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.abs_sum_);
      }
      break;
    }
    case kApproximatePercentile: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.approximate_percentile_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.approximate_percentile_);
      }
      break;
    }
    case kAvg: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.avg_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.avg_);
      }
      break;
    }
    case kCountDistinct: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.count_distinct_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.count_distinct_);
      }
      break;
    }
    case kDistinct: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.distinct_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.distinct_);
      }
      break;
    }
    case kFirst: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.first_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.first_);
      }
      break;
    }
    case kFormula: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.formula_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.formula_);
      }
      break;
    }
    case kFreeze: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.freeze_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.freeze_);
      }
      break;
    }
    case kGroup: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.group_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.group_);
      }
      break;
    }
    case kLast: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.last_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.last_);
      }
      break;
    }
    case kMax: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.max_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.max_);
      }
      break;
    }
    case kMedian: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.median_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.median_);
      }
      break;
    }
    case kMin: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.min_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.min_);
      }
      break;
    }
    case kPercentile: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.percentile_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.percentile_);
      }
      break;
    }
    case kSortedFirst: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.sorted_first_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.sorted_first_);
      }
      break;
    }
    case kSortedLast: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.sorted_last_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.sorted_last_);
      }
      break;
    }
    case kStd: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.std_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.std_);
      }
      break;
    }
    case kSum: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.sum_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.sum_);
      }
      break;
    }
    case kTDigest: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.t_digest_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.t_digest_);
      }
      break;
    }
    case kUnique: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.unique_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.unique_);
      }
      break;
    }
    case kWeightedAvg: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.weighted_avg_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.weighted_avg_);
      }
      break;
    }
    case kWeightedSum: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.weighted_sum_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.weighted_sum_);
      }
      break;
    }
    case kVar: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.var_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.var_);
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggSpec::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AggSpec_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggSpec::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AggSpec>(),
            ::google::protobuf::Message::GetNewImpl<AggSpec>(),
            ::google::protobuf::Message::GetClearImpl<AggSpec>(), &AggSpec::ByteSizeLong,
                &AggSpec::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggSpec, _impl_._cached_size_),
            false,
        },
        &AggSpec::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggSpec::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 23, 23, 0, 2> AggSpec::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    23, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4286578688,  // skipmap
    offsetof(decltype(_table_), field_entries),
    23,  // num_field_entries
    23,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAbsSum abs_sum = 1;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.abs_sum_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile approximate_percentile = 2;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.approximate_percentile_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAvg avg = 3;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.avg_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct count_distinct = 4;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.count_distinct_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct distinct = 5;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.distinct_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFirst first = 6;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.first_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula formula = 7;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.formula_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFreeze freeze = 8;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.freeze_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecGroup group = 9;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.group_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecLast last = 10;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.last_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMax max = 11;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.max_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian median = 12;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.median_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMin min = 13;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.min_), _Internal::kOneofCaseOffset + 0, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile percentile = 14;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.percentile_), _Internal::kOneofCaseOffset + 0, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted sorted_first = 15;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.sorted_first_), _Internal::kOneofCaseOffset + 0, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted sorted_last = 16;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.sorted_last_), _Internal::kOneofCaseOffset + 0, 15,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecStd std = 17;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.std_), _Internal::kOneofCaseOffset + 0, 16,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSum sum = 18;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.sum_), _Internal::kOneofCaseOffset + 0, 17,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest t_digest = 19;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.t_digest_), _Internal::kOneofCaseOffset + 0, 18,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique unique = 20;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.unique_), _Internal::kOneofCaseOffset + 0, 19,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted weighted_avg = 21;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.weighted_avg_), _Internal::kOneofCaseOffset + 0, 20,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted weighted_sum = 22;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.weighted_sum_), _Internal::kOneofCaseOffset + 0, 21,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecVar var = 23;
    {PROTOBUF_FIELD_OFFSET(AggSpec, _impl_.type_.var_), _Internal::kOneofCaseOffset + 0, 22,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAbsSum>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAvg>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFirst>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFreeze>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecGroup>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecLast>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMax>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMin>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecStd>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSum>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecVar>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void AggSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggSpec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AggSpec::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AggSpec& this_ = static_cast<const AggSpec&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AggSpec::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AggSpec& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggSpec)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.type_case()) {
            case kAbsSum: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.type_.abs_sum_, this_._impl_.type_.abs_sum_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kApproximatePercentile: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.type_.approximate_percentile_, this_._impl_.type_.approximate_percentile_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAvg: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.type_.avg_, this_._impl_.type_.avg_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kCountDistinct: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  4, *this_._impl_.type_.count_distinct_, this_._impl_.type_.count_distinct_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDistinct: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.type_.distinct_, this_._impl_.type_.distinct_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kFirst: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  6, *this_._impl_.type_.first_, this_._impl_.type_.first_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kFormula: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  7, *this_._impl_.type_.formula_, this_._impl_.type_.formula_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kFreeze: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  8, *this_._impl_.type_.freeze_, this_._impl_.type_.freeze_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kGroup: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  9, *this_._impl_.type_.group_, this_._impl_.type_.group_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kLast: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  10, *this_._impl_.type_.last_, this_._impl_.type_.last_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMax: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  11, *this_._impl_.type_.max_, this_._impl_.type_.max_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMedian: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  12, *this_._impl_.type_.median_, this_._impl_.type_.median_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMin: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  13, *this_._impl_.type_.min_, this_._impl_.type_.min_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPercentile: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  14, *this_._impl_.type_.percentile_, this_._impl_.type_.percentile_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSortedFirst: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  15, *this_._impl_.type_.sorted_first_, this_._impl_.type_.sorted_first_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSortedLast: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  16, *this_._impl_.type_.sorted_last_, this_._impl_.type_.sorted_last_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kStd: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  17, *this_._impl_.type_.std_, this_._impl_.type_.std_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSum: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  18, *this_._impl_.type_.sum_, this_._impl_.type_.sum_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kTDigest: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  19, *this_._impl_.type_.t_digest_, this_._impl_.type_.t_digest_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kUnique: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  20, *this_._impl_.type_.unique_, this_._impl_.type_.unique_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kWeightedAvg: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  21, *this_._impl_.type_.weighted_avg_, this_._impl_.type_.weighted_avg_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kWeightedSum: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  22, *this_._impl_.type_.weighted_sum_, this_._impl_.type_.weighted_sum_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kVar: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  23, *this_._impl_.type_.var_, this_._impl_.type_.var_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggSpec)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AggSpec::ByteSizeLong(const MessageLite& base) {
          const AggSpec& this_ = static_cast<const AggSpec&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AggSpec::ByteSizeLong() const {
          const AggSpec& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggSpec)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.type_case()) {
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAbsSum abs_sum = 1;
            case kAbsSum: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.abs_sum_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile approximate_percentile = 2;
            case kApproximatePercentile: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.approximate_percentile_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAvg avg = 3;
            case kAvg: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.avg_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct count_distinct = 4;
            case kCountDistinct: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.count_distinct_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct distinct = 5;
            case kDistinct: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.distinct_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFirst first = 6;
            case kFirst: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.first_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula formula = 7;
            case kFormula: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.formula_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFreeze freeze = 8;
            case kFreeze: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.freeze_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecGroup group = 9;
            case kGroup: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.group_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecLast last = 10;
            case kLast: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.last_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMax max = 11;
            case kMax: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.max_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian median = 12;
            case kMedian: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.median_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMin min = 13;
            case kMin: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.min_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile percentile = 14;
            case kPercentile: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.percentile_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted sorted_first = 15;
            case kSortedFirst: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.sorted_first_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted sorted_last = 16;
            case kSortedLast: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.sorted_last_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecStd std = 17;
            case kStd: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.std_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSum sum = 18;
            case kSum: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.sum_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest t_digest = 19;
            case kTDigest: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.t_digest_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique unique = 20;
            case kUnique: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.unique_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted weighted_avg = 21;
            case kWeightedAvg: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.weighted_avg_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted weighted_sum = 22;
            case kWeightedSum: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.weighted_sum_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggSpec.AggSpecVar var = 23;
            case kVar: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.var_);
              break;
            }
            case TYPE_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AggSpec::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AggSpec*>(&to_msg);
  auto& from = static_cast<const AggSpec&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggSpec)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_type();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kAbsSum: {
        if (oneof_needs_init) {
          _this->_impl_.type_.abs_sum_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAbsSum>(arena, *from._impl_.type_.abs_sum_);
        } else {
          _this->_impl_.type_.abs_sum_->MergeFrom(from._internal_abs_sum());
        }
        break;
      }
      case kApproximatePercentile: {
        if (oneof_needs_init) {
          _this->_impl_.type_.approximate_percentile_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecApproximatePercentile>(arena, *from._impl_.type_.approximate_percentile_);
        } else {
          _this->_impl_.type_.approximate_percentile_->MergeFrom(from._internal_approximate_percentile());
        }
        break;
      }
      case kAvg: {
        if (oneof_needs_init) {
          _this->_impl_.type_.avg_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecAvg>(arena, *from._impl_.type_.avg_);
        } else {
          _this->_impl_.type_.avg_->MergeFrom(from._internal_avg());
        }
        break;
      }
      case kCountDistinct: {
        if (oneof_needs_init) {
          _this->_impl_.type_.count_distinct_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecCountDistinct>(arena, *from._impl_.type_.count_distinct_);
        } else {
          _this->_impl_.type_.count_distinct_->MergeFrom(from._internal_count_distinct());
        }
        break;
      }
      case kDistinct: {
        if (oneof_needs_init) {
          _this->_impl_.type_.distinct_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecDistinct>(arena, *from._impl_.type_.distinct_);
        } else {
          _this->_impl_.type_.distinct_->MergeFrom(from._internal_distinct());
        }
        break;
      }
      case kFirst: {
        if (oneof_needs_init) {
          _this->_impl_.type_.first_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFirst>(arena, *from._impl_.type_.first_);
        } else {
          _this->_impl_.type_.first_->MergeFrom(from._internal_first());
        }
        break;
      }
      case kFormula: {
        if (oneof_needs_init) {
          _this->_impl_.type_.formula_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFormula>(arena, *from._impl_.type_.formula_);
        } else {
          _this->_impl_.type_.formula_->MergeFrom(from._internal_formula());
        }
        break;
      }
      case kFreeze: {
        if (oneof_needs_init) {
          _this->_impl_.type_.freeze_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecFreeze>(arena, *from._impl_.type_.freeze_);
        } else {
          _this->_impl_.type_.freeze_->MergeFrom(from._internal_freeze());
        }
        break;
      }
      case kGroup: {
        if (oneof_needs_init) {
          _this->_impl_.type_.group_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecGroup>(arena, *from._impl_.type_.group_);
        } else {
          _this->_impl_.type_.group_->MergeFrom(from._internal_group());
        }
        break;
      }
      case kLast: {
        if (oneof_needs_init) {
          _this->_impl_.type_.last_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecLast>(arena, *from._impl_.type_.last_);
        } else {
          _this->_impl_.type_.last_->MergeFrom(from._internal_last());
        }
        break;
      }
      case kMax: {
        if (oneof_needs_init) {
          _this->_impl_.type_.max_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMax>(arena, *from._impl_.type_.max_);
        } else {
          _this->_impl_.type_.max_->MergeFrom(from._internal_max());
        }
        break;
      }
      case kMedian: {
        if (oneof_needs_init) {
          _this->_impl_.type_.median_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMedian>(arena, *from._impl_.type_.median_);
        } else {
          _this->_impl_.type_.median_->MergeFrom(from._internal_median());
        }
        break;
      }
      case kMin: {
        if (oneof_needs_init) {
          _this->_impl_.type_.min_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecMin>(arena, *from._impl_.type_.min_);
        } else {
          _this->_impl_.type_.min_->MergeFrom(from._internal_min());
        }
        break;
      }
      case kPercentile: {
        if (oneof_needs_init) {
          _this->_impl_.type_.percentile_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecPercentile>(arena, *from._impl_.type_.percentile_);
        } else {
          _this->_impl_.type_.percentile_->MergeFrom(from._internal_percentile());
        }
        break;
      }
      case kSortedFirst: {
        if (oneof_needs_init) {
          _this->_impl_.type_.sorted_first_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted>(arena, *from._impl_.type_.sorted_first_);
        } else {
          _this->_impl_.type_.sorted_first_->MergeFrom(from._internal_sorted_first());
        }
        break;
      }
      case kSortedLast: {
        if (oneof_needs_init) {
          _this->_impl_.type_.sorted_last_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSorted>(arena, *from._impl_.type_.sorted_last_);
        } else {
          _this->_impl_.type_.sorted_last_->MergeFrom(from._internal_sorted_last());
        }
        break;
      }
      case kStd: {
        if (oneof_needs_init) {
          _this->_impl_.type_.std_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecStd>(arena, *from._impl_.type_.std_);
        } else {
          _this->_impl_.type_.std_->MergeFrom(from._internal_std());
        }
        break;
      }
      case kSum: {
        if (oneof_needs_init) {
          _this->_impl_.type_.sum_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecSum>(arena, *from._impl_.type_.sum_);
        } else {
          _this->_impl_.type_.sum_->MergeFrom(from._internal_sum());
        }
        break;
      }
      case kTDigest: {
        if (oneof_needs_init) {
          _this->_impl_.type_.t_digest_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecTDigest>(arena, *from._impl_.type_.t_digest_);
        } else {
          _this->_impl_.type_.t_digest_->MergeFrom(from._internal_t_digest());
        }
        break;
      }
      case kUnique: {
        if (oneof_needs_init) {
          _this->_impl_.type_.unique_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecUnique>(arena, *from._impl_.type_.unique_);
        } else {
          _this->_impl_.type_.unique_->MergeFrom(from._internal_unique());
        }
        break;
      }
      case kWeightedAvg: {
        if (oneof_needs_init) {
          _this->_impl_.type_.weighted_avg_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted>(arena, *from._impl_.type_.weighted_avg_);
        } else {
          _this->_impl_.type_.weighted_avg_->MergeFrom(from._internal_weighted_avg());
        }
        break;
      }
      case kWeightedSum: {
        if (oneof_needs_init) {
          _this->_impl_.type_.weighted_sum_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecWeighted>(arena, *from._impl_.type_.weighted_sum_);
        } else {
          _this->_impl_.type_.weighted_sum_->MergeFrom(from._internal_weighted_sum());
        }
        break;
      }
      case kVar: {
        if (oneof_needs_init) {
          _this->_impl_.type_.var_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec_AggSpecVar>(arena, *from._impl_.type_.var_);
        } else {
          _this->_impl_.type_.var_->MergeFrom(from._internal_var());
        }
        break;
      }
      case TYPE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AggSpec::CopyFrom(const AggSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AggSpec::InternalSwap(AggSpec* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AggSpec::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AggregateRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AggregateRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_._has_bits_);
};

void AggregateRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AggregateRequest::AggregateRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AggregateRequest)
}
inline PROTOBUF_NDEBUG_INLINE AggregateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::AggregateRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        aggregations_{visibility, arena, from.aggregations_},
        group_by_columns_{visibility, arena, from.group_by_columns_} {}

AggregateRequest::AggregateRequest(
    ::google::protobuf::Arena* arena,
    const AggregateRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AggregateRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;
  _impl_.initial_groups_id_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.initial_groups_id_)
                        : nullptr;
  _impl_.preserve_empty_ = from._impl_.preserve_empty_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AggregateRequest)
}
inline PROTOBUF_NDEBUG_INLINE AggregateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        aggregations_{visibility, arena},
        group_by_columns_{visibility, arena} {}

inline void AggregateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, preserve_empty_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::preserve_empty_));
}
AggregateRequest::~AggregateRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AggregateRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AggregateRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  delete _impl_.initial_groups_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AggregateRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AggregateRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AggregateRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AggregateRequest>(),
            ::google::protobuf::Message::GetNewImpl<AggregateRequest>(),
            ::google::protobuf::Message::GetClearImpl<AggregateRequest>(), &AggregateRequest::ByteSizeLong,
                &AggregateRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_._cached_size_),
            false,
        },
        &AggregateRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AggregateRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 4, 75, 2> AggregateRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggregateRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_.source_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference initial_groups_id = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_.initial_groups_id_)}},
    // bool preserve_empty = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AggregateRequest, _impl_.preserve_empty_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_.preserve_empty_)}},
    // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 3, PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_.aggregations_)}},
    // repeated string group_by_columns = 6;
    {::_pbi::TcParser::FastUR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_.group_by_columns_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference initial_groups_id = 3;
    {PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_.initial_groups_id_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool preserve_empty = 4;
    {PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_.preserve_empty_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 5;
    {PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_.aggregations_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string group_by_columns = 6;
    {PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_.group_by_columns_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Aggregation>()},
  }}, {{
    "\62\0\0\0\0\0\20\0"
    "io.deephaven.proto.backplane.grpc.AggregateRequest"
    "group_by_columns"
  }},
};

PROTOBUF_NOINLINE void AggregateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AggregateRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aggregations_.Clear();
  _impl_.group_by_columns_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.initial_groups_id_ != nullptr);
      _impl_.initial_groups_id_->Clear();
    }
  }
  _impl_.preserve_empty_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AggregateRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AggregateRequest& this_ = static_cast<const AggregateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AggregateRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AggregateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AggregateRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference initial_groups_id = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.initial_groups_id_, this_._impl_.initial_groups_id_->GetCachedSize(), target,
                stream);
          }

          // bool preserve_empty = 4;
          if (this_._internal_preserve_empty() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_preserve_empty(), target);
          }

          // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 5;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_aggregations_size());
               i < n; i++) {
            const auto& repfield = this_._internal_aggregations().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    5, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated string group_by_columns = 6;
          for (int i = 0, n = this_._internal_group_by_columns_size(); i < n; ++i) {
            const auto& s = this_._internal_group_by_columns().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.AggregateRequest.group_by_columns");
            target = stream->WriteString(6, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AggregateRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AggregateRequest::ByteSizeLong(const MessageLite& base) {
          const AggregateRequest& this_ = static_cast<const AggregateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AggregateRequest::ByteSizeLong() const {
          const AggregateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AggregateRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 5;
             {
              total_size += 1UL * this_._internal_aggregations_size();
              for (const auto& msg : this_._internal_aggregations()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated string group_by_columns = 6;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_group_by_columns().size());
              for (int i = 0, n = this_._internal_group_by_columns().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_group_by_columns().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference initial_groups_id = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.initial_groups_id_);
            }
          }
           {
            // bool preserve_empty = 4;
            if (this_._internal_preserve_empty() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AggregateRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AggregateRequest*>(&to_msg);
  auto& from = static_cast<const AggregateRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AggregateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_aggregations()->MergeFrom(
      from._internal_aggregations());
  _this->_internal_mutable_group_by_columns()->MergeFrom(from._internal_group_by_columns());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.initial_groups_id_ != nullptr);
      if (_this->_impl_.initial_groups_id_ == nullptr) {
        _this->_impl_.initial_groups_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.initial_groups_id_);
      } else {
        _this->_impl_.initial_groups_id_->MergeFrom(*from._impl_.initial_groups_id_);
      }
    }
  }
  if (from._internal_preserve_empty() != 0) {
    _this->_impl_.preserve_empty_ = from._impl_.preserve_empty_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AggregateRequest::CopyFrom(const AggregateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AggregateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AggregateRequest::InternalSwap(AggregateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.aggregations_.InternalSwap(&other->_impl_.aggregations_);
  _impl_.group_by_columns_.InternalSwap(&other->_impl_.group_by_columns_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_.preserve_empty_)
      + sizeof(AggregateRequest::_impl_.preserve_empty_)
      - PROTOBUF_FIELD_OFFSET(AggregateRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata AggregateRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Aggregation_AggregationColumns::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Aggregation_AggregationColumns>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Aggregation_AggregationColumns, _impl_._has_bits_);
};

Aggregation_AggregationColumns::Aggregation_AggregationColumns(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
}
inline PROTOBUF_NDEBUG_INLINE Aggregation_AggregationColumns::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        match_pairs_{visibility, arena, from.match_pairs_} {}

Aggregation_AggregationColumns::Aggregation_AggregationColumns(
    ::google::protobuf::Arena* arena,
    const Aggregation_AggregationColumns& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Aggregation_AggregationColumns* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.spec_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec>(
                              arena, *from._impl_.spec_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
}
inline PROTOBUF_NDEBUG_INLINE Aggregation_AggregationColumns::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        match_pairs_{visibility, arena} {}

inline void Aggregation_AggregationColumns::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.spec_ = {};
}
Aggregation_AggregationColumns::~Aggregation_AggregationColumns() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Aggregation_AggregationColumns::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.spec_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Aggregation_AggregationColumns::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Aggregation_AggregationColumns_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Aggregation_AggregationColumns::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Aggregation_AggregationColumns>(),
            ::google::protobuf::Message::GetNewImpl<Aggregation_AggregationColumns>(),
            ::google::protobuf::Message::GetClearImpl<Aggregation_AggregationColumns>(), &Aggregation_AggregationColumns::ByteSizeLong,
                &Aggregation_AggregationColumns::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Aggregation_AggregationColumns, _impl_._cached_size_),
            false,
        },
        &Aggregation_AggregationColumns::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Aggregation_AggregationColumns::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 84, 2> Aggregation_AggregationColumns::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Aggregation_AggregationColumns, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string match_pairs = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Aggregation_AggregationColumns, _impl_.match_pairs_)}},
    // .io.deephaven.proto.backplane.grpc.AggSpec spec = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Aggregation_AggregationColumns, _impl_.spec_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.AggSpec spec = 1;
    {PROTOBUF_FIELD_OFFSET(Aggregation_AggregationColumns, _impl_.spec_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string match_pairs = 2;
    {PROTOBUF_FIELD_OFFSET(Aggregation_AggregationColumns, _impl_.match_pairs_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggSpec>()},
  }}, {{
    "\100\0\13\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns"
    "match_pairs"
  }},
};

PROTOBUF_NOINLINE void Aggregation_AggregationColumns::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.match_pairs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.spec_ != nullptr);
    _impl_.spec_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Aggregation_AggregationColumns::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Aggregation_AggregationColumns& this_ = static_cast<const Aggregation_AggregationColumns&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Aggregation_AggregationColumns::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Aggregation_AggregationColumns& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.AggSpec spec = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.spec_, this_._impl_.spec_->GetCachedSize(), target,
                stream);
          }

          // repeated string match_pairs = 2;
          for (int i = 0, n = this_._internal_match_pairs_size(); i < n; ++i) {
            const auto& s = this_._internal_match_pairs().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns.match_pairs");
            target = stream->WriteString(2, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Aggregation_AggregationColumns::ByteSizeLong(const MessageLite& base) {
          const Aggregation_AggregationColumns& this_ = static_cast<const Aggregation_AggregationColumns&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Aggregation_AggregationColumns::ByteSizeLong() const {
          const Aggregation_AggregationColumns& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string match_pairs = 2;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_match_pairs().size());
              for (int i = 0, n = this_._internal_match_pairs().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_match_pairs().Get(i));
              }
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.AggSpec spec = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.spec_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Aggregation_AggregationColumns::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Aggregation_AggregationColumns*>(&to_msg);
  auto& from = static_cast<const Aggregation_AggregationColumns&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_match_pairs()->MergeFrom(from._internal_match_pairs());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.spec_ != nullptr);
    if (_this->_impl_.spec_ == nullptr) {
      _this->_impl_.spec_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggSpec>(arena, *from._impl_.spec_);
    } else {
      _this->_impl_.spec_->MergeFrom(*from._impl_.spec_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Aggregation_AggregationColumns::CopyFrom(const Aggregation_AggregationColumns& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Aggregation_AggregationColumns::InternalSwap(Aggregation_AggregationColumns* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.match_pairs_.InternalSwap(&other->_impl_.match_pairs_);
  swap(_impl_.spec_, other->_impl_.spec_);
}

::google::protobuf::Metadata Aggregation_AggregationColumns::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Aggregation_AggregationCount::_Internal {
 public:
};

Aggregation_AggregationCount::Aggregation_AggregationCount(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
}
inline PROTOBUF_NDEBUG_INLINE Aggregation_AggregationCount::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount& from_msg)
      : column_name_(arena, from.column_name_),
        _cached_size_{0} {}

Aggregation_AggregationCount::Aggregation_AggregationCount(
    ::google::protobuf::Arena* arena,
    const Aggregation_AggregationCount& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Aggregation_AggregationCount* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
}
inline PROTOBUF_NDEBUG_INLINE Aggregation_AggregationCount::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : column_name_(arena),
        _cached_size_{0} {}

inline void Aggregation_AggregationCount::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Aggregation_AggregationCount::~Aggregation_AggregationCount() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Aggregation_AggregationCount::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.column_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Aggregation_AggregationCount::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Aggregation_AggregationCount_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Aggregation_AggregationCount::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Aggregation_AggregationCount>(),
            ::google::protobuf::Message::GetNewImpl<Aggregation_AggregationCount>(),
            ::google::protobuf::Message::GetClearImpl<Aggregation_AggregationCount>(), &Aggregation_AggregationCount::ByteSizeLong,
                &Aggregation_AggregationCount::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Aggregation_AggregationCount, _impl_._cached_size_),
            false,
        },
        &Aggregation_AggregationCount::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Aggregation_AggregationCount::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 82, 2> Aggregation_AggregationCount::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string column_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Aggregation_AggregationCount, _impl_.column_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string column_name = 1;
    {PROTOBUF_FIELD_OFFSET(Aggregation_AggregationCount, _impl_.column_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\76\13\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount"
    "column_name"
  }},
};

PROTOBUF_NOINLINE void Aggregation_AggregationCount::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Aggregation_AggregationCount::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Aggregation_AggregationCount& this_ = static_cast<const Aggregation_AggregationCount&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Aggregation_AggregationCount::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Aggregation_AggregationCount& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string column_name = 1;
          if (!this_._internal_column_name().empty()) {
            const std::string& _s = this_._internal_column_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount.column_name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Aggregation_AggregationCount::ByteSizeLong(const MessageLite& base) {
          const Aggregation_AggregationCount& this_ = static_cast<const Aggregation_AggregationCount&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Aggregation_AggregationCount::ByteSizeLong() const {
          const Aggregation_AggregationCount& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string column_name = 1;
            if (!this_._internal_column_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_column_name());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Aggregation_AggregationCount::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Aggregation_AggregationCount*>(&to_msg);
  auto& from = static_cast<const Aggregation_AggregationCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Aggregation_AggregationCount::CopyFrom(const Aggregation_AggregationCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Aggregation_AggregationCount::InternalSwap(Aggregation_AggregationCount* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.column_name_, &other->_impl_.column_name_, arena);
}

::google::protobuf::Metadata Aggregation_AggregationCount::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Aggregation_AggregationRowKey::_Internal {
 public:
};

Aggregation_AggregationRowKey::Aggregation_AggregationRowKey(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
}
inline PROTOBUF_NDEBUG_INLINE Aggregation_AggregationRowKey::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey& from_msg)
      : column_name_(arena, from.column_name_),
        _cached_size_{0} {}

Aggregation_AggregationRowKey::Aggregation_AggregationRowKey(
    ::google::protobuf::Arena* arena,
    const Aggregation_AggregationRowKey& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Aggregation_AggregationRowKey* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
}
inline PROTOBUF_NDEBUG_INLINE Aggregation_AggregationRowKey::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : column_name_(arena),
        _cached_size_{0} {}

inline void Aggregation_AggregationRowKey::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Aggregation_AggregationRowKey::~Aggregation_AggregationRowKey() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Aggregation_AggregationRowKey::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.column_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Aggregation_AggregationRowKey::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Aggregation_AggregationRowKey_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Aggregation_AggregationRowKey::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Aggregation_AggregationRowKey>(),
            ::google::protobuf::Message::GetNewImpl<Aggregation_AggregationRowKey>(),
            ::google::protobuf::Message::GetClearImpl<Aggregation_AggregationRowKey>(), &Aggregation_AggregationRowKey::ByteSizeLong,
                &Aggregation_AggregationRowKey::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Aggregation_AggregationRowKey, _impl_._cached_size_),
            false,
        },
        &Aggregation_AggregationRowKey::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Aggregation_AggregationRowKey::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 83, 2> Aggregation_AggregationRowKey::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string column_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Aggregation_AggregationRowKey, _impl_.column_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string column_name = 1;
    {PROTOBUF_FIELD_OFFSET(Aggregation_AggregationRowKey, _impl_.column_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\77\13\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey"
    "column_name"
  }},
};

PROTOBUF_NOINLINE void Aggregation_AggregationRowKey::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Aggregation_AggregationRowKey::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Aggregation_AggregationRowKey& this_ = static_cast<const Aggregation_AggregationRowKey&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Aggregation_AggregationRowKey::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Aggregation_AggregationRowKey& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string column_name = 1;
          if (!this_._internal_column_name().empty()) {
            const std::string& _s = this_._internal_column_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey.column_name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Aggregation_AggregationRowKey::ByteSizeLong(const MessageLite& base) {
          const Aggregation_AggregationRowKey& this_ = static_cast<const Aggregation_AggregationRowKey&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Aggregation_AggregationRowKey::ByteSizeLong() const {
          const Aggregation_AggregationRowKey& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string column_name = 1;
            if (!this_._internal_column_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_column_name());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Aggregation_AggregationRowKey::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Aggregation_AggregationRowKey*>(&to_msg);
  auto& from = static_cast<const Aggregation_AggregationRowKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Aggregation_AggregationRowKey::CopyFrom(const Aggregation_AggregationRowKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Aggregation_AggregationRowKey::InternalSwap(Aggregation_AggregationRowKey* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.column_name_, &other->_impl_.column_name_, arena);
}

::google::protobuf::Metadata Aggregation_AggregationRowKey::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Aggregation_AggregationPartition::_Internal {
 public:
};

Aggregation_AggregationPartition::Aggregation_AggregationPartition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
}
inline PROTOBUF_NDEBUG_INLINE Aggregation_AggregationPartition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition& from_msg)
      : column_name_(arena, from.column_name_),
        _cached_size_{0} {}

Aggregation_AggregationPartition::Aggregation_AggregationPartition(
    ::google::protobuf::Arena* arena,
    const Aggregation_AggregationPartition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Aggregation_AggregationPartition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.include_group_by_columns_ = from._impl_.include_group_by_columns_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
}
inline PROTOBUF_NDEBUG_INLINE Aggregation_AggregationPartition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : column_name_(arena),
        _cached_size_{0} {}

inline void Aggregation_AggregationPartition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.include_group_by_columns_ = {};
}
Aggregation_AggregationPartition::~Aggregation_AggregationPartition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Aggregation_AggregationPartition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.column_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Aggregation_AggregationPartition::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Aggregation_AggregationPartition_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Aggregation_AggregationPartition::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Aggregation_AggregationPartition>(),
            ::google::protobuf::Message::GetNewImpl<Aggregation_AggregationPartition>(),
            ::google::protobuf::Message::GetClearImpl<Aggregation_AggregationPartition>(), &Aggregation_AggregationPartition::ByteSizeLong,
                &Aggregation_AggregationPartition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Aggregation_AggregationPartition, _impl_._cached_size_),
            false,
        },
        &Aggregation_AggregationPartition::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Aggregation_AggregationPartition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 86, 2> Aggregation_AggregationPartition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool include_group_by_columns = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Aggregation_AggregationPartition, _impl_.include_group_by_columns_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Aggregation_AggregationPartition, _impl_.include_group_by_columns_)}},
    // string column_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Aggregation_AggregationPartition, _impl_.column_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string column_name = 1;
    {PROTOBUF_FIELD_OFFSET(Aggregation_AggregationPartition, _impl_.column_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool include_group_by_columns = 2;
    {PROTOBUF_FIELD_OFFSET(Aggregation_AggregationPartition, _impl_.include_group_by_columns_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\102\13\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition"
    "column_name"
  }},
};

PROTOBUF_NOINLINE void Aggregation_AggregationPartition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_name_.ClearToEmpty();
  _impl_.include_group_by_columns_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Aggregation_AggregationPartition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Aggregation_AggregationPartition& this_ = static_cast<const Aggregation_AggregationPartition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Aggregation_AggregationPartition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Aggregation_AggregationPartition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string column_name = 1;
          if (!this_._internal_column_name().empty()) {
            const std::string& _s = this_._internal_column_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition.column_name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // bool include_group_by_columns = 2;
          if (this_._internal_include_group_by_columns() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_include_group_by_columns(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Aggregation_AggregationPartition::ByteSizeLong(const MessageLite& base) {
          const Aggregation_AggregationPartition& this_ = static_cast<const Aggregation_AggregationPartition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Aggregation_AggregationPartition::ByteSizeLong() const {
          const Aggregation_AggregationPartition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string column_name = 1;
            if (!this_._internal_column_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_column_name());
            }
            // bool include_group_by_columns = 2;
            if (this_._internal_include_group_by_columns() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Aggregation_AggregationPartition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Aggregation_AggregationPartition*>(&to_msg);
  auto& from = static_cast<const Aggregation_AggregationPartition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  if (from._internal_include_group_by_columns() != 0) {
    _this->_impl_.include_group_by_columns_ = from._impl_.include_group_by_columns_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Aggregation_AggregationPartition::CopyFrom(const Aggregation_AggregationPartition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Aggregation_AggregationPartition::InternalSwap(Aggregation_AggregationPartition* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.column_name_, &other->_impl_.column_name_, arena);
        swap(_impl_.include_group_by_columns_, other->_impl_.include_group_by_columns_);
}

::google::protobuf::Metadata Aggregation_AggregationPartition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Aggregation::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Aggregation, _impl_._oneof_case_);
};

void Aggregation::set_allocated_columns(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns* columns) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (columns) {
    ::google::protobuf::Arena* submessage_arena = columns->GetArena();
    if (message_arena != submessage_arena) {
      columns = ::google::protobuf::internal::GetOwnedMessage(message_arena, columns, submessage_arena);
    }
    set_has_columns();
    _impl_.type_.columns_ = columns;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Aggregation.columns)
}
void Aggregation::set_allocated_count(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount* count) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (count) {
    ::google::protobuf::Arena* submessage_arena = count->GetArena();
    if (message_arena != submessage_arena) {
      count = ::google::protobuf::internal::GetOwnedMessage(message_arena, count, submessage_arena);
    }
    set_has_count();
    _impl_.type_.count_ = count;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Aggregation.count)
}
void Aggregation::set_allocated_first_row_key(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey* first_row_key) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (first_row_key) {
    ::google::protobuf::Arena* submessage_arena = first_row_key->GetArena();
    if (message_arena != submessage_arena) {
      first_row_key = ::google::protobuf::internal::GetOwnedMessage(message_arena, first_row_key, submessage_arena);
    }
    set_has_first_row_key();
    _impl_.type_.first_row_key_ = first_row_key;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Aggregation.first_row_key)
}
void Aggregation::set_allocated_last_row_key(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey* last_row_key) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (last_row_key) {
    ::google::protobuf::Arena* submessage_arena = last_row_key->GetArena();
    if (message_arena != submessage_arena) {
      last_row_key = ::google::protobuf::internal::GetOwnedMessage(message_arena, last_row_key, submessage_arena);
    }
    set_has_last_row_key();
    _impl_.type_.last_row_key_ = last_row_key;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Aggregation.last_row_key)
}
void Aggregation::set_allocated_partition(::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition* partition) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_type();
  if (partition) {
    ::google::protobuf::Arena* submessage_arena = partition->GetArena();
    if (message_arena != submessage_arena) {
      partition = ::google::protobuf::internal::GetOwnedMessage(message_arena, partition, submessage_arena);
    }
    set_has_partition();
    _impl_.type_.partition_ = partition;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Aggregation.partition)
}
Aggregation::Aggregation(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Aggregation)
}
inline PROTOBUF_NDEBUG_INLINE Aggregation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::Aggregation& from_msg)
      : type_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Aggregation::Aggregation(
    ::google::protobuf::Arena* arena,
    const Aggregation& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Aggregation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (type_case()) {
    case TYPE_NOT_SET:
      break;
      case kColumns:
        _impl_.type_.columns_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns>(arena, *from._impl_.type_.columns_);
        break;
      case kCount:
        _impl_.type_.count_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount>(arena, *from._impl_.type_.count_);
        break;
      case kFirstRowKey:
        _impl_.type_.first_row_key_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey>(arena, *from._impl_.type_.first_row_key_);
        break;
      case kLastRowKey:
        _impl_.type_.last_row_key_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey>(arena, *from._impl_.type_.last_row_key_);
        break;
      case kPartition:
        _impl_.type_.partition_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition>(arena, *from._impl_.type_.partition_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Aggregation)
}
inline PROTOBUF_NDEBUG_INLINE Aggregation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : type_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Aggregation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Aggregation::~Aggregation() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Aggregation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Aggregation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
  _impl_.~Impl_();
}

void Aggregation::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.Aggregation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (type_case()) {
    case kColumns: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.columns_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.columns_);
      }
      break;
    }
    case kCount: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.count_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.count_);
      }
      break;
    }
    case kFirstRowKey: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.first_row_key_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.first_row_key_);
      }
      break;
    }
    case kLastRowKey: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.last_row_key_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.last_row_key_);
      }
      break;
    }
    case kPartition: {
      if (GetArena() == nullptr) {
        delete _impl_.type_.partition_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.type_.partition_);
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Aggregation::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Aggregation_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Aggregation::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Aggregation>(),
            ::google::protobuf::Message::GetNewImpl<Aggregation>(),
            ::google::protobuf::Message::GetClearImpl<Aggregation>(), &Aggregation::ByteSizeLong,
                &Aggregation::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Aggregation, _impl_._cached_size_),
            false,
        },
        &Aggregation::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Aggregation::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 5, 5, 0, 2> Aggregation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Aggregation>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns columns = 1;
    {PROTOBUF_FIELD_OFFSET(Aggregation, _impl_.type_.columns_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount count = 2;
    {PROTOBUF_FIELD_OFFSET(Aggregation, _impl_.type_.count_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey first_row_key = 3;
    {PROTOBUF_FIELD_OFFSET(Aggregation, _impl_.type_.first_row_key_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey last_row_key = 4;
    {PROTOBUF_FIELD_OFFSET(Aggregation, _impl_.type_.last_row_key_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition partition = 5;
    {PROTOBUF_FIELD_OFFSET(Aggregation, _impl_.type_.partition_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Aggregation::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Aggregation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Aggregation::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Aggregation& this_ = static_cast<const Aggregation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Aggregation::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Aggregation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Aggregation)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.type_case()) {
            case kColumns: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.type_.columns_, this_._impl_.type_.columns_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kCount: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.type_.count_, this_._impl_.type_.count_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kFirstRowKey: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.type_.first_row_key_, this_._impl_.type_.first_row_key_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kLastRowKey: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  4, *this_._impl_.type_.last_row_key_, this_._impl_.type_.last_row_key_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPartition: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.type_.partition_, this_._impl_.type_.partition_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Aggregation)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Aggregation::ByteSizeLong(const MessageLite& base) {
          const Aggregation& this_ = static_cast<const Aggregation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Aggregation::ByteSizeLong() const {
          const Aggregation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Aggregation)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.type_case()) {
            // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns columns = 1;
            case kColumns: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.columns_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount count = 2;
            case kCount: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.count_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey first_row_key = 3;
            case kFirstRowKey: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.first_row_key_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey last_row_key = 4;
            case kLastRowKey: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.last_row_key_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition partition = 5;
            case kPartition: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.type_.partition_);
              break;
            }
            case TYPE_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Aggregation::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Aggregation*>(&to_msg);
  auto& from = static_cast<const Aggregation&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Aggregation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_type();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kColumns: {
        if (oneof_needs_init) {
          _this->_impl_.type_.columns_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationColumns>(arena, *from._impl_.type_.columns_);
        } else {
          _this->_impl_.type_.columns_->MergeFrom(from._internal_columns());
        }
        break;
      }
      case kCount: {
        if (oneof_needs_init) {
          _this->_impl_.type_.count_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationCount>(arena, *from._impl_.type_.count_);
        } else {
          _this->_impl_.type_.count_->MergeFrom(from._internal_count());
        }
        break;
      }
      case kFirstRowKey: {
        if (oneof_needs_init) {
          _this->_impl_.type_.first_row_key_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey>(arena, *from._impl_.type_.first_row_key_);
        } else {
          _this->_impl_.type_.first_row_key_->MergeFrom(from._internal_first_row_key());
        }
        break;
      }
      case kLastRowKey: {
        if (oneof_needs_init) {
          _this->_impl_.type_.last_row_key_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationRowKey>(arena, *from._impl_.type_.last_row_key_);
        } else {
          _this->_impl_.type_.last_row_key_->MergeFrom(from._internal_last_row_key());
        }
        break;
      }
      case kPartition: {
        if (oneof_needs_init) {
          _this->_impl_.type_.partition_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Aggregation_AggregationPartition>(arena, *from._impl_.type_.partition_);
        } else {
          _this->_impl_.type_.partition_->MergeFrom(from._internal_partition());
        }
        break;
      }
      case TYPE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Aggregation::CopyFrom(const Aggregation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Aggregation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Aggregation::InternalSwap(Aggregation* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Aggregation::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SortDescriptor::_Internal {
 public:
};

SortDescriptor::SortDescriptor(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SortDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE SortDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::SortDescriptor& from_msg)
      : column_name_(arena, from.column_name_),
        _cached_size_{0} {}

SortDescriptor::SortDescriptor(
    ::google::protobuf::Arena* arena,
    const SortDescriptor& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SortDescriptor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_absolute_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, is_absolute_),
           offsetof(Impl_, direction_) -
               offsetof(Impl_, is_absolute_) +
               sizeof(Impl_::direction_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SortDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE SortDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : column_name_(arena),
        _cached_size_{0} {}

inline void SortDescriptor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_absolute_),
           0,
           offsetof(Impl_, direction_) -
               offsetof(Impl_, is_absolute_) +
               sizeof(Impl_::direction_));
}
SortDescriptor::~SortDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SortDescriptor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SortDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.column_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SortDescriptor::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SortDescriptor_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &SortDescriptor::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SortDescriptor>(),
            ::google::protobuf::Message::GetNewImpl<SortDescriptor>(),
            ::google::protobuf::Message::GetClearImpl<SortDescriptor>(), &SortDescriptor::ByteSizeLong,
                &SortDescriptor::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SortDescriptor, _impl_._cached_size_),
            false,
        },
        &SortDescriptor::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SortDescriptor::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 68, 2> SortDescriptor::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SortDescriptor>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string column_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SortDescriptor, _impl_.column_name_)}},
    // bool is_absolute = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SortDescriptor, _impl_.is_absolute_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SortDescriptor, _impl_.is_absolute_)}},
    // .io.deephaven.proto.backplane.grpc.SortDescriptor.SortDirection direction = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SortDescriptor, _impl_.direction_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SortDescriptor, _impl_.direction_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string column_name = 1;
    {PROTOBUF_FIELD_OFFSET(SortDescriptor, _impl_.column_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_absolute = 2;
    {PROTOBUF_FIELD_OFFSET(SortDescriptor, _impl_.is_absolute_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .io.deephaven.proto.backplane.grpc.SortDescriptor.SortDirection direction = 3;
    {PROTOBUF_FIELD_OFFSET(SortDescriptor, _impl_.direction_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\60\13\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.SortDescriptor"
    "column_name"
  }},
};

PROTOBUF_NOINLINE void SortDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_name_.ClearToEmpty();
  ::memset(&_impl_.is_absolute_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.direction_) -
      reinterpret_cast<char*>(&_impl_.is_absolute_)) + sizeof(_impl_.direction_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SortDescriptor::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SortDescriptor& this_ = static_cast<const SortDescriptor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SortDescriptor::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SortDescriptor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string column_name = 1;
          if (!this_._internal_column_name().empty()) {
            const std::string& _s = this_._internal_column_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.SortDescriptor.column_name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // bool is_absolute = 2;
          if (this_._internal_is_absolute() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_is_absolute(), target);
          }

          // .io.deephaven.proto.backplane.grpc.SortDescriptor.SortDirection direction = 3;
          if (this_._internal_direction() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_direction(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SortDescriptor)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SortDescriptor::ByteSizeLong(const MessageLite& base) {
          const SortDescriptor& this_ = static_cast<const SortDescriptor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SortDescriptor::ByteSizeLong() const {
          const SortDescriptor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string column_name = 1;
            if (!this_._internal_column_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_column_name());
            }
            // bool is_absolute = 2;
            if (this_._internal_is_absolute() != 0) {
              total_size += 2;
            }
            // .io.deephaven.proto.backplane.grpc.SortDescriptor.SortDirection direction = 3;
            if (this_._internal_direction() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_direction());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SortDescriptor::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SortDescriptor*>(&to_msg);
  auto& from = static_cast<const SortDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  if (from._internal_is_absolute() != 0) {
    _this->_impl_.is_absolute_ = from._impl_.is_absolute_;
  }
  if (from._internal_direction() != 0) {
    _this->_impl_.direction_ = from._impl_.direction_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SortDescriptor::CopyFrom(const SortDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SortDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SortDescriptor::InternalSwap(SortDescriptor* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.column_name_, &other->_impl_.column_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SortDescriptor, _impl_.direction_)
      + sizeof(SortDescriptor::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(SortDescriptor, _impl_.is_absolute_)>(
          reinterpret_cast<char*>(&_impl_.is_absolute_),
          reinterpret_cast<char*>(&other->_impl_.is_absolute_));
}

::google::protobuf::Metadata SortDescriptor::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SortTableRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SortTableRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SortTableRequest, _impl_._has_bits_);
};

void SortTableRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SortTableRequest::SortTableRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SortTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE SortTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::SortTableRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        sorts_{visibility, arena, from.sorts_} {}

SortTableRequest::SortTableRequest(
    ::google::protobuf::Arena* arena,
    const SortTableRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SortTableRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SortTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE SortTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        sorts_{visibility, arena} {}

inline void SortTableRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, source_id_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::source_id_));
}
SortTableRequest::~SortTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SortTableRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SortTableRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SortTableRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SortTableRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &SortTableRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SortTableRequest>(),
            ::google::protobuf::Message::GetNewImpl<SortTableRequest>(),
            ::google::protobuf::Message::GetClearImpl<SortTableRequest>(), &SortTableRequest::ByteSizeLong,
                &SortTableRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SortTableRequest, _impl_._cached_size_),
            false,
        },
        &SortTableRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SortTableRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> SortTableRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SortTableRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SortTableRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SortTableRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SortTableRequest, _impl_.source_id_)}},
    // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(SortTableRequest, _impl_.sorts_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(SortTableRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(SortTableRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 3;
    {PROTOBUF_FIELD_OFFSET(SortTableRequest, _impl_.sorts_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SortDescriptor>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SortTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sorts_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SortTableRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SortTableRequest& this_ = static_cast<const SortTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SortTableRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SortTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_sorts_size());
               i < n; i++) {
            const auto& repfield = this_._internal_sorts().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SortTableRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SortTableRequest::ByteSizeLong(const MessageLite& base) {
          const SortTableRequest& this_ = static_cast<const SortTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SortTableRequest::ByteSizeLong() const {
          const SortTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 3;
             {
              total_size += 1UL * this_._internal_sorts_size();
              for (const auto& msg : this_._internal_sorts()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SortTableRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SortTableRequest*>(&to_msg);
  auto& from = static_cast<const SortTableRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_sorts()->MergeFrom(
      from._internal_sorts());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SortTableRequest::CopyFrom(const SortTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SortTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SortTableRequest::InternalSwap(SortTableRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sorts_.InternalSwap(&other->_impl_.sorts_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SortTableRequest, _impl_.source_id_)
      + sizeof(SortTableRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(SortTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata SortTableRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FilterTableRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<FilterTableRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(FilterTableRequest, _impl_._has_bits_);
};

void FilterTableRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FilterTableRequest::FilterTableRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.FilterTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE FilterTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::FilterTableRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        filters_{visibility, arena, from.filters_} {}

FilterTableRequest::FilterTableRequest(
    ::google::protobuf::Arena* arena,
    const FilterTableRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FilterTableRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.FilterTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE FilterTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        filters_{visibility, arena} {}

inline void FilterTableRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, source_id_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::source_id_));
}
FilterTableRequest::~FilterTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FilterTableRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    FilterTableRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_FilterTableRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &FilterTableRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<FilterTableRequest>(),
            ::google::protobuf::Message::GetNewImpl<FilterTableRequest>(),
            ::google::protobuf::Message::GetClearImpl<FilterTableRequest>(), &FilterTableRequest::ByteSizeLong,
                &FilterTableRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(FilterTableRequest, _impl_._cached_size_),
            false,
        },
        &FilterTableRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* FilterTableRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> FilterTableRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FilterTableRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::FilterTableRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FilterTableRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(FilterTableRequest, _impl_.source_id_)}},
    // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(FilterTableRequest, _impl_.filters_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(FilterTableRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(FilterTableRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
    {PROTOBUF_FIELD_OFFSET(FilterTableRequest, _impl_.filters_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Condition>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void FilterTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filters_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FilterTableRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FilterTableRequest& this_ = static_cast<const FilterTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FilterTableRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FilterTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_filters_size());
               i < n; i++) {
            const auto& repfield = this_._internal_filters().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.FilterTableRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FilterTableRequest::ByteSizeLong(const MessageLite& base) {
          const FilterTableRequest& this_ = static_cast<const FilterTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FilterTableRequest::ByteSizeLong() const {
          const FilterTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
             {
              total_size += 1UL * this_._internal_filters_size();
              for (const auto& msg : this_._internal_filters()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FilterTableRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FilterTableRequest*>(&to_msg);
  auto& from = static_cast<const FilterTableRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_filters()->MergeFrom(
      from._internal_filters());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FilterTableRequest::CopyFrom(const FilterTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.FilterTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FilterTableRequest::InternalSwap(FilterTableRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.filters_.InternalSwap(&other->_impl_.filters_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilterTableRequest, _impl_.source_id_)
      + sizeof(FilterTableRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(FilterTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata FilterTableRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SeekRowRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SeekRowRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_._has_bits_);
};

void SeekRowRequest::clear_source_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.source_id_ != nullptr) _impl_.source_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SeekRowRequest::SeekRowRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SeekRowRequest)
}
inline PROTOBUF_NDEBUG_INLINE SeekRowRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::SeekRowRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        column_name_(arena, from.column_name_) {}

SeekRowRequest::SeekRowRequest(
    ::google::protobuf::Arena* arena,
    const SeekRowRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SeekRowRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.source_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.source_id_)
                        : nullptr;
  _impl_.seek_value_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Literal>(
                              arena, *from._impl_.seek_value_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, starting_row_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, starting_row_),
           offsetof(Impl_, is_backward_) -
               offsetof(Impl_, starting_row_) +
               sizeof(Impl_::is_backward_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SeekRowRequest)
}
inline PROTOBUF_NDEBUG_INLINE SeekRowRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        column_name_(arena) {}

inline void SeekRowRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, source_id_),
           0,
           offsetof(Impl_, is_backward_) -
               offsetof(Impl_, source_id_) +
               sizeof(Impl_::is_backward_));
}
SeekRowRequest::~SeekRowRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SeekRowRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SeekRowRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.column_name_.Destroy();
  delete _impl_.source_id_;
  delete _impl_.seek_value_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SeekRowRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SeekRowRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &SeekRowRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SeekRowRequest>(),
            ::google::protobuf::Message::GetNewImpl<SeekRowRequest>(),
            ::google::protobuf::Message::GetClearImpl<SeekRowRequest>(), &SeekRowRequest::ByteSizeLong,
                &SeekRowRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_._cached_size_),
            false,
        },
        &SeekRowRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SeekRowRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 68, 2> SeekRowRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SeekRowRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket source_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.source_id_)}},
    // sint64 starting_row = 2 [jstype = JS_STRING];
    {::_pbi::TcParser::FastZ64S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.starting_row_)}},
    // string column_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.column_name_)}},
    // .io.deephaven.proto.backplane.grpc.Literal seek_value = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.seek_value_)}},
    // bool insensitive = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SeekRowRequest, _impl_.insensitive_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.insensitive_)}},
    // bool contains = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SeekRowRequest, _impl_.contains_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.contains_)}},
    // bool is_backward = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SeekRowRequest, _impl_.is_backward_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.is_backward_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket source_id = 1;
    {PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // sint64 starting_row = 2 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.starting_row_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt64)},
    // string column_name = 3;
    {PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.column_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .io.deephaven.proto.backplane.grpc.Literal seek_value = 4;
    {PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.seek_value_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool insensitive = 5;
    {PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.insensitive_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool contains = 6;
    {PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.contains_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_backward = 7;
    {PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.is_backward_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Literal>()},
  }}, {{
    "\60\0\0\13\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.SeekRowRequest"
    "column_name"
  }},
};

PROTOBUF_NOINLINE void SeekRowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SeekRowRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.seek_value_ != nullptr);
      _impl_.seek_value_->Clear();
    }
  }
  ::memset(&_impl_.starting_row_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_backward_) -
      reinterpret_cast<char*>(&_impl_.starting_row_)) + sizeof(_impl_.is_backward_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SeekRowRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SeekRowRequest& this_ = static_cast<const SeekRowRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SeekRowRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SeekRowRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SeekRowRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket source_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // sint64 starting_row = 2 [jstype = JS_STRING];
          if (this_._internal_starting_row() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
                2, this_._internal_starting_row(), target);
          }

          // string column_name = 3;
          if (!this_._internal_column_name().empty()) {
            const std::string& _s = this_._internal_column_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.SeekRowRequest.column_name");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // .io.deephaven.proto.backplane.grpc.Literal seek_value = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.seek_value_, this_._impl_.seek_value_->GetCachedSize(), target,
                stream);
          }

          // bool insensitive = 5;
          if (this_._internal_insensitive() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_insensitive(), target);
          }

          // bool contains = 6;
          if (this_._internal_contains() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_contains(), target);
          }

          // bool is_backward = 7;
          if (this_._internal_is_backward() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                7, this_._internal_is_backward(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SeekRowRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SeekRowRequest::ByteSizeLong(const MessageLite& base) {
          const SeekRowRequest& this_ = static_cast<const SeekRowRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SeekRowRequest::ByteSizeLong() const {
          const SeekRowRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SeekRowRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string column_name = 3;
            if (!this_._internal_column_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_column_name());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket source_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
            // .io.deephaven.proto.backplane.grpc.Literal seek_value = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.seek_value_);
            }
          }
           {
            // sint64 starting_row = 2 [jstype = JS_STRING];
            if (this_._internal_starting_row() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
                  this_._internal_starting_row());
            }
            // bool insensitive = 5;
            if (this_._internal_insensitive() != 0) {
              total_size += 2;
            }
            // bool contains = 6;
            if (this_._internal_contains() != 0) {
              total_size += 2;
            }
            // bool is_backward = 7;
            if (this_._internal_is_backward() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SeekRowRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SeekRowRequest*>(&to_msg);
  auto& from = static_cast<const SeekRowRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SeekRowRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.seek_value_ != nullptr);
      if (_this->_impl_.seek_value_ == nullptr) {
        _this->_impl_.seek_value_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Literal>(arena, *from._impl_.seek_value_);
      } else {
        _this->_impl_.seek_value_->MergeFrom(*from._impl_.seek_value_);
      }
    }
  }
  if (from._internal_starting_row() != 0) {
    _this->_impl_.starting_row_ = from._impl_.starting_row_;
  }
  if (from._internal_insensitive() != 0) {
    _this->_impl_.insensitive_ = from._impl_.insensitive_;
  }
  if (from._internal_contains() != 0) {
    _this->_impl_.contains_ = from._impl_.contains_;
  }
  if (from._internal_is_backward() != 0) {
    _this->_impl_.is_backward_ = from._impl_.is_backward_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SeekRowRequest::CopyFrom(const SeekRowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SeekRowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SeekRowRequest::InternalSwap(SeekRowRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.column_name_, &other->_impl_.column_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.is_backward_)
      + sizeof(SeekRowRequest::_impl_.is_backward_)
      - PROTOBUF_FIELD_OFFSET(SeekRowRequest, _impl_.source_id_)>(
          reinterpret_cast<char*>(&_impl_.source_id_),
          reinterpret_cast<char*>(&other->_impl_.source_id_));
}

::google::protobuf::Metadata SeekRowRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SeekRowResponse::_Internal {
 public:
};

SeekRowResponse::SeekRowResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SeekRowResponse)
}
SeekRowResponse::SeekRowResponse(
    ::google::protobuf::Arena* arena, const SeekRowResponse& from)
    : SeekRowResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SeekRowResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SeekRowResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.result_row_ = {};
}
SeekRowResponse::~SeekRowResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SeekRowResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SeekRowResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SeekRowResponse::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SeekRowResponse_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &SeekRowResponse::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SeekRowResponse>(),
            ::google::protobuf::Message::GetNewImpl<SeekRowResponse>(),
            ::google::protobuf::Message::GetClearImpl<SeekRowResponse>(), &SeekRowResponse::ByteSizeLong,
                &SeekRowResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SeekRowResponse, _impl_._cached_size_),
            false,
        },
        &SeekRowResponse::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SeekRowResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SeekRowResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SeekRowResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // sint64 result_row = 1 [jstype = JS_STRING];
    {::_pbi::TcParser::FastZ64S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SeekRowResponse, _impl_.result_row_)}},
  }}, {{
    65535, 65535
  }}, {{
    // sint64 result_row = 1 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(SeekRowResponse, _impl_.result_row_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SeekRowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SeekRowResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_row_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SeekRowResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SeekRowResponse& this_ = static_cast<const SeekRowResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SeekRowResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SeekRowResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SeekRowResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // sint64 result_row = 1 [jstype = JS_STRING];
          if (this_._internal_result_row() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
                1, this_._internal_result_row(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SeekRowResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SeekRowResponse::ByteSizeLong(const MessageLite& base) {
          const SeekRowResponse& this_ = static_cast<const SeekRowResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SeekRowResponse::ByteSizeLong() const {
          const SeekRowResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SeekRowResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // sint64 result_row = 1 [jstype = JS_STRING];
            if (this_._internal_result_row() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
                  this_._internal_result_row());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SeekRowResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SeekRowResponse*>(&to_msg);
  auto& from = static_cast<const SeekRowResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SeekRowResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result_row() != 0) {
    _this->_impl_.result_row_ = from._impl_.result_row_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SeekRowResponse::CopyFrom(const SeekRowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SeekRowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SeekRowResponse::InternalSwap(SeekRowResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.result_row_, other->_impl_.result_row_);
}

::google::protobuf::Metadata SeekRowResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Reference::_Internal {
 public:
};

Reference::Reference(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Reference)
}
inline PROTOBUF_NDEBUG_INLINE Reference::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::Reference& from_msg)
      : column_name_(arena, from.column_name_),
        _cached_size_{0} {}

Reference::Reference(
    ::google::protobuf::Arena* arena,
    const Reference& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Reference* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Reference)
}
inline PROTOBUF_NDEBUG_INLINE Reference::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : column_name_(arena),
        _cached_size_{0} {}

inline void Reference::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Reference::~Reference() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Reference)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Reference::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.column_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Reference::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Reference_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Reference::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Reference>(),
            ::google::protobuf::Message::GetNewImpl<Reference>(),
            ::google::protobuf::Message::GetClearImpl<Reference>(), &Reference::ByteSizeLong,
                &Reference::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Reference, _impl_._cached_size_),
            false,
        },
        &Reference::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Reference::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 63, 2> Reference::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Reference>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string column_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Reference, _impl_.column_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string column_name = 1;
    {PROTOBUF_FIELD_OFFSET(Reference, _impl_.column_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\53\13\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.Reference"
    "column_name"
  }},
};

PROTOBUF_NOINLINE void Reference::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Reference)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Reference::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Reference& this_ = static_cast<const Reference&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Reference::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Reference& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Reference)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string column_name = 1;
          if (!this_._internal_column_name().empty()) {
            const std::string& _s = this_._internal_column_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.Reference.column_name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Reference)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Reference::ByteSizeLong(const MessageLite& base) {
          const Reference& this_ = static_cast<const Reference&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Reference::ByteSizeLong() const {
          const Reference& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Reference)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string column_name = 1;
            if (!this_._internal_column_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_column_name());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Reference::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Reference*>(&to_msg);
  auto& from = static_cast<const Reference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Reference)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Reference::CopyFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Reference::InternalSwap(Reference* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.column_name_, &other->_impl_.column_name_, arena);
}

::google::protobuf::Metadata Reference::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Literal::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Literal, _impl_._oneof_case_);
};

Literal::Literal(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Literal)
}
inline PROTOBUF_NDEBUG_INLINE Literal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::Literal& from_msg)
      : value_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Literal::Literal(
    ::google::protobuf::Arena* arena,
    const Literal& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Literal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (value_case()) {
    case VALUE_NOT_SET:
      break;
      case kStringValue:
        new (&_impl_.value_.string_value_) decltype(_impl_.value_.string_value_){arena, from._impl_.value_.string_value_};
        break;
      case kDoubleValue:
        _impl_.value_.double_value_ = from._impl_.value_.double_value_;
        break;
      case kBoolValue:
        _impl_.value_.bool_value_ = from._impl_.value_.bool_value_;
        break;
      case kLongValue:
        _impl_.value_.long_value_ = from._impl_.value_.long_value_;
        break;
      case kNanoTimeValue:
        _impl_.value_.nano_time_value_ = from._impl_.value_.nano_time_value_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Literal)
}
inline PROTOBUF_NDEBUG_INLINE Literal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : value_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Literal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Literal::~Literal() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Literal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Literal::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
  _impl_.~Impl_();
}

void Literal::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.Literal)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (value_case()) {
    case kStringValue: {
      _impl_.value_.string_value_.Destroy();
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kLongValue: {
      // No need to clear
      break;
    }
    case kNanoTimeValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Literal::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Literal_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Literal::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Literal>(),
            ::google::protobuf::Message::GetNewImpl<Literal>(),
            ::google::protobuf::Message::GetClearImpl<Literal>(), &Literal::ByteSizeLong,
                &Literal::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Literal, _impl_._cached_size_),
            false,
        },
        &Literal::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Literal::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 5, 0, 62, 2> Literal::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Literal>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string string_value = 1;
    {PROTOBUF_FIELD_OFFSET(Literal, _impl_.value_.string_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double double_value = 2;
    {PROTOBUF_FIELD_OFFSET(Literal, _impl_.value_.double_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
    // bool bool_value = 3;
    {PROTOBUF_FIELD_OFFSET(Literal, _impl_.value_.bool_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // sint64 long_value = 4 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(Literal, _impl_.value_.long_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kSInt64)},
    // sint64 nano_time_value = 5 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(Literal, _impl_.value_.nano_time_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kSInt64)},
  }},
  // no aux_entries
  {{
    "\51\14\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.Literal"
    "string_value"
  }},
};

PROTOBUF_NOINLINE void Literal::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Literal)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Literal::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Literal& this_ = static_cast<const Literal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Literal::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Literal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Literal)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.value_case()) {
            case kStringValue: {
              const std::string& _s = this_._internal_string_value();
              ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                  _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.Literal.string_value");
              target = stream->WriteStringMaybeAliased(1, _s, target);
              break;
            }
            case kDoubleValue: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                  2, this_._internal_double_value(), target);
              break;
            }
            case kBoolValue: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteBoolToArray(
                  3, this_._internal_bool_value(), target);
              break;
            }
            case kLongValue: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
                  4, this_._internal_long_value(), target);
              break;
            }
            case kNanoTimeValue: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
                  5, this_._internal_nano_time_value(), target);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Literal)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Literal::ByteSizeLong(const MessageLite& base) {
          const Literal& this_ = static_cast<const Literal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Literal::ByteSizeLong() const {
          const Literal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Literal)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.value_case()) {
            // string string_value = 1;
            case kStringValue: {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_string_value());
              break;
            }
            // double double_value = 2;
            case kDoubleValue: {
              total_size += 9;
              break;
            }
            // bool bool_value = 3;
            case kBoolValue: {
              total_size += 2;
              break;
            }
            // sint64 long_value = 4 [jstype = JS_STRING];
            case kLongValue: {
              total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
                  this_._internal_long_value());
              break;
            }
            // sint64 nano_time_value = 5 [jstype = JS_STRING];
            case kNanoTimeValue: {
              total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
                  this_._internal_nano_time_value());
              break;
            }
            case VALUE_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Literal::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Literal*>(&to_msg);
  auto& from = static_cast<const Literal&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Literal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_value();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kStringValue: {
        if (oneof_needs_init) {
          _this->_impl_.value_.string_value_.InitDefault();
        }
        _this->_impl_.value_.string_value_.Set(from._internal_string_value(), arena);
        break;
      }
      case kDoubleValue: {
        _this->_impl_.value_.double_value_ = from._impl_.value_.double_value_;
        break;
      }
      case kBoolValue: {
        _this->_impl_.value_.bool_value_ = from._impl_.value_.bool_value_;
        break;
      }
      case kLongValue: {
        _this->_impl_.value_.long_value_ = from._impl_.value_.long_value_;
        break;
      }
      case kNanoTimeValue: {
        _this->_impl_.value_.nano_time_value_ = from._impl_.value_.nano_time_value_;
        break;
      }
      case VALUE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Literal::CopyFrom(const Literal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Literal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Literal::InternalSwap(Literal* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Literal::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Value::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Value, _impl_._oneof_case_);
};

void Value::set_allocated_reference(::io::deephaven::proto::backplane::grpc::Reference* reference) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (reference) {
    ::google::protobuf::Arena* submessage_arena = reference->GetArena();
    if (message_arena != submessage_arena) {
      reference = ::google::protobuf::internal::GetOwnedMessage(message_arena, reference, submessage_arena);
    }
    set_has_reference();
    _impl_.data_.reference_ = reference;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Value.reference)
}
void Value::set_allocated_literal(::io::deephaven::proto::backplane::grpc::Literal* literal) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (literal) {
    ::google::protobuf::Arena* submessage_arena = literal->GetArena();
    if (message_arena != submessage_arena) {
      literal = ::google::protobuf::internal::GetOwnedMessage(message_arena, literal, submessage_arena);
    }
    set_has_literal();
    _impl_.data_.literal_ = literal;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Value.literal)
}
Value::Value(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Value)
}
inline PROTOBUF_NDEBUG_INLINE Value::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::Value& from_msg)
      : data_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Value::Value(
    ::google::protobuf::Arena* arena,
    const Value& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Value* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (data_case()) {
    case DATA_NOT_SET:
      break;
      case kReference:
        _impl_.data_.reference_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Reference>(arena, *from._impl_.data_.reference_);
        break;
      case kLiteral:
        _impl_.data_.literal_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Literal>(arena, *from._impl_.data_.literal_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Value)
}
inline PROTOBUF_NDEBUG_INLINE Value::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Value::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Value::~Value() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Value)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Value::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_data()) {
    clear_data();
  }
  _impl_.~Impl_();
}

void Value::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.Value)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (data_case()) {
    case kReference: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.reference_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.reference_);
      }
      break;
    }
    case kLiteral: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.literal_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.literal_);
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Value::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Value_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Value::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Value>(),
            ::google::protobuf::Message::GetNewImpl<Value>(),
            ::google::protobuf::Message::GetClearImpl<Value>(), &Value::ByteSizeLong,
                &Value::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Value, _impl_._cached_size_),
            false,
        },
        &Value::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Value::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2> Value::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Value>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
    {PROTOBUF_FIELD_OFFSET(Value, _impl_.data_.reference_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Literal literal = 2;
    {PROTOBUF_FIELD_OFFSET(Value, _impl_.data_.literal_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Reference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Literal>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Value)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Value::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Value& this_ = static_cast<const Value&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Value::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Value& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Value)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.data_case()) {
            case kReference: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.data_.reference_, this_._impl_.data_.reference_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kLiteral: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.data_.literal_, this_._impl_.data_.literal_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Value)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Value::ByteSizeLong(const MessageLite& base) {
          const Value& this_ = static_cast<const Value&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Value::ByteSizeLong() const {
          const Value& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Value)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.data_case()) {
            // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
            case kReference: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.reference_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.Literal literal = 2;
            case kLiteral: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.literal_);
              break;
            }
            case DATA_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Value::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Value*>(&to_msg);
  auto& from = static_cast<const Value&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Value)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_data();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kReference: {
        if (oneof_needs_init) {
          _this->_impl_.data_.reference_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Reference>(arena, *from._impl_.data_.reference_);
        } else {
          _this->_impl_.data_.reference_->MergeFrom(from._internal_reference());
        }
        break;
      }
      case kLiteral: {
        if (oneof_needs_init) {
          _this->_impl_.data_.literal_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Literal>(arena, *from._impl_.data_.literal_);
        } else {
          _this->_impl_.data_.literal_->MergeFrom(from._internal_literal());
        }
        break;
      }
      case DATA_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Value::InternalSwap(Value* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Value::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Condition::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::Condition, _impl_._oneof_case_);
};

void Condition::set_allocated_and_(::io::deephaven::proto::backplane::grpc::AndCondition* and_) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (and_) {
    ::google::protobuf::Arena* submessage_arena = and_->GetArena();
    if (message_arena != submessage_arena) {
      and_ = ::google::protobuf::internal::GetOwnedMessage(message_arena, and_, submessage_arena);
    }
    set_has_and_();
    _impl_.data_.and__ = and_;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.and)
}
void Condition::set_allocated_or_(::io::deephaven::proto::backplane::grpc::OrCondition* or_) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (or_) {
    ::google::protobuf::Arena* submessage_arena = or_->GetArena();
    if (message_arena != submessage_arena) {
      or_ = ::google::protobuf::internal::GetOwnedMessage(message_arena, or_, submessage_arena);
    }
    set_has_or_();
    _impl_.data_.or__ = or_;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.or)
}
void Condition::set_allocated_not_(::io::deephaven::proto::backplane::grpc::NotCondition* not_) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (not_) {
    ::google::protobuf::Arena* submessage_arena = not_->GetArena();
    if (message_arena != submessage_arena) {
      not_ = ::google::protobuf::internal::GetOwnedMessage(message_arena, not_, submessage_arena);
    }
    set_has_not_();
    _impl_.data_.not__ = not_;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.not)
}
void Condition::set_allocated_compare(::io::deephaven::proto::backplane::grpc::CompareCondition* compare) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (compare) {
    ::google::protobuf::Arena* submessage_arena = compare->GetArena();
    if (message_arena != submessage_arena) {
      compare = ::google::protobuf::internal::GetOwnedMessage(message_arena, compare, submessage_arena);
    }
    set_has_compare();
    _impl_.data_.compare_ = compare;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.compare)
}
void Condition::set_allocated_in(::io::deephaven::proto::backplane::grpc::InCondition* in) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (in) {
    ::google::protobuf::Arena* submessage_arena = in->GetArena();
    if (message_arena != submessage_arena) {
      in = ::google::protobuf::internal::GetOwnedMessage(message_arena, in, submessage_arena);
    }
    set_has_in();
    _impl_.data_.in_ = in;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.in)
}
void Condition::set_allocated_invoke(::io::deephaven::proto::backplane::grpc::InvokeCondition* invoke) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (invoke) {
    ::google::protobuf::Arena* submessage_arena = invoke->GetArena();
    if (message_arena != submessage_arena) {
      invoke = ::google::protobuf::internal::GetOwnedMessage(message_arena, invoke, submessage_arena);
    }
    set_has_invoke();
    _impl_.data_.invoke_ = invoke;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.invoke)
}
void Condition::set_allocated_is_null(::io::deephaven::proto::backplane::grpc::IsNullCondition* is_null) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (is_null) {
    ::google::protobuf::Arena* submessage_arena = is_null->GetArena();
    if (message_arena != submessage_arena) {
      is_null = ::google::protobuf::internal::GetOwnedMessage(message_arena, is_null, submessage_arena);
    }
    set_has_is_null();
    _impl_.data_.is_null_ = is_null;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.is_null)
}
void Condition::set_allocated_matches(::io::deephaven::proto::backplane::grpc::MatchesCondition* matches) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (matches) {
    ::google::protobuf::Arena* submessage_arena = matches->GetArena();
    if (message_arena != submessage_arena) {
      matches = ::google::protobuf::internal::GetOwnedMessage(message_arena, matches, submessage_arena);
    }
    set_has_matches();
    _impl_.data_.matches_ = matches;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.matches)
}
void Condition::set_allocated_contains(::io::deephaven::proto::backplane::grpc::ContainsCondition* contains) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (contains) {
    ::google::protobuf::Arena* submessage_arena = contains->GetArena();
    if (message_arena != submessage_arena) {
      contains = ::google::protobuf::internal::GetOwnedMessage(message_arena, contains, submessage_arena);
    }
    set_has_contains();
    _impl_.data_.contains_ = contains;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.contains)
}
void Condition::set_allocated_search(::io::deephaven::proto::backplane::grpc::SearchCondition* search) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (search) {
    ::google::protobuf::Arena* submessage_arena = search->GetArena();
    if (message_arena != submessage_arena) {
      search = ::google::protobuf::internal::GetOwnedMessage(message_arena, search, submessage_arena);
    }
    set_has_search();
    _impl_.data_.search_ = search;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.Condition.search)
}
Condition::Condition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.Condition)
}
inline PROTOBUF_NDEBUG_INLINE Condition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::Condition& from_msg)
      : data_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Condition::Condition(
    ::google::protobuf::Arena* arena,
    const Condition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Condition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (data_case()) {
    case DATA_NOT_SET:
      break;
      case kAnd:
        _impl_.data_.and__ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AndCondition>(arena, *from._impl_.data_.and__);
        break;
      case kOr:
        _impl_.data_.or__ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::OrCondition>(arena, *from._impl_.data_.or__);
        break;
      case kNot:
        _impl_.data_.not__ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::NotCondition>(arena, *from._impl_.data_.not__);
        break;
      case kCompare:
        _impl_.data_.compare_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::CompareCondition>(arena, *from._impl_.data_.compare_);
        break;
      case kIn:
        _impl_.data_.in_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::InCondition>(arena, *from._impl_.data_.in_);
        break;
      case kInvoke:
        _impl_.data_.invoke_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::InvokeCondition>(arena, *from._impl_.data_.invoke_);
        break;
      case kIsNull:
        _impl_.data_.is_null_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::IsNullCondition>(arena, *from._impl_.data_.is_null_);
        break;
      case kMatches:
        _impl_.data_.matches_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::MatchesCondition>(arena, *from._impl_.data_.matches_);
        break;
      case kContains:
        _impl_.data_.contains_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::ContainsCondition>(arena, *from._impl_.data_.contains_);
        break;
      case kSearch:
        _impl_.data_.search_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SearchCondition>(arena, *from._impl_.data_.search_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.Condition)
}
inline PROTOBUF_NDEBUG_INLINE Condition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Condition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Condition::~Condition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.Condition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Condition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_data()) {
    clear_data();
  }
  _impl_.~Impl_();
}

void Condition::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.Condition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (data_case()) {
    case kAnd: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.and__;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.and__);
      }
      break;
    }
    case kOr: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.or__;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.or__);
      }
      break;
    }
    case kNot: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.not__;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.not__);
      }
      break;
    }
    case kCompare: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.compare_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.compare_);
      }
      break;
    }
    case kIn: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.in_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.in_);
      }
      break;
    }
    case kInvoke: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.invoke_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.invoke_);
      }
      break;
    }
    case kIsNull: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.is_null_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.is_null_);
      }
      break;
    }
    case kMatches: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.matches_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.matches_);
      }
      break;
    }
    case kContains: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.contains_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.contains_);
      }
      break;
    }
    case kSearch: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.search_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.search_);
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Condition::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Condition_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &Condition::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Condition>(),
            ::google::protobuf::Message::GetNewImpl<Condition>(),
            ::google::protobuf::Message::GetClearImpl<Condition>(), &Condition::ByteSizeLong,
                &Condition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Condition, _impl_._cached_size_),
            false,
        },
        &Condition::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Condition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 10, 10, 0, 2> Condition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    10,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Condition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.AndCondition and = 1;
    {PROTOBUF_FIELD_OFFSET(Condition, _impl_.data_.and__), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.OrCondition or = 2;
    {PROTOBUF_FIELD_OFFSET(Condition, _impl_.data_.or__), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.NotCondition not = 3;
    {PROTOBUF_FIELD_OFFSET(Condition, _impl_.data_.not__), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.CompareCondition compare = 4;
    {PROTOBUF_FIELD_OFFSET(Condition, _impl_.data_.compare_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.InCondition in = 5;
    {PROTOBUF_FIELD_OFFSET(Condition, _impl_.data_.in_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.InvokeCondition invoke = 6;
    {PROTOBUF_FIELD_OFFSET(Condition, _impl_.data_.invoke_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.IsNullCondition is_null = 7;
    {PROTOBUF_FIELD_OFFSET(Condition, _impl_.data_.is_null_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.MatchesCondition matches = 8;
    {PROTOBUF_FIELD_OFFSET(Condition, _impl_.data_.matches_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.ContainsCondition contains = 9;
    {PROTOBUF_FIELD_OFFSET(Condition, _impl_.data_.contains_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.SearchCondition search = 10;
    {PROTOBUF_FIELD_OFFSET(Condition, _impl_.data_.search_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AndCondition>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::OrCondition>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::NotCondition>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::CompareCondition>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::InCondition>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::InvokeCondition>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::IsNullCondition>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::MatchesCondition>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ContainsCondition>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SearchCondition>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.Condition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Condition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Condition& this_ = static_cast<const Condition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Condition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Condition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.Condition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.data_case()) {
            case kAnd: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.data_.and__, this_._impl_.data_.and__->GetCachedSize(), target,
                  stream);
              break;
            }
            case kOr: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.data_.or__, this_._impl_.data_.or__->GetCachedSize(), target,
                  stream);
              break;
            }
            case kNot: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.data_.not__, this_._impl_.data_.not__->GetCachedSize(), target,
                  stream);
              break;
            }
            case kCompare: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  4, *this_._impl_.data_.compare_, this_._impl_.data_.compare_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kIn: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.data_.in_, this_._impl_.data_.in_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kInvoke: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  6, *this_._impl_.data_.invoke_, this_._impl_.data_.invoke_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kIsNull: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  7, *this_._impl_.data_.is_null_, this_._impl_.data_.is_null_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMatches: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  8, *this_._impl_.data_.matches_, this_._impl_.data_.matches_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kContains: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  9, *this_._impl_.data_.contains_, this_._impl_.data_.contains_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSearch: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  10, *this_._impl_.data_.search_, this_._impl_.data_.search_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.Condition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Condition::ByteSizeLong(const MessageLite& base) {
          const Condition& this_ = static_cast<const Condition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Condition::ByteSizeLong() const {
          const Condition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.Condition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.data_case()) {
            // .io.deephaven.proto.backplane.grpc.AndCondition and = 1;
            case kAnd: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.and__);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.OrCondition or = 2;
            case kOr: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.or__);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.NotCondition not = 3;
            case kNot: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.not__);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.CompareCondition compare = 4;
            case kCompare: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.compare_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.InCondition in = 5;
            case kIn: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.in_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.InvokeCondition invoke = 6;
            case kInvoke: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.invoke_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.IsNullCondition is_null = 7;
            case kIsNull: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.is_null_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.MatchesCondition matches = 8;
            case kMatches: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.matches_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.ContainsCondition contains = 9;
            case kContains: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.contains_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.SearchCondition search = 10;
            case kSearch: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.search_);
              break;
            }
            case DATA_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Condition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Condition*>(&to_msg);
  auto& from = static_cast<const Condition&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.Condition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_data();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kAnd: {
        if (oneof_needs_init) {
          _this->_impl_.data_.and__ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AndCondition>(arena, *from._impl_.data_.and__);
        } else {
          _this->_impl_.data_.and__->MergeFrom(from._internal_and_());
        }
        break;
      }
      case kOr: {
        if (oneof_needs_init) {
          _this->_impl_.data_.or__ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::OrCondition>(arena, *from._impl_.data_.or__);
        } else {
          _this->_impl_.data_.or__->MergeFrom(from._internal_or_());
        }
        break;
      }
      case kNot: {
        if (oneof_needs_init) {
          _this->_impl_.data_.not__ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::NotCondition>(arena, *from._impl_.data_.not__);
        } else {
          _this->_impl_.data_.not__->MergeFrom(from._internal_not_());
        }
        break;
      }
      case kCompare: {
        if (oneof_needs_init) {
          _this->_impl_.data_.compare_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::CompareCondition>(arena, *from._impl_.data_.compare_);
        } else {
          _this->_impl_.data_.compare_->MergeFrom(from._internal_compare());
        }
        break;
      }
      case kIn: {
        if (oneof_needs_init) {
          _this->_impl_.data_.in_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::InCondition>(arena, *from._impl_.data_.in_);
        } else {
          _this->_impl_.data_.in_->MergeFrom(from._internal_in());
        }
        break;
      }
      case kInvoke: {
        if (oneof_needs_init) {
          _this->_impl_.data_.invoke_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::InvokeCondition>(arena, *from._impl_.data_.invoke_);
        } else {
          _this->_impl_.data_.invoke_->MergeFrom(from._internal_invoke());
        }
        break;
      }
      case kIsNull: {
        if (oneof_needs_init) {
          _this->_impl_.data_.is_null_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::IsNullCondition>(arena, *from._impl_.data_.is_null_);
        } else {
          _this->_impl_.data_.is_null_->MergeFrom(from._internal_is_null());
        }
        break;
      }
      case kMatches: {
        if (oneof_needs_init) {
          _this->_impl_.data_.matches_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::MatchesCondition>(arena, *from._impl_.data_.matches_);
        } else {
          _this->_impl_.data_.matches_->MergeFrom(from._internal_matches());
        }
        break;
      }
      case kContains: {
        if (oneof_needs_init) {
          _this->_impl_.data_.contains_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::ContainsCondition>(arena, *from._impl_.data_.contains_);
        } else {
          _this->_impl_.data_.contains_->MergeFrom(from._internal_contains());
        }
        break;
      }
      case kSearch: {
        if (oneof_needs_init) {
          _this->_impl_.data_.search_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SearchCondition>(arena, *from._impl_.data_.search_);
        } else {
          _this->_impl_.data_.search_->MergeFrom(from._internal_search());
        }
        break;
      }
      case DATA_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Condition::InternalSwap(Condition* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Condition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AndCondition::_Internal {
 public:
};

AndCondition::AndCondition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.AndCondition)
}
inline PROTOBUF_NDEBUG_INLINE AndCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::AndCondition& from_msg)
      : filters_{visibility, arena, from.filters_},
        _cached_size_{0} {}

AndCondition::AndCondition(
    ::google::protobuf::Arena* arena,
    const AndCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AndCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.AndCondition)
}
inline PROTOBUF_NDEBUG_INLINE AndCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : filters_{visibility, arena},
        _cached_size_{0} {}

inline void AndCondition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AndCondition::~AndCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.AndCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AndCondition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    AndCondition::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_AndCondition_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &AndCondition::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<AndCondition>(),
            ::google::protobuf::Message::GetNewImpl<AndCondition>(),
            ::google::protobuf::Message::GetClearImpl<AndCondition>(), &AndCondition::ByteSizeLong,
                &AndCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(AndCondition, _impl_._cached_size_),
            false,
        },
        &AndCondition::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* AndCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AndCondition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AndCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AndCondition, _impl_.filters_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
    {PROTOBUF_FIELD_OFFSET(AndCondition, _impl_.filters_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Condition>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void AndCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.AndCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filters_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AndCondition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AndCondition& this_ = static_cast<const AndCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AndCondition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AndCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.AndCondition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_filters_size());
               i < n; i++) {
            const auto& repfield = this_._internal_filters().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.AndCondition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AndCondition::ByteSizeLong(const MessageLite& base) {
          const AndCondition& this_ = static_cast<const AndCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AndCondition::ByteSizeLong() const {
          const AndCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.AndCondition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
             {
              total_size += 1UL * this_._internal_filters_size();
              for (const auto& msg : this_._internal_filters()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AndCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AndCondition*>(&to_msg);
  auto& from = static_cast<const AndCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.AndCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_filters()->MergeFrom(
      from._internal_filters());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AndCondition::CopyFrom(const AndCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.AndCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AndCondition::InternalSwap(AndCondition* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.filters_.InternalSwap(&other->_impl_.filters_);
}

::google::protobuf::Metadata AndCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class OrCondition::_Internal {
 public:
};

OrCondition::OrCondition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.OrCondition)
}
inline PROTOBUF_NDEBUG_INLINE OrCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::OrCondition& from_msg)
      : filters_{visibility, arena, from.filters_},
        _cached_size_{0} {}

OrCondition::OrCondition(
    ::google::protobuf::Arena* arena,
    const OrCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  OrCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.OrCondition)
}
inline PROTOBUF_NDEBUG_INLINE OrCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : filters_{visibility, arena},
        _cached_size_{0} {}

inline void OrCondition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
OrCondition::~OrCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.OrCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OrCondition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    OrCondition::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_OrCondition_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &OrCondition::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<OrCondition>(),
            ::google::protobuf::Message::GetNewImpl<OrCondition>(),
            ::google::protobuf::Message::GetClearImpl<OrCondition>(), &OrCondition::ByteSizeLong,
                &OrCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(OrCondition, _impl_._cached_size_),
            false,
        },
        &OrCondition::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* OrCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> OrCondition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::OrCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(OrCondition, _impl_.filters_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
    {PROTOBUF_FIELD_OFFSET(OrCondition, _impl_.filters_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Condition>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void OrCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.OrCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filters_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* OrCondition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const OrCondition& this_ = static_cast<const OrCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* OrCondition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const OrCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.OrCondition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_filters_size());
               i < n; i++) {
            const auto& repfield = this_._internal_filters().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.OrCondition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t OrCondition::ByteSizeLong(const MessageLite& base) {
          const OrCondition& this_ = static_cast<const OrCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t OrCondition::ByteSizeLong() const {
          const OrCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.OrCondition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 1;
             {
              total_size += 1UL * this_._internal_filters_size();
              for (const auto& msg : this_._internal_filters()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void OrCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<OrCondition*>(&to_msg);
  auto& from = static_cast<const OrCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.OrCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_filters()->MergeFrom(
      from._internal_filters());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OrCondition::CopyFrom(const OrCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.OrCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void OrCondition::InternalSwap(OrCondition* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.filters_.InternalSwap(&other->_impl_.filters_);
}

::google::protobuf::Metadata OrCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NotCondition::_Internal {
 public:
  using HasBits =
      decltype(std::declval<NotCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(NotCondition, _impl_._has_bits_);
};

NotCondition::NotCondition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.NotCondition)
}
inline PROTOBUF_NDEBUG_INLINE NotCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::NotCondition& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

NotCondition::NotCondition(
    ::google::protobuf::Arena* arena,
    const NotCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  NotCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.filter_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Condition>(
                              arena, *from._impl_.filter_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.NotCondition)
}
inline PROTOBUF_NDEBUG_INLINE NotCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void NotCondition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.filter_ = {};
}
NotCondition::~NotCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.NotCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NotCondition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.filter_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    NotCondition::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_NotCondition_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &NotCondition::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<NotCondition>(),
            ::google::protobuf::Message::GetNewImpl<NotCondition>(),
            ::google::protobuf::Message::GetClearImpl<NotCondition>(), &NotCondition::ByteSizeLong,
                &NotCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(NotCondition, _impl_._cached_size_),
            false,
        },
        &NotCondition::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* NotCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> NotCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NotCondition, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::NotCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.Condition filter = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(NotCondition, _impl_.filter_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Condition filter = 1;
    {PROTOBUF_FIELD_OFFSET(NotCondition, _impl_.filter_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Condition>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void NotCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.NotCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.filter_ != nullptr);
    _impl_.filter_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* NotCondition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const NotCondition& this_ = static_cast<const NotCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* NotCondition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const NotCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.NotCondition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Condition filter = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.filter_, this_._impl_.filter_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.NotCondition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t NotCondition::ByteSizeLong(const MessageLite& base) {
          const NotCondition& this_ = static_cast<const NotCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t NotCondition::ByteSizeLong() const {
          const NotCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.NotCondition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .io.deephaven.proto.backplane.grpc.Condition filter = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.filter_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void NotCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NotCondition*>(&to_msg);
  auto& from = static_cast<const NotCondition&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.NotCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.filter_ != nullptr);
    if (_this->_impl_.filter_ == nullptr) {
      _this->_impl_.filter_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Condition>(arena, *from._impl_.filter_);
    } else {
      _this->_impl_.filter_->MergeFrom(*from._impl_.filter_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NotCondition::CopyFrom(const NotCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.NotCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NotCondition::InternalSwap(NotCondition* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.filter_, other->_impl_.filter_);
}

::google::protobuf::Metadata NotCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CompareCondition::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CompareCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CompareCondition, _impl_._has_bits_);
};

CompareCondition::CompareCondition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CompareCondition)
}
inline PROTOBUF_NDEBUG_INLINE CompareCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::CompareCondition& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CompareCondition::CompareCondition(
    ::google::protobuf::Arena* arena,
    const CompareCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CompareCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.lhs_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Value>(
                              arena, *from._impl_.lhs_)
                        : nullptr;
  _impl_.rhs_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Value>(
                              arena, *from._impl_.rhs_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, operation_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, operation_),
           offsetof(Impl_, case_sensitivity_) -
               offsetof(Impl_, operation_) +
               sizeof(Impl_::case_sensitivity_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CompareCondition)
}
inline PROTOBUF_NDEBUG_INLINE CompareCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CompareCondition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lhs_),
           0,
           offsetof(Impl_, case_sensitivity_) -
               offsetof(Impl_, lhs_) +
               sizeof(Impl_::case_sensitivity_));
}
CompareCondition::~CompareCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.CompareCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CompareCondition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.lhs_;
  delete _impl_.rhs_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    CompareCondition::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_CompareCondition_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &CompareCondition::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<CompareCondition>(),
            ::google::protobuf::Message::GetNewImpl<CompareCondition>(),
            ::google::protobuf::Message::GetClearImpl<CompareCondition>(), &CompareCondition::ByteSizeLong,
                &CompareCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(CompareCondition, _impl_._cached_size_),
            false,
        },
        &CompareCondition::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* CompareCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> CompareCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CompareCondition, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::CompareCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.Value rhs = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(CompareCondition, _impl_.rhs_)}},
    // .io.deephaven.proto.backplane.grpc.CompareCondition.CompareOperation operation = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CompareCondition, _impl_.operation_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CompareCondition, _impl_.operation_)}},
    // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CompareCondition, _impl_.case_sensitivity_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CompareCondition, _impl_.case_sensitivity_)}},
    // .io.deephaven.proto.backplane.grpc.Value lhs = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(CompareCondition, _impl_.lhs_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.CompareCondition.CompareOperation operation = 1;
    {PROTOBUF_FIELD_OFFSET(CompareCondition, _impl_.operation_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 2;
    {PROTOBUF_FIELD_OFFSET(CompareCondition, _impl_.case_sensitivity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .io.deephaven.proto.backplane.grpc.Value lhs = 3;
    {PROTOBUF_FIELD_OFFSET(CompareCondition, _impl_.lhs_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Value rhs = 4;
    {PROTOBUF_FIELD_OFFSET(CompareCondition, _impl_.rhs_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Value>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Value>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CompareCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.CompareCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.lhs_ != nullptr);
      _impl_.lhs_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.rhs_ != nullptr);
      _impl_.rhs_->Clear();
    }
  }
  ::memset(&_impl_.operation_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.case_sensitivity_) -
      reinterpret_cast<char*>(&_impl_.operation_)) + sizeof(_impl_.case_sensitivity_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CompareCondition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CompareCondition& this_ = static_cast<const CompareCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CompareCondition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CompareCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.CompareCondition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .io.deephaven.proto.backplane.grpc.CompareCondition.CompareOperation operation = 1;
          if (this_._internal_operation() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_operation(), target);
          }

          // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 2;
          if (this_._internal_case_sensitivity() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_case_sensitivity(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Value lhs = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.lhs_, this_._impl_.lhs_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.Value rhs = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.rhs_, this_._impl_.rhs_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.CompareCondition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CompareCondition::ByteSizeLong(const MessageLite& base) {
          const CompareCondition& this_ = static_cast<const CompareCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CompareCondition::ByteSizeLong() const {
          const CompareCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.CompareCondition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Value lhs = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.lhs_);
            }
            // .io.deephaven.proto.backplane.grpc.Value rhs = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.rhs_);
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.CompareCondition.CompareOperation operation = 1;
            if (this_._internal_operation() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_operation());
            }
            // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 2;
            if (this_._internal_case_sensitivity() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_case_sensitivity());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CompareCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CompareCondition*>(&to_msg);
  auto& from = static_cast<const CompareCondition&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.CompareCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.lhs_ != nullptr);
      if (_this->_impl_.lhs_ == nullptr) {
        _this->_impl_.lhs_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Value>(arena, *from._impl_.lhs_);
      } else {
        _this->_impl_.lhs_->MergeFrom(*from._impl_.lhs_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.rhs_ != nullptr);
      if (_this->_impl_.rhs_ == nullptr) {
        _this->_impl_.rhs_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Value>(arena, *from._impl_.rhs_);
      } else {
        _this->_impl_.rhs_->MergeFrom(*from._impl_.rhs_);
      }
    }
  }
  if (from._internal_operation() != 0) {
    _this->_impl_.operation_ = from._impl_.operation_;
  }
  if (from._internal_case_sensitivity() != 0) {
    _this->_impl_.case_sensitivity_ = from._impl_.case_sensitivity_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CompareCondition::CopyFrom(const CompareCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.CompareCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CompareCondition::InternalSwap(CompareCondition* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompareCondition, _impl_.case_sensitivity_)
      + sizeof(CompareCondition::_impl_.case_sensitivity_)
      - PROTOBUF_FIELD_OFFSET(CompareCondition, _impl_.lhs_)>(
          reinterpret_cast<char*>(&_impl_.lhs_),
          reinterpret_cast<char*>(&other->_impl_.lhs_));
}

::google::protobuf::Metadata CompareCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class InCondition::_Internal {
 public:
  using HasBits =
      decltype(std::declval<InCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(InCondition, _impl_._has_bits_);
};

InCondition::InCondition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.InCondition)
}
inline PROTOBUF_NDEBUG_INLINE InCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::InCondition& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        candidates_{visibility, arena, from.candidates_} {}

InCondition::InCondition(
    ::google::protobuf::Arena* arena,
    const InCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  InCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Value>(
                              arena, *from._impl_.target_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, case_sensitivity_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, case_sensitivity_),
           offsetof(Impl_, match_type_) -
               offsetof(Impl_, case_sensitivity_) +
               sizeof(Impl_::match_type_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.InCondition)
}
inline PROTOBUF_NDEBUG_INLINE InCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        candidates_{visibility, arena} {}

inline void InCondition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_),
           0,
           offsetof(Impl_, match_type_) -
               offsetof(Impl_, target_) +
               sizeof(Impl_::match_type_));
}
InCondition::~InCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.InCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InCondition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.target_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    InCondition::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_InCondition_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &InCondition::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<InCondition>(),
            ::google::protobuf::Message::GetNewImpl<InCondition>(),
            ::google::protobuf::Message::GetClearImpl<InCondition>(), &InCondition::ByteSizeLong,
                &InCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(InCondition, _impl_._cached_size_),
            false,
        },
        &InCondition::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* InCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> InCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InCondition, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::InCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InCondition, _impl_.match_type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(InCondition, _impl_.match_type_)}},
    // .io.deephaven.proto.backplane.grpc.Value target = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(InCondition, _impl_.target_)}},
    // repeated .io.deephaven.proto.backplane.grpc.Value candidates = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(InCondition, _impl_.candidates_)}},
    // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InCondition, _impl_.case_sensitivity_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(InCondition, _impl_.case_sensitivity_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Value target = 1;
    {PROTOBUF_FIELD_OFFSET(InCondition, _impl_.target_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.grpc.Value candidates = 2;
    {PROTOBUF_FIELD_OFFSET(InCondition, _impl_.candidates_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
    {PROTOBUF_FIELD_OFFSET(InCondition, _impl_.case_sensitivity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
    {PROTOBUF_FIELD_OFFSET(InCondition, _impl_.match_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Value>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Value>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void InCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.InCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.candidates_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_ != nullptr);
    _impl_.target_->Clear();
  }
  ::memset(&_impl_.case_sensitivity_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.match_type_) -
      reinterpret_cast<char*>(&_impl_.case_sensitivity_)) + sizeof(_impl_.match_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* InCondition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const InCondition& this_ = static_cast<const InCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* InCondition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const InCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.InCondition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Value target = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.target_, this_._impl_.target_->GetCachedSize(), target,
                stream);
          }

          // repeated .io.deephaven.proto.backplane.grpc.Value candidates = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_candidates_size());
               i < n; i++) {
            const auto& repfield = this_._internal_candidates().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
          if (this_._internal_case_sensitivity() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_case_sensitivity(), target);
          }

          // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
          if (this_._internal_match_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_match_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.InCondition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t InCondition::ByteSizeLong(const MessageLite& base) {
          const InCondition& this_ = static_cast<const InCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t InCondition::ByteSizeLong() const {
          const InCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.InCondition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .io.deephaven.proto.backplane.grpc.Value candidates = 2;
             {
              total_size += 1UL * this_._internal_candidates_size();
              for (const auto& msg : this_._internal_candidates()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.Value target = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_);
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
            if (this_._internal_case_sensitivity() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_case_sensitivity());
            }
            // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
            if (this_._internal_match_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_match_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void InCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InCondition*>(&to_msg);
  auto& from = static_cast<const InCondition&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.InCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_candidates()->MergeFrom(
      from._internal_candidates());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.target_ != nullptr);
    if (_this->_impl_.target_ == nullptr) {
      _this->_impl_.target_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Value>(arena, *from._impl_.target_);
    } else {
      _this->_impl_.target_->MergeFrom(*from._impl_.target_);
    }
  }
  if (from._internal_case_sensitivity() != 0) {
    _this->_impl_.case_sensitivity_ = from._impl_.case_sensitivity_;
  }
  if (from._internal_match_type() != 0) {
    _this->_impl_.match_type_ = from._impl_.match_type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InCondition::CopyFrom(const InCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.InCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InCondition::InternalSwap(InCondition* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.candidates_.InternalSwap(&other->_impl_.candidates_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InCondition, _impl_.match_type_)
      + sizeof(InCondition::_impl_.match_type_)
      - PROTOBUF_FIELD_OFFSET(InCondition, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::google::protobuf::Metadata InCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class InvokeCondition::_Internal {
 public:
  using HasBits =
      decltype(std::declval<InvokeCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(InvokeCondition, _impl_._has_bits_);
};

InvokeCondition::InvokeCondition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.InvokeCondition)
}
inline PROTOBUF_NDEBUG_INLINE InvokeCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::InvokeCondition& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        arguments_{visibility, arena, from.arguments_},
        method_(arena, from.method_) {}

InvokeCondition::InvokeCondition(
    ::google::protobuf::Arena* arena,
    const InvokeCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  InvokeCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Value>(
                              arena, *from._impl_.target_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.InvokeCondition)
}
inline PROTOBUF_NDEBUG_INLINE InvokeCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        arguments_{visibility, arena},
        method_(arena) {}

inline void InvokeCondition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.target_ = {};
}
InvokeCondition::~InvokeCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.InvokeCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InvokeCondition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.method_.Destroy();
  delete _impl_.target_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    InvokeCondition::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_InvokeCondition_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &InvokeCondition::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<InvokeCondition>(),
            ::google::protobuf::Message::GetNewImpl<InvokeCondition>(),
            ::google::protobuf::Message::GetClearImpl<InvokeCondition>(), &InvokeCondition::ByteSizeLong,
                &InvokeCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(InvokeCondition, _impl_._cached_size_),
            false,
        },
        &InvokeCondition::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* InvokeCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 64, 2> InvokeCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InvokeCondition, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::InvokeCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string method = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InvokeCondition, _impl_.method_)}},
    // .io.deephaven.proto.backplane.grpc.Value target = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(InvokeCondition, _impl_.target_)}},
    // repeated .io.deephaven.proto.backplane.grpc.Value arguments = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(InvokeCondition, _impl_.arguments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string method = 1;
    {PROTOBUF_FIELD_OFFSET(InvokeCondition, _impl_.method_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .io.deephaven.proto.backplane.grpc.Value target = 2;
    {PROTOBUF_FIELD_OFFSET(InvokeCondition, _impl_.target_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .io.deephaven.proto.backplane.grpc.Value arguments = 3;
    {PROTOBUF_FIELD_OFFSET(InvokeCondition, _impl_.arguments_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Value>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Value>()},
  }}, {{
    "\61\6\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.InvokeCondition"
    "method"
  }},
};

PROTOBUF_NOINLINE void InvokeCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.InvokeCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arguments_.Clear();
  _impl_.method_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_ != nullptr);
    _impl_.target_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* InvokeCondition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const InvokeCondition& this_ = static_cast<const InvokeCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* InvokeCondition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const InvokeCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.InvokeCondition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string method = 1;
          if (!this_._internal_method().empty()) {
            const std::string& _s = this_._internal_method();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.InvokeCondition.method");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Value target = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.target_, this_._impl_.target_->GetCachedSize(), target,
                stream);
          }

          // repeated .io.deephaven.proto.backplane.grpc.Value arguments = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_arguments_size());
               i < n; i++) {
            const auto& repfield = this_._internal_arguments().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.InvokeCondition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t InvokeCondition::ByteSizeLong(const MessageLite& base) {
          const InvokeCondition& this_ = static_cast<const InvokeCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t InvokeCondition::ByteSizeLong() const {
          const InvokeCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.InvokeCondition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .io.deephaven.proto.backplane.grpc.Value arguments = 3;
             {
              total_size += 1UL * this_._internal_arguments_size();
              for (const auto& msg : this_._internal_arguments()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string method = 1;
            if (!this_._internal_method().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_method());
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.Value target = 2;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void InvokeCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InvokeCondition*>(&to_msg);
  auto& from = static_cast<const InvokeCondition&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.InvokeCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_arguments()->MergeFrom(
      from._internal_arguments());
  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.target_ != nullptr);
    if (_this->_impl_.target_ == nullptr) {
      _this->_impl_.target_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Value>(arena, *from._impl_.target_);
    } else {
      _this->_impl_.target_->MergeFrom(*from._impl_.target_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InvokeCondition::CopyFrom(const InvokeCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.InvokeCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InvokeCondition::InternalSwap(InvokeCondition* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.arguments_.InternalSwap(&other->_impl_.arguments_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.method_, &other->_impl_.method_, arena);
  swap(_impl_.target_, other->_impl_.target_);
}

::google::protobuf::Metadata InvokeCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class IsNullCondition::_Internal {
 public:
  using HasBits =
      decltype(std::declval<IsNullCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(IsNullCondition, _impl_._has_bits_);
};

IsNullCondition::IsNullCondition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.IsNullCondition)
}
inline PROTOBUF_NDEBUG_INLINE IsNullCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::IsNullCondition& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

IsNullCondition::IsNullCondition(
    ::google::protobuf::Arena* arena,
    const IsNullCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IsNullCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.reference_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Reference>(
                              arena, *from._impl_.reference_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.IsNullCondition)
}
inline PROTOBUF_NDEBUG_INLINE IsNullCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void IsNullCondition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.reference_ = {};
}
IsNullCondition::~IsNullCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.IsNullCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void IsNullCondition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.reference_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    IsNullCondition::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_IsNullCondition_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &IsNullCondition::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<IsNullCondition>(),
            ::google::protobuf::Message::GetNewImpl<IsNullCondition>(),
            ::google::protobuf::Message::GetClearImpl<IsNullCondition>(), &IsNullCondition::ByteSizeLong,
                &IsNullCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(IsNullCondition, _impl_._cached_size_),
            false,
        },
        &IsNullCondition::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* IsNullCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> IsNullCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IsNullCondition, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::IsNullCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(IsNullCondition, _impl_.reference_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
    {PROTOBUF_FIELD_OFFSET(IsNullCondition, _impl_.reference_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Reference>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void IsNullCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.IsNullCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.reference_ != nullptr);
    _impl_.reference_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* IsNullCondition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const IsNullCondition& this_ = static_cast<const IsNullCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* IsNullCondition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const IsNullCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.IsNullCondition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.reference_, this_._impl_.reference_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.IsNullCondition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t IsNullCondition::ByteSizeLong(const MessageLite& base) {
          const IsNullCondition& this_ = static_cast<const IsNullCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t IsNullCondition::ByteSizeLong() const {
          const IsNullCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.IsNullCondition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reference_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void IsNullCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IsNullCondition*>(&to_msg);
  auto& from = static_cast<const IsNullCondition&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.IsNullCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.reference_ != nullptr);
    if (_this->_impl_.reference_ == nullptr) {
      _this->_impl_.reference_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Reference>(arena, *from._impl_.reference_);
    } else {
      _this->_impl_.reference_->MergeFrom(*from._impl_.reference_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IsNullCondition::CopyFrom(const IsNullCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.IsNullCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IsNullCondition::InternalSwap(IsNullCondition* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.reference_, other->_impl_.reference_);
}

::google::protobuf::Metadata IsNullCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MatchesCondition::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MatchesCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MatchesCondition, _impl_._has_bits_);
};

MatchesCondition::MatchesCondition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.MatchesCondition)
}
inline PROTOBUF_NDEBUG_INLINE MatchesCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::MatchesCondition& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        regex_(arena, from.regex_) {}

MatchesCondition::MatchesCondition(
    ::google::protobuf::Arena* arena,
    const MatchesCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MatchesCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.reference_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Reference>(
                              arena, *from._impl_.reference_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, case_sensitivity_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, case_sensitivity_),
           offsetof(Impl_, match_type_) -
               offsetof(Impl_, case_sensitivity_) +
               sizeof(Impl_::match_type_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.MatchesCondition)
}
inline PROTOBUF_NDEBUG_INLINE MatchesCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        regex_(arena) {}

inline void MatchesCondition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reference_),
           0,
           offsetof(Impl_, match_type_) -
               offsetof(Impl_, reference_) +
               sizeof(Impl_::match_type_));
}
MatchesCondition::~MatchesCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.MatchesCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MatchesCondition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.regex_.Destroy();
  delete _impl_.reference_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    MatchesCondition::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_MatchesCondition_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &MatchesCondition::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<MatchesCondition>(),
            ::google::protobuf::Message::GetNewImpl<MatchesCondition>(),
            ::google::protobuf::Message::GetClearImpl<MatchesCondition>(), &MatchesCondition::ByteSizeLong,
                &MatchesCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(MatchesCondition, _impl_._cached_size_),
            false,
        },
        &MatchesCondition::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* MatchesCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 64, 2> MatchesCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MatchesCondition, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::MatchesCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MatchesCondition, _impl_.match_type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MatchesCondition, _impl_.match_type_)}},
    // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MatchesCondition, _impl_.reference_)}},
    // string regex = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MatchesCondition, _impl_.regex_)}},
    // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MatchesCondition, _impl_.case_sensitivity_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MatchesCondition, _impl_.case_sensitivity_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
    {PROTOBUF_FIELD_OFFSET(MatchesCondition, _impl_.reference_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string regex = 2;
    {PROTOBUF_FIELD_OFFSET(MatchesCondition, _impl_.regex_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
    {PROTOBUF_FIELD_OFFSET(MatchesCondition, _impl_.case_sensitivity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
    {PROTOBUF_FIELD_OFFSET(MatchesCondition, _impl_.match_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Reference>()},
  }}, {{
    "\62\0\5\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.MatchesCondition"
    "regex"
  }},
};

PROTOBUF_NOINLINE void MatchesCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.MatchesCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.regex_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.reference_ != nullptr);
    _impl_.reference_->Clear();
  }
  ::memset(&_impl_.case_sensitivity_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.match_type_) -
      reinterpret_cast<char*>(&_impl_.case_sensitivity_)) + sizeof(_impl_.match_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MatchesCondition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MatchesCondition& this_ = static_cast<const MatchesCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MatchesCondition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MatchesCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.MatchesCondition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.reference_, this_._impl_.reference_->GetCachedSize(), target,
                stream);
          }

          // string regex = 2;
          if (!this_._internal_regex().empty()) {
            const std::string& _s = this_._internal_regex();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.MatchesCondition.regex");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
          if (this_._internal_case_sensitivity() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_case_sensitivity(), target);
          }

          // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
          if (this_._internal_match_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_match_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.MatchesCondition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MatchesCondition::ByteSizeLong(const MessageLite& base) {
          const MatchesCondition& this_ = static_cast<const MatchesCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MatchesCondition::ByteSizeLong() const {
          const MatchesCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.MatchesCondition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string regex = 2;
            if (!this_._internal_regex().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_regex());
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reference_);
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
            if (this_._internal_case_sensitivity() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_case_sensitivity());
            }
            // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
            if (this_._internal_match_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_match_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MatchesCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MatchesCondition*>(&to_msg);
  auto& from = static_cast<const MatchesCondition&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.MatchesCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_regex().empty()) {
    _this->_internal_set_regex(from._internal_regex());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.reference_ != nullptr);
    if (_this->_impl_.reference_ == nullptr) {
      _this->_impl_.reference_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Reference>(arena, *from._impl_.reference_);
    } else {
      _this->_impl_.reference_->MergeFrom(*from._impl_.reference_);
    }
  }
  if (from._internal_case_sensitivity() != 0) {
    _this->_impl_.case_sensitivity_ = from._impl_.case_sensitivity_;
  }
  if (from._internal_match_type() != 0) {
    _this->_impl_.match_type_ = from._impl_.match_type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MatchesCondition::CopyFrom(const MatchesCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.MatchesCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MatchesCondition::InternalSwap(MatchesCondition* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.regex_, &other->_impl_.regex_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchesCondition, _impl_.match_type_)
      + sizeof(MatchesCondition::_impl_.match_type_)
      - PROTOBUF_FIELD_OFFSET(MatchesCondition, _impl_.reference_)>(
          reinterpret_cast<char*>(&_impl_.reference_),
          reinterpret_cast<char*>(&other->_impl_.reference_));
}

::google::protobuf::Metadata MatchesCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ContainsCondition::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ContainsCondition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ContainsCondition, _impl_._has_bits_);
};

ContainsCondition::ContainsCondition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ContainsCondition)
}
inline PROTOBUF_NDEBUG_INLINE ContainsCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::ContainsCondition& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        search_string_(arena, from.search_string_) {}

ContainsCondition::ContainsCondition(
    ::google::protobuf::Arena* arena,
    const ContainsCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ContainsCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.reference_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Reference>(
                              arena, *from._impl_.reference_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, case_sensitivity_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, case_sensitivity_),
           offsetof(Impl_, match_type_) -
               offsetof(Impl_, case_sensitivity_) +
               sizeof(Impl_::match_type_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ContainsCondition)
}
inline PROTOBUF_NDEBUG_INLINE ContainsCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        search_string_(arena) {}

inline void ContainsCondition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reference_),
           0,
           offsetof(Impl_, match_type_) -
               offsetof(Impl_, reference_) +
               sizeof(Impl_::match_type_));
}
ContainsCondition::~ContainsCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ContainsCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ContainsCondition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.search_string_.Destroy();
  delete _impl_.reference_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    ContainsCondition::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_ContainsCondition_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ContainsCondition::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<ContainsCondition>(),
            ::google::protobuf::Message::GetNewImpl<ContainsCondition>(),
            ::google::protobuf::Message::GetClearImpl<ContainsCondition>(), &ContainsCondition::ByteSizeLong,
                &ContainsCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ContainsCondition, _impl_._cached_size_),
            false,
        },
        &ContainsCondition::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* ContainsCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 73, 2> ContainsCondition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ContainsCondition, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ContainsCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ContainsCondition, _impl_.match_type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ContainsCondition, _impl_.match_type_)}},
    // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ContainsCondition, _impl_.reference_)}},
    // string search_string = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ContainsCondition, _impl_.search_string_)}},
    // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ContainsCondition, _impl_.case_sensitivity_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ContainsCondition, _impl_.case_sensitivity_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
    {PROTOBUF_FIELD_OFFSET(ContainsCondition, _impl_.reference_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string search_string = 2;
    {PROTOBUF_FIELD_OFFSET(ContainsCondition, _impl_.search_string_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
    {PROTOBUF_FIELD_OFFSET(ContainsCondition, _impl_.case_sensitivity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
    {PROTOBUF_FIELD_OFFSET(ContainsCondition, _impl_.match_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Reference>()},
  }}, {{
    "\63\0\15\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.ContainsCondition"
    "search_string"
  }},
};

PROTOBUF_NOINLINE void ContainsCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ContainsCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.search_string_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.reference_ != nullptr);
    _impl_.reference_->Clear();
  }
  ::memset(&_impl_.case_sensitivity_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.match_type_) -
      reinterpret_cast<char*>(&_impl_.case_sensitivity_)) + sizeof(_impl_.match_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ContainsCondition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ContainsCondition& this_ = static_cast<const ContainsCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ContainsCondition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ContainsCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ContainsCondition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.reference_, this_._impl_.reference_->GetCachedSize(), target,
                stream);
          }

          // string search_string = 2;
          if (!this_._internal_search_string().empty()) {
            const std::string& _s = this_._internal_search_string();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.ContainsCondition.search_string");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
          if (this_._internal_case_sensitivity() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_case_sensitivity(), target);
          }

          // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
          if (this_._internal_match_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_match_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ContainsCondition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ContainsCondition::ByteSizeLong(const MessageLite& base) {
          const ContainsCondition& this_ = static_cast<const ContainsCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ContainsCondition::ByteSizeLong() const {
          const ContainsCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ContainsCondition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string search_string = 2;
            if (!this_._internal_search_string().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_search_string());
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.Reference reference = 1;
            cached_has_bits =
                this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reference_);
            }
          }
           {
            // .io.deephaven.proto.backplane.grpc.CaseSensitivity case_sensitivity = 3;
            if (this_._internal_case_sensitivity() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_case_sensitivity());
            }
            // .io.deephaven.proto.backplane.grpc.MatchType match_type = 4;
            if (this_._internal_match_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_match_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ContainsCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ContainsCondition*>(&to_msg);
  auto& from = static_cast<const ContainsCondition&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ContainsCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_search_string().empty()) {
    _this->_internal_set_search_string(from._internal_search_string());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.reference_ != nullptr);
    if (_this->_impl_.reference_ == nullptr) {
      _this->_impl_.reference_ =
          ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Reference>(arena, *from._impl_.reference_);
    } else {
      _this->_impl_.reference_->MergeFrom(*from._impl_.reference_);
    }
  }
  if (from._internal_case_sensitivity() != 0) {
    _this->_impl_.case_sensitivity_ = from._impl_.case_sensitivity_;
  }
  if (from._internal_match_type() != 0) {
    _this->_impl_.match_type_ = from._impl_.match_type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ContainsCondition::CopyFrom(const ContainsCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ContainsCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ContainsCondition::InternalSwap(ContainsCondition* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.search_string_, &other->_impl_.search_string_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContainsCondition, _impl_.match_type_)
      + sizeof(ContainsCondition::_impl_.match_type_)
      - PROTOBUF_FIELD_OFFSET(ContainsCondition, _impl_.reference_)>(
          reinterpret_cast<char*>(&_impl_.reference_),
          reinterpret_cast<char*>(&other->_impl_.reference_));
}

::google::protobuf::Metadata ContainsCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SearchCondition::_Internal {
 public:
};

SearchCondition::SearchCondition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.SearchCondition)
}
inline PROTOBUF_NDEBUG_INLINE SearchCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::SearchCondition& from_msg)
      : optional_references_{visibility, arena, from.optional_references_},
        search_string_(arena, from.search_string_),
        _cached_size_{0} {}

SearchCondition::SearchCondition(
    ::google::protobuf::Arena* arena,
    const SearchCondition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SearchCondition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.SearchCondition)
}
inline PROTOBUF_NDEBUG_INLINE SearchCondition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : optional_references_{visibility, arena},
        search_string_(arena),
        _cached_size_{0} {}

inline void SearchCondition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SearchCondition::~SearchCondition() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.SearchCondition)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SearchCondition::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.search_string_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SearchCondition::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SearchCondition_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &SearchCondition::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SearchCondition>(),
            ::google::protobuf::Message::GetNewImpl<SearchCondition>(),
            ::google::protobuf::Message::GetClearImpl<SearchCondition>(), &SearchCondition::ByteSizeLong,
                &SearchCondition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SearchCondition, _impl_._cached_size_),
            false,
        },
        &SearchCondition::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SearchCondition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 71, 2> SearchCondition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SearchCondition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .io.deephaven.proto.backplane.grpc.Reference optional_references = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SearchCondition, _impl_.optional_references_)}},
    // string search_string = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SearchCondition, _impl_.search_string_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string search_string = 1;
    {PROTOBUF_FIELD_OFFSET(SearchCondition, _impl_.search_string_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .io.deephaven.proto.backplane.grpc.Reference optional_references = 2;
    {PROTOBUF_FIELD_OFFSET(SearchCondition, _impl_.optional_references_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Reference>()},
  }}, {{
    "\61\15\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.SearchCondition"
    "search_string"
  }},
};

PROTOBUF_NOINLINE void SearchCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.SearchCondition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.optional_references_.Clear();
  _impl_.search_string_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SearchCondition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SearchCondition& this_ = static_cast<const SearchCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SearchCondition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SearchCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.SearchCondition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string search_string = 1;
          if (!this_._internal_search_string().empty()) {
            const std::string& _s = this_._internal_search_string();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.SearchCondition.search_string");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // repeated .io.deephaven.proto.backplane.grpc.Reference optional_references = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_optional_references_size());
               i < n; i++) {
            const auto& repfield = this_._internal_optional_references().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.SearchCondition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SearchCondition::ByteSizeLong(const MessageLite& base) {
          const SearchCondition& this_ = static_cast<const SearchCondition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SearchCondition::ByteSizeLong() const {
          const SearchCondition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.SearchCondition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .io.deephaven.proto.backplane.grpc.Reference optional_references = 2;
             {
              total_size += 1UL * this_._internal_optional_references_size();
              for (const auto& msg : this_._internal_optional_references()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string search_string = 1;
            if (!this_._internal_search_string().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_search_string());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SearchCondition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SearchCondition*>(&to_msg);
  auto& from = static_cast<const SearchCondition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.SearchCondition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_optional_references()->MergeFrom(
      from._internal_optional_references());
  if (!from._internal_search_string().empty()) {
    _this->_internal_set_search_string(from._internal_search_string());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SearchCondition::CopyFrom(const SearchCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.SearchCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SearchCondition::InternalSwap(SearchCondition* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.optional_references_.InternalSwap(&other->_impl_.optional_references_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.search_string_, &other->_impl_.search_string_, arena);
}

::google::protobuf::Metadata SearchCondition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FlattenRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<FlattenRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(FlattenRequest, _impl_._has_bits_);
};

void FlattenRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FlattenRequest::FlattenRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.FlattenRequest)
}
inline PROTOBUF_NDEBUG_INLINE FlattenRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::FlattenRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

FlattenRequest::FlattenRequest(
    ::google::protobuf::Arena* arena,
    const FlattenRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FlattenRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.FlattenRequest)
}
inline PROTOBUF_NDEBUG_INLINE FlattenRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FlattenRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, source_id_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::source_id_));
}
FlattenRequest::~FlattenRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.FlattenRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FlattenRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    FlattenRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_FlattenRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &FlattenRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<FlattenRequest>(),
            ::google::protobuf::Message::GetNewImpl<FlattenRequest>(),
            ::google::protobuf::Message::GetClearImpl<FlattenRequest>(), &FlattenRequest::ByteSizeLong,
                &FlattenRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(FlattenRequest, _impl_._cached_size_),
            false,
        },
        &FlattenRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* FlattenRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> FlattenRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FlattenRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::FlattenRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(FlattenRequest, _impl_.source_id_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FlattenRequest, _impl_.result_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(FlattenRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(FlattenRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void FlattenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FlattenRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FlattenRequest& this_ = static_cast<const FlattenRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FlattenRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FlattenRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.FlattenRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FlattenRequest::ByteSizeLong(const MessageLite& base) {
          const FlattenRequest& this_ = static_cast<const FlattenRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FlattenRequest::ByteSizeLong() const {
          const FlattenRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FlattenRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FlattenRequest*>(&to_msg);
  auto& from = static_cast<const FlattenRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FlattenRequest::CopyFrom(const FlattenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.FlattenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FlattenRequest::InternalSwap(FlattenRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlattenRequest, _impl_.source_id_)
      + sizeof(FlattenRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(FlattenRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata FlattenRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MetaTableRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MetaTableRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MetaTableRequest, _impl_._has_bits_);
};

void MetaTableRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MetaTableRequest::MetaTableRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.MetaTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE MetaTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::MetaTableRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MetaTableRequest::MetaTableRequest(
    ::google::protobuf::Arena* arena,
    const MetaTableRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MetaTableRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.MetaTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE MetaTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MetaTableRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, source_id_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::source_id_));
}
MetaTableRequest::~MetaTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.MetaTableRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MetaTableRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    MetaTableRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_MetaTableRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &MetaTableRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<MetaTableRequest>(),
            ::google::protobuf::Message::GetNewImpl<MetaTableRequest>(),
            ::google::protobuf::Message::GetClearImpl<MetaTableRequest>(), &MetaTableRequest::ByteSizeLong,
                &MetaTableRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(MetaTableRequest, _impl_._cached_size_),
            false,
        },
        &MetaTableRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* MetaTableRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> MetaTableRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MetaTableRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::MetaTableRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MetaTableRequest, _impl_.source_id_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MetaTableRequest, _impl_.result_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(MetaTableRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(MetaTableRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MetaTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.MetaTableRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MetaTableRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MetaTableRequest& this_ = static_cast<const MetaTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MetaTableRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MetaTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.MetaTableRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.MetaTableRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MetaTableRequest::ByteSizeLong(const MessageLite& base) {
          const MetaTableRequest& this_ = static_cast<const MetaTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MetaTableRequest::ByteSizeLong() const {
          const MetaTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.MetaTableRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MetaTableRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MetaTableRequest*>(&to_msg);
  auto& from = static_cast<const MetaTableRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.MetaTableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MetaTableRequest::CopyFrom(const MetaTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.MetaTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MetaTableRequest::InternalSwap(MetaTableRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetaTableRequest, _impl_.source_id_)
      + sizeof(MetaTableRequest::_impl_.source_id_)
      - PROTOBUF_FIELD_OFFSET(MetaTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata MetaTableRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RunChartDownsampleRequest_ZoomRange::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RunChartDownsampleRequest_ZoomRange>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest_ZoomRange, _impl_._has_bits_);
};

RunChartDownsampleRequest_ZoomRange::RunChartDownsampleRequest_ZoomRange(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
}
RunChartDownsampleRequest_ZoomRange::RunChartDownsampleRequest_ZoomRange(
    ::google::protobuf::Arena* arena, const RunChartDownsampleRequest_ZoomRange& from)
    : RunChartDownsampleRequest_ZoomRange(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RunChartDownsampleRequest_ZoomRange::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RunChartDownsampleRequest_ZoomRange::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, min_date_nanos_),
           0,
           offsetof(Impl_, max_date_nanos_) -
               offsetof(Impl_, min_date_nanos_) +
               sizeof(Impl_::max_date_nanos_));
}
RunChartDownsampleRequest_ZoomRange::~RunChartDownsampleRequest_ZoomRange() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RunChartDownsampleRequest_ZoomRange::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    RunChartDownsampleRequest_ZoomRange::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_RunChartDownsampleRequest_ZoomRange_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &RunChartDownsampleRequest_ZoomRange::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<RunChartDownsampleRequest_ZoomRange>(),
            ::google::protobuf::Message::GetNewImpl<RunChartDownsampleRequest_ZoomRange>(),
            ::google::protobuf::Message::GetClearImpl<RunChartDownsampleRequest_ZoomRange>(), &RunChartDownsampleRequest_ZoomRange::ByteSizeLong,
                &RunChartDownsampleRequest_ZoomRange::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest_ZoomRange, _impl_._cached_size_),
            false,
        },
        &RunChartDownsampleRequest_ZoomRange::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* RunChartDownsampleRequest_ZoomRange::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> RunChartDownsampleRequest_ZoomRange::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest_ZoomRange, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional int64 max_date_nanos = 2 [jstype = JS_STRING];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RunChartDownsampleRequest_ZoomRange, _impl_.max_date_nanos_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest_ZoomRange, _impl_.max_date_nanos_)}},
    // optional int64 min_date_nanos = 1 [jstype = JS_STRING];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RunChartDownsampleRequest_ZoomRange, _impl_.min_date_nanos_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest_ZoomRange, _impl_.min_date_nanos_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int64 min_date_nanos = 1 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest_ZoomRange, _impl_.min_date_nanos_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int64 max_date_nanos = 2 [jstype = JS_STRING];
    {PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest_ZoomRange, _impl_.max_date_nanos_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void RunChartDownsampleRequest_ZoomRange::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.min_date_nanos_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.max_date_nanos_) -
        reinterpret_cast<char*>(&_impl_.min_date_nanos_)) + sizeof(_impl_.max_date_nanos_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RunChartDownsampleRequest_ZoomRange::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RunChartDownsampleRequest_ZoomRange& this_ = static_cast<const RunChartDownsampleRequest_ZoomRange&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RunChartDownsampleRequest_ZoomRange::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RunChartDownsampleRequest_ZoomRange& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional int64 min_date_nanos = 1 [jstype = JS_STRING];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_min_date_nanos(), target);
          }

          // optional int64 max_date_nanos = 2 [jstype = JS_STRING];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_max_date_nanos(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RunChartDownsampleRequest_ZoomRange::ByteSizeLong(const MessageLite& base) {
          const RunChartDownsampleRequest_ZoomRange& this_ = static_cast<const RunChartDownsampleRequest_ZoomRange&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RunChartDownsampleRequest_ZoomRange::ByteSizeLong() const {
          const RunChartDownsampleRequest_ZoomRange& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional int64 min_date_nanos = 1 [jstype = JS_STRING];
            if (cached_has_bits & 0x00000001u) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_min_date_nanos());
            }
            // optional int64 max_date_nanos = 2 [jstype = JS_STRING];
            if (cached_has_bits & 0x00000002u) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_max_date_nanos());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RunChartDownsampleRequest_ZoomRange::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RunChartDownsampleRequest_ZoomRange*>(&to_msg);
  auto& from = static_cast<const RunChartDownsampleRequest_ZoomRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.min_date_nanos_ = from._impl_.min_date_nanos_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_date_nanos_ = from._impl_.max_date_nanos_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RunChartDownsampleRequest_ZoomRange::CopyFrom(const RunChartDownsampleRequest_ZoomRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RunChartDownsampleRequest_ZoomRange::InternalSwap(RunChartDownsampleRequest_ZoomRange* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest_ZoomRange, _impl_.max_date_nanos_)
      + sizeof(RunChartDownsampleRequest_ZoomRange::_impl_.max_date_nanos_)
      - PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest_ZoomRange, _impl_.min_date_nanos_)>(
          reinterpret_cast<char*>(&_impl_.min_date_nanos_),
          reinterpret_cast<char*>(&other->_impl_.min_date_nanos_));
}

::google::protobuf::Metadata RunChartDownsampleRequest_ZoomRange::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RunChartDownsampleRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RunChartDownsampleRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_._has_bits_);
};

void RunChartDownsampleRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RunChartDownsampleRequest::RunChartDownsampleRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
}
inline PROTOBUF_NDEBUG_INLINE RunChartDownsampleRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        y_column_names_{visibility, arena, from.y_column_names_},
        x_column_name_(arena, from.x_column_name_) {}

RunChartDownsampleRequest::RunChartDownsampleRequest(
    ::google::protobuf::Arena* arena,
    const RunChartDownsampleRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RunChartDownsampleRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;
  _impl_.zoom_range_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange>(
                              arena, *from._impl_.zoom_range_)
                        : nullptr;
  _impl_.pixel_count_ = from._impl_.pixel_count_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
}
inline PROTOBUF_NDEBUG_INLINE RunChartDownsampleRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        y_column_names_{visibility, arena},
        x_column_name_(arena) {}

inline void RunChartDownsampleRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, pixel_count_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::pixel_count_));
}
RunChartDownsampleRequest::~RunChartDownsampleRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RunChartDownsampleRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.x_column_name_.Destroy();
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  delete _impl_.zoom_range_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    RunChartDownsampleRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_RunChartDownsampleRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &RunChartDownsampleRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<RunChartDownsampleRequest>(),
            ::google::protobuf::Message::GetNewImpl<RunChartDownsampleRequest>(),
            ::google::protobuf::Message::GetClearImpl<RunChartDownsampleRequest>(), &RunChartDownsampleRequest::ByteSizeLong,
                &RunChartDownsampleRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_._cached_size_),
            false,
        },
        &RunChartDownsampleRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* RunChartDownsampleRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 3, 95, 2> RunChartDownsampleRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_.source_id_)}},
    // int32 pixel_count = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RunChartDownsampleRequest, _impl_.pixel_count_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_.pixel_count_)}},
    // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange zoom_range = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_.zoom_range_)}},
    // string x_column_name = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_.x_column_name_)}},
    // repeated string y_column_names = 6;
    {::_pbi::TcParser::FastUR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_.y_column_names_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 pixel_count = 3;
    {PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_.pixel_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange zoom_range = 4;
    {PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_.zoom_range_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string x_column_name = 5;
    {PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_.x_column_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string y_column_names = 6;
    {PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_.y_column_names_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange>()},
  }}, {{
    "\73\0\0\0\0\15\16\0"
    "io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest"
    "x_column_name"
    "y_column_names"
  }},
};

PROTOBUF_NOINLINE void RunChartDownsampleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.y_column_names_.Clear();
  _impl_.x_column_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.zoom_range_ != nullptr);
      _impl_.zoom_range_->Clear();
    }
  }
  _impl_.pixel_count_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RunChartDownsampleRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RunChartDownsampleRequest& this_ = static_cast<const RunChartDownsampleRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RunChartDownsampleRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RunChartDownsampleRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // int32 pixel_count = 3;
          if (this_._internal_pixel_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_pixel_count(), target);
          }

          // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange zoom_range = 4;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.zoom_range_, this_._impl_.zoom_range_->GetCachedSize(), target,
                stream);
          }

          // string x_column_name = 5;
          if (!this_._internal_x_column_name().empty()) {
            const std::string& _s = this_._internal_x_column_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.x_column_name");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // repeated string y_column_names = 6;
          for (int i = 0, n = this_._internal_y_column_names_size(); i < n; ++i) {
            const auto& s = this_._internal_y_column_names().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.y_column_names");
            target = stream->WriteString(6, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RunChartDownsampleRequest::ByteSizeLong(const MessageLite& base) {
          const RunChartDownsampleRequest& this_ = static_cast<const RunChartDownsampleRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RunChartDownsampleRequest::ByteSizeLong() const {
          const RunChartDownsampleRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string y_column_names = 6;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_y_column_names().size());
              for (int i = 0, n = this_._internal_y_column_names().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_y_column_names().Get(i));
              }
            }
          }
           {
            // string x_column_name = 5;
            if (!this_._internal_x_column_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_x_column_name());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
            // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange zoom_range = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.zoom_range_);
            }
          }
           {
            // int32 pixel_count = 3;
            if (this_._internal_pixel_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_pixel_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RunChartDownsampleRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RunChartDownsampleRequest*>(&to_msg);
  auto& from = static_cast<const RunChartDownsampleRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_y_column_names()->MergeFrom(from._internal_y_column_names());
  if (!from._internal_x_column_name().empty()) {
    _this->_internal_set_x_column_name(from._internal_x_column_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.zoom_range_ != nullptr);
      if (_this->_impl_.zoom_range_ == nullptr) {
        _this->_impl_.zoom_range_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest_ZoomRange>(arena, *from._impl_.zoom_range_);
      } else {
        _this->_impl_.zoom_range_->MergeFrom(*from._impl_.zoom_range_);
      }
    }
  }
  if (from._internal_pixel_count() != 0) {
    _this->_impl_.pixel_count_ = from._impl_.pixel_count_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RunChartDownsampleRequest::CopyFrom(const RunChartDownsampleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RunChartDownsampleRequest::InternalSwap(RunChartDownsampleRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.y_column_names_.InternalSwap(&other->_impl_.y_column_names_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.x_column_name_, &other->_impl_.x_column_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_.pixel_count_)
      + sizeof(RunChartDownsampleRequest::_impl_.pixel_count_)
      - PROTOBUF_FIELD_OFFSET(RunChartDownsampleRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata RunChartDownsampleRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::_Internal {
 public:
};

CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly)
}
CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly(
    ::google::protobuf::Arena* arena,
    const CreateInputTableRequest_InputTableKind_InMemoryAppendOnly& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CreateInputTableRequest_InputTableKind_InMemoryAppendOnly* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_CreateInputTableRequest_InputTableKind_InMemoryAppendOnly_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<CreateInputTableRequest_InputTableKind_InMemoryAppendOnly>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<CreateInputTableRequest_InputTableKind_InMemoryAppendOnly>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<CreateInputTableRequest_InputTableKind_InMemoryAppendOnly>(), &CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::ByteSizeLong,
                &CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(CreateInputTableRequest_InputTableKind_InMemoryAppendOnly, _impl_._cached_size_),
            false,
        },
        &CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata CreateInputTableRequest_InputTableKind_InMemoryAppendOnly::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::_Internal {
 public:
};

CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
}
inline PROTOBUF_NDEBUG_INLINE CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked& from_msg)
      : key_columns_{visibility, arena, from.key_columns_},
        _cached_size_{0} {}

CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked(
    ::google::protobuf::Arena* arena,
    const CreateInputTableRequest_InputTableKind_InMemoryKeyBacked& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CreateInputTableRequest_InputTableKind_InMemoryKeyBacked* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
}
inline PROTOBUF_NDEBUG_INLINE CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : key_columns_{visibility, arena},
        _cached_size_{0} {}

inline void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::~CreateInputTableRequest_InputTableKind_InMemoryKeyBacked() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_CreateInputTableRequest_InputTableKind_InMemoryKeyBacked_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<CreateInputTableRequest_InputTableKind_InMemoryKeyBacked>(),
            ::google::protobuf::Message::GetNewImpl<CreateInputTableRequest_InputTableKind_InMemoryKeyBacked>(),
            ::google::protobuf::Message::GetClearImpl<CreateInputTableRequest_InputTableKind_InMemoryKeyBacked>(), &CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::ByteSizeLong,
                &CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(CreateInputTableRequest_InputTableKind_InMemoryKeyBacked, _impl_._cached_size_),
            false,
        },
        &CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 110, 2> CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string key_columns = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CreateInputTableRequest_InputTableKind_InMemoryKeyBacked, _impl_.key_columns_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string key_columns = 1;
    {PROTOBUF_FIELD_OFFSET(CreateInputTableRequest_InputTableKind_InMemoryKeyBacked, _impl_.key_columns_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\132\13\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked"
    "key_columns"
  }},
};

PROTOBUF_NOINLINE void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_columns_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CreateInputTableRequest_InputTableKind_InMemoryKeyBacked& this_ = static_cast<const CreateInputTableRequest_InputTableKind_InMemoryKeyBacked&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CreateInputTableRequest_InputTableKind_InMemoryKeyBacked& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated string key_columns = 1;
          for (int i = 0, n = this_._internal_key_columns_size(); i < n; ++i) {
            const auto& s = this_._internal_key_columns().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked.key_columns");
            target = stream->WriteString(1, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::ByteSizeLong(const MessageLite& base) {
          const CreateInputTableRequest_InputTableKind_InMemoryKeyBacked& this_ = static_cast<const CreateInputTableRequest_InputTableKind_InMemoryKeyBacked&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::ByteSizeLong() const {
          const CreateInputTableRequest_InputTableKind_InMemoryKeyBacked& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string key_columns = 1;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_key_columns().size());
              for (int i = 0, n = this_._internal_key_columns().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_key_columns().Get(i));
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CreateInputTableRequest_InputTableKind_InMemoryKeyBacked*>(&to_msg);
  auto& from = static_cast<const CreateInputTableRequest_InputTableKind_InMemoryKeyBacked&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_key_columns()->MergeFrom(from._internal_key_columns());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::CopyFrom(const CreateInputTableRequest_InputTableKind_InMemoryKeyBacked& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::InternalSwap(CreateInputTableRequest_InputTableKind_InMemoryKeyBacked* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.key_columns_.InternalSwap(&other->_impl_.key_columns_);
}

::google::protobuf::Metadata CreateInputTableRequest_InputTableKind_InMemoryKeyBacked::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CreateInputTableRequest_InputTableKind_Blink::_Internal {
 public:
};

CreateInputTableRequest_InputTableKind_Blink::CreateInputTableRequest_InputTableKind_Blink(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.Blink)
}
CreateInputTableRequest_InputTableKind_Blink::CreateInputTableRequest_InputTableKind_Blink(
    ::google::protobuf::Arena* arena,
    const CreateInputTableRequest_InputTableKind_Blink& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CreateInputTableRequest_InputTableKind_Blink* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.Blink)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    CreateInputTableRequest_InputTableKind_Blink::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_CreateInputTableRequest_InputTableKind_Blink_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &CreateInputTableRequest_InputTableKind_Blink::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<CreateInputTableRequest_InputTableKind_Blink>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<CreateInputTableRequest_InputTableKind_Blink>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<CreateInputTableRequest_InputTableKind_Blink>(), &CreateInputTableRequest_InputTableKind_Blink::ByteSizeLong,
                &CreateInputTableRequest_InputTableKind_Blink::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(CreateInputTableRequest_InputTableKind_Blink, _impl_._cached_size_),
            false,
        },
        &CreateInputTableRequest_InputTableKind_Blink::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* CreateInputTableRequest_InputTableKind_Blink::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> CreateInputTableRequest_InputTableKind_Blink::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_Blink>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata CreateInputTableRequest_InputTableKind_Blink::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CreateInputTableRequest_InputTableKind::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind, _impl_._oneof_case_);
};

void CreateInputTableRequest_InputTableKind::set_allocated_in_memory_append_only(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly* in_memory_append_only) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_kind();
  if (in_memory_append_only) {
    ::google::protobuf::Arena* submessage_arena = in_memory_append_only->GetArena();
    if (message_arena != submessage_arena) {
      in_memory_append_only = ::google::protobuf::internal::GetOwnedMessage(message_arena, in_memory_append_only, submessage_arena);
    }
    set_has_in_memory_append_only();
    _impl_.kind_.in_memory_append_only_ = in_memory_append_only;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.in_memory_append_only)
}
void CreateInputTableRequest_InputTableKind::set_allocated_in_memory_key_backed(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked* in_memory_key_backed) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_kind();
  if (in_memory_key_backed) {
    ::google::protobuf::Arena* submessage_arena = in_memory_key_backed->GetArena();
    if (message_arena != submessage_arena) {
      in_memory_key_backed = ::google::protobuf::internal::GetOwnedMessage(message_arena, in_memory_key_backed, submessage_arena);
    }
    set_has_in_memory_key_backed();
    _impl_.kind_.in_memory_key_backed_ = in_memory_key_backed;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.in_memory_key_backed)
}
void CreateInputTableRequest_InputTableKind::set_allocated_blink(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_Blink* blink) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_kind();
  if (blink) {
    ::google::protobuf::Arena* submessage_arena = blink->GetArena();
    if (message_arena != submessage_arena) {
      blink = ::google::protobuf::internal::GetOwnedMessage(message_arena, blink, submessage_arena);
    }
    set_has_blink();
    _impl_.kind_.blink_ = blink;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.blink)
}
CreateInputTableRequest_InputTableKind::CreateInputTableRequest_InputTableKind(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
}
inline PROTOBUF_NDEBUG_INLINE CreateInputTableRequest_InputTableKind::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind& from_msg)
      : kind_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

CreateInputTableRequest_InputTableKind::CreateInputTableRequest_InputTableKind(
    ::google::protobuf::Arena* arena,
    const CreateInputTableRequest_InputTableKind& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CreateInputTableRequest_InputTableKind* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (kind_case()) {
    case KIND_NOT_SET:
      break;
      case kInMemoryAppendOnly:
        _impl_.kind_.in_memory_append_only_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly>(arena, *from._impl_.kind_.in_memory_append_only_);
        break;
      case kInMemoryKeyBacked:
        _impl_.kind_.in_memory_key_backed_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked>(arena, *from._impl_.kind_.in_memory_key_backed_);
        break;
      case kBlink:
        _impl_.kind_.blink_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_Blink>(arena, *from._impl_.kind_.blink_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
}
inline PROTOBUF_NDEBUG_INLINE CreateInputTableRequest_InputTableKind::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : kind_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void CreateInputTableRequest_InputTableKind::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CreateInputTableRequest_InputTableKind::~CreateInputTableRequest_InputTableKind() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CreateInputTableRequest_InputTableKind::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
  _impl_.~Impl_();
}

void CreateInputTableRequest_InputTableKind::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (kind_case()) {
    case kInMemoryAppendOnly: {
      if (GetArena() == nullptr) {
        delete _impl_.kind_.in_memory_append_only_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.in_memory_append_only_);
      }
      break;
    }
    case kInMemoryKeyBacked: {
      if (GetArena() == nullptr) {
        delete _impl_.kind_.in_memory_key_backed_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.in_memory_key_backed_);
      }
      break;
    }
    case kBlink: {
      if (GetArena() == nullptr) {
        delete _impl_.kind_.blink_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.blink_);
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    CreateInputTableRequest_InputTableKind::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_CreateInputTableRequest_InputTableKind_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &CreateInputTableRequest_InputTableKind::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<CreateInputTableRequest_InputTableKind>(),
            ::google::protobuf::Message::GetNewImpl<CreateInputTableRequest_InputTableKind>(),
            ::google::protobuf::Message::GetClearImpl<CreateInputTableRequest_InputTableKind>(), &CreateInputTableRequest_InputTableKind::ByteSizeLong,
                &CreateInputTableRequest_InputTableKind::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(CreateInputTableRequest_InputTableKind, _impl_._cached_size_),
            false,
        },
        &CreateInputTableRequest_InputTableKind::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* CreateInputTableRequest_InputTableKind::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 3, 0, 2> CreateInputTableRequest_InputTableKind::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly in_memory_append_only = 1;
    {PROTOBUF_FIELD_OFFSET(CreateInputTableRequest_InputTableKind, _impl_.kind_.in_memory_append_only_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked in_memory_key_backed = 2;
    {PROTOBUF_FIELD_OFFSET(CreateInputTableRequest_InputTableKind, _impl_.kind_.in_memory_key_backed_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.Blink blink = 3;
    {PROTOBUF_FIELD_OFFSET(CreateInputTableRequest_InputTableKind, _impl_.kind_.blink_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_Blink>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CreateInputTableRequest_InputTableKind::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CreateInputTableRequest_InputTableKind::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CreateInputTableRequest_InputTableKind& this_ = static_cast<const CreateInputTableRequest_InputTableKind&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CreateInputTableRequest_InputTableKind::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CreateInputTableRequest_InputTableKind& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.kind_case()) {
            case kInMemoryAppendOnly: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.kind_.in_memory_append_only_, this_._impl_.kind_.in_memory_append_only_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kInMemoryKeyBacked: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.kind_.in_memory_key_backed_, this_._impl_.kind_.in_memory_key_backed_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBlink: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.kind_.blink_, this_._impl_.kind_.blink_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CreateInputTableRequest_InputTableKind::ByteSizeLong(const MessageLite& base) {
          const CreateInputTableRequest_InputTableKind& this_ = static_cast<const CreateInputTableRequest_InputTableKind&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CreateInputTableRequest_InputTableKind::ByteSizeLong() const {
          const CreateInputTableRequest_InputTableKind& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.kind_case()) {
            // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly in_memory_append_only = 1;
            case kInMemoryAppendOnly: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kind_.in_memory_append_only_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked in_memory_key_backed = 2;
            case kInMemoryKeyBacked: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kind_.in_memory_key_backed_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.Blink blink = 3;
            case kBlink: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kind_.blink_);
              break;
            }
            case KIND_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CreateInputTableRequest_InputTableKind::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CreateInputTableRequest_InputTableKind*>(&to_msg);
  auto& from = static_cast<const CreateInputTableRequest_InputTableKind&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_kind();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kInMemoryAppendOnly: {
        if (oneof_needs_init) {
          _this->_impl_.kind_.in_memory_append_only_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryAppendOnly>(arena, *from._impl_.kind_.in_memory_append_only_);
        } else {
          _this->_impl_.kind_.in_memory_append_only_->MergeFrom(from._internal_in_memory_append_only());
        }
        break;
      }
      case kInMemoryKeyBacked: {
        if (oneof_needs_init) {
          _this->_impl_.kind_.in_memory_key_backed_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_InMemoryKeyBacked>(arena, *from._impl_.kind_.in_memory_key_backed_);
        } else {
          _this->_impl_.kind_.in_memory_key_backed_->MergeFrom(from._internal_in_memory_key_backed());
        }
        break;
      }
      case kBlink: {
        if (oneof_needs_init) {
          _this->_impl_.kind_.blink_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind_Blink>(arena, *from._impl_.kind_.blink_);
        } else {
          _this->_impl_.kind_.blink_->MergeFrom(from._internal_blink());
        }
        break;
      }
      case KIND_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CreateInputTableRequest_InputTableKind::CopyFrom(const CreateInputTableRequest_InputTableKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CreateInputTableRequest_InputTableKind::InternalSwap(CreateInputTableRequest_InputTableKind* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata CreateInputTableRequest_InputTableKind::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CreateInputTableRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CreateInputTableRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CreateInputTableRequest, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest, _impl_._oneof_case_);
};

void CreateInputTableRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CreateInputTableRequest::set_allocated_source_table_id(::io::deephaven::proto::backplane::grpc::TableReference* source_table_id) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (source_table_id) {
    ::google::protobuf::Arena* submessage_arena = source_table_id->GetArena();
    if (message_arena != submessage_arena) {
      source_table_id = ::google::protobuf::internal::GetOwnedMessage(message_arena, source_table_id, submessage_arena);
    }
    set_has_source_table_id();
    _impl_.definition_.source_table_id_ = source_table_id;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.CreateInputTableRequest.source_table_id)
}
CreateInputTableRequest::CreateInputTableRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE CreateInputTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::CreateInputTableRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        definition_{},
        _oneof_case_{from._oneof_case_[0]} {}

CreateInputTableRequest::CreateInputTableRequest(
    ::google::protobuf::Arena* arena,
    const CreateInputTableRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CreateInputTableRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.kind_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind>(
                              arena, *from._impl_.kind_)
                        : nullptr;
  switch (definition_case()) {
    case DEFINITION_NOT_SET:
      break;
      case kSourceTableId:
        _impl_.definition_.source_table_id_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.definition_.source_table_id_);
        break;
      case kSchema:
        new (&_impl_.definition_.schema_) decltype(_impl_.definition_.schema_){arena, from._impl_.definition_.schema_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE CreateInputTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        definition_{},
        _oneof_case_{} {}

inline void CreateInputTableRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, kind_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::kind_));
}
CreateInputTableRequest::~CreateInputTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CreateInputTableRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.kind_;
  if (has_definition()) {
    clear_definition();
  }
  _impl_.~Impl_();
}

void CreateInputTableRequest::clear_definition() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (definition_case()) {
    case kSourceTableId: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.source_table_id_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.source_table_id_);
      }
      break;
    }
    case kSchema: {
      _impl_.definition_.schema_.Destroy();
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DEFINITION_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    CreateInputTableRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_CreateInputTableRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &CreateInputTableRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<CreateInputTableRequest>(),
            ::google::protobuf::Message::GetNewImpl<CreateInputTableRequest>(),
            ::google::protobuf::Message::GetClearImpl<CreateInputTableRequest>(), &CreateInputTableRequest::ByteSizeLong,
                &CreateInputTableRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(CreateInputTableRequest, _impl_._cached_size_),
            false,
        },
        &CreateInputTableRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* CreateInputTableRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 4, 3, 0, 2> CreateInputTableRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CreateInputTableRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind kind = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 2, PROTOBUF_FIELD_OFFSET(CreateInputTableRequest, _impl_.kind_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CreateInputTableRequest, _impl_.result_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(CreateInputTableRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_table_id = 2;
    {PROTOBUF_FIELD_OFFSET(CreateInputTableRequest, _impl_.definition_.source_table_id_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes schema = 3;
    {PROTOBUF_FIELD_OFFSET(CreateInputTableRequest, _impl_.definition_.schema_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBytes | ::_fl::kRepAString)},
    // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind kind = 4;
    {PROTOBUF_FIELD_OFFSET(CreateInputTableRequest, _impl_.kind_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CreateInputTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kind_ != nullptr);
      _impl_.kind_->Clear();
    }
  }
  clear_definition();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CreateInputTableRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CreateInputTableRequest& this_ = static_cast<const CreateInputTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CreateInputTableRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CreateInputTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          switch (this_.definition_case()) {
            case kSourceTableId: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.definition_.source_table_id_, this_._impl_.definition_.source_table_id_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSchema: {
              const std::string& _s = this_._internal_schema();
              target = stream->WriteBytesMaybeAliased(3, _s, target);
              break;
            }
            default:
              break;
          }
          // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind kind = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.kind_, this_._impl_.kind_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CreateInputTableRequest::ByteSizeLong(const MessageLite& base) {
          const CreateInputTableRequest& this_ = static_cast<const CreateInputTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CreateInputTableRequest::ByteSizeLong() const {
          const CreateInputTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind kind = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kind_);
            }
          }
          switch (this_.definition_case()) {
            // .io.deephaven.proto.backplane.grpc.TableReference source_table_id = 2;
            case kSourceTableId: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.source_table_id_);
              break;
            }
            // bytes schema = 3;
            case kSchema: {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_schema());
              break;
            }
            case DEFINITION_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CreateInputTableRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CreateInputTableRequest*>(&to_msg);
  auto& from = static_cast<const CreateInputTableRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.kind_ != nullptr);
      if (_this->_impl_.kind_ == nullptr) {
        _this->_impl_.kind_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest_InputTableKind>(arena, *from._impl_.kind_);
      } else {
        _this->_impl_.kind_->MergeFrom(*from._impl_.kind_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_definition();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kSourceTableId: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.source_table_id_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.definition_.source_table_id_);
        } else {
          _this->_impl_.definition_.source_table_id_->MergeFrom(from._internal_source_table_id());
        }
        break;
      }
      case kSchema: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.schema_.InitDefault();
        }
        _this->_impl_.definition_.schema_.Set(from._internal_schema(), arena);
        break;
      }
      case DEFINITION_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CreateInputTableRequest::CopyFrom(const CreateInputTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.CreateInputTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CreateInputTableRequest::InternalSwap(CreateInputTableRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateInputTableRequest, _impl_.kind_)
      + sizeof(CreateInputTableRequest::_impl_.kind_)
      - PROTOBUF_FIELD_OFFSET(CreateInputTableRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
  swap(_impl_.definition_, other->_impl_.definition_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata CreateInputTableRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WhereInRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<WhereInRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(WhereInRequest, _impl_._has_bits_);
};

void WhereInRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
WhereInRequest::WhereInRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.WhereInRequest)
}
inline PROTOBUF_NDEBUG_INLINE WhereInRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::WhereInRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        columns_to_match_{visibility, arena, from.columns_to_match_} {}

WhereInRequest::WhereInRequest(
    ::google::protobuf::Arena* arena,
    const WhereInRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WhereInRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.left_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.left_id_)
                        : nullptr;
  _impl_.right_id_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.right_id_)
                        : nullptr;
  _impl_.inverted_ = from._impl_.inverted_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.WhereInRequest)
}
inline PROTOBUF_NDEBUG_INLINE WhereInRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        columns_to_match_{visibility, arena} {}

inline void WhereInRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, inverted_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::inverted_));
}
WhereInRequest::~WhereInRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.WhereInRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void WhereInRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.result_id_;
  delete _impl_.left_id_;
  delete _impl_.right_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    WhereInRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_WhereInRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &WhereInRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<WhereInRequest>(),
            ::google::protobuf::Message::GetNewImpl<WhereInRequest>(),
            ::google::protobuf::Message::GetClearImpl<WhereInRequest>(), &WhereInRequest::ByteSizeLong,
                &WhereInRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(WhereInRequest, _impl_._cached_size_),
            false,
        },
        &WhereInRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* WhereInRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 73, 2> WhereInRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WhereInRequest, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::WhereInRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(WhereInRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(WhereInRequest, _impl_.left_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(WhereInRequest, _impl_.right_id_)}},
    // bool inverted = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(WhereInRequest, _impl_.inverted_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(WhereInRequest, _impl_.inverted_)}},
    // repeated string columns_to_match = 5;
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(WhereInRequest, _impl_.columns_to_match_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(WhereInRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
    {PROTOBUF_FIELD_OFFSET(WhereInRequest, _impl_.left_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
    {PROTOBUF_FIELD_OFFSET(WhereInRequest, _impl_.right_id_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool inverted = 4;
    {PROTOBUF_FIELD_OFFSET(WhereInRequest, _impl_.inverted_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string columns_to_match = 5;
    {PROTOBUF_FIELD_OFFSET(WhereInRequest, _impl_.columns_to_match_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\60\0\0\0\0\20\0\0"
    "io.deephaven.proto.backplane.grpc.WhereInRequest"
    "columns_to_match"
  }},
};

PROTOBUF_NOINLINE void WhereInRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.WhereInRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_to_match_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.left_id_ != nullptr);
      _impl_.left_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.right_id_ != nullptr);
      _impl_.right_id_->Clear();
    }
  }
  _impl_.inverted_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* WhereInRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const WhereInRequest& this_ = static_cast<const WhereInRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* WhereInRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const WhereInRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.WhereInRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.left_id_, this_._impl_.left_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.right_id_, this_._impl_.right_id_->GetCachedSize(), target,
                stream);
          }

          // bool inverted = 4;
          if (this_._internal_inverted() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_inverted(), target);
          }

          // repeated string columns_to_match = 5;
          for (int i = 0, n = this_._internal_columns_to_match_size(); i < n; ++i) {
            const auto& s = this_._internal_columns_to_match().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.WhereInRequest.columns_to_match");
            target = stream->WriteString(5, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.WhereInRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t WhereInRequest::ByteSizeLong(const MessageLite& base) {
          const WhereInRequest& this_ = static_cast<const WhereInRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t WhereInRequest::ByteSizeLong() const {
          const WhereInRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.WhereInRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string columns_to_match = 5;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_columns_to_match().size());
              for (int i = 0, n = this_._internal_columns_to_match().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_columns_to_match().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference left_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.left_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference right_id = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.right_id_);
            }
          }
           {
            // bool inverted = 4;
            if (this_._internal_inverted() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void WhereInRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WhereInRequest*>(&to_msg);
  auto& from = static_cast<const WhereInRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.WhereInRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_columns_to_match()->MergeFrom(from._internal_columns_to_match());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.left_id_ != nullptr);
      if (_this->_impl_.left_id_ == nullptr) {
        _this->_impl_.left_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.left_id_);
      } else {
        _this->_impl_.left_id_->MergeFrom(*from._impl_.left_id_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.right_id_ != nullptr);
      if (_this->_impl_.right_id_ == nullptr) {
        _this->_impl_.right_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.right_id_);
      } else {
        _this->_impl_.right_id_->MergeFrom(*from._impl_.right_id_);
      }
    }
  }
  if (from._internal_inverted() != 0) {
    _this->_impl_.inverted_ = from._impl_.inverted_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WhereInRequest::CopyFrom(const WhereInRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.WhereInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WhereInRequest::InternalSwap(WhereInRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.columns_to_match_.InternalSwap(&other->_impl_.columns_to_match_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WhereInRequest, _impl_.inverted_)
      + sizeof(WhereInRequest::_impl_.inverted_)
      - PROTOBUF_FIELD_OFFSET(WhereInRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata WhereInRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ColumnStatisticsRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ColumnStatisticsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ColumnStatisticsRequest, _impl_._has_bits_);
};

void ColumnStatisticsRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ColumnStatisticsRequest::ColumnStatisticsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
}
inline PROTOBUF_NDEBUG_INLINE ColumnStatisticsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        column_name_(arena, from.column_name_) {}

ColumnStatisticsRequest::ColumnStatisticsRequest(
    ::google::protobuf::Arena* arena,
    const ColumnStatisticsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ColumnStatisticsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.source_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(
                              arena, *from._impl_.source_id_)
                        : nullptr;
  _impl_.unique_value_limit_ = from._impl_.unique_value_limit_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
}
inline PROTOBUF_NDEBUG_INLINE ColumnStatisticsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        column_name_(arena) {}

inline void ColumnStatisticsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_id_),
           0,
           offsetof(Impl_, unique_value_limit_) -
               offsetof(Impl_, result_id_) +
               sizeof(Impl_::unique_value_limit_));
}
ColumnStatisticsRequest::~ColumnStatisticsRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ColumnStatisticsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.column_name_.Destroy();
  delete _impl_.result_id_;
  delete _impl_.source_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    ColumnStatisticsRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_ColumnStatisticsRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &ColumnStatisticsRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<ColumnStatisticsRequest>(),
            ::google::protobuf::Message::GetNewImpl<ColumnStatisticsRequest>(),
            ::google::protobuf::Message::GetClearImpl<ColumnStatisticsRequest>(), &ColumnStatisticsRequest::ByteSizeLong,
                &ColumnStatisticsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(ColumnStatisticsRequest, _impl_._cached_size_),
            false,
        },
        &ColumnStatisticsRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* ColumnStatisticsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 77, 2> ColumnStatisticsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ColumnStatisticsRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional int32 unique_value_limit = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ColumnStatisticsRequest, _impl_.unique_value_limit_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(ColumnStatisticsRequest, _impl_.unique_value_limit_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ColumnStatisticsRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(ColumnStatisticsRequest, _impl_.source_id_)}},
    // string column_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ColumnStatisticsRequest, _impl_.column_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
    {PROTOBUF_FIELD_OFFSET(ColumnStatisticsRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
    {PROTOBUF_FIELD_OFFSET(ColumnStatisticsRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string column_name = 3;
    {PROTOBUF_FIELD_OFFSET(ColumnStatisticsRequest, _impl_.column_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 unique_value_limit = 4;
    {PROTOBUF_FIELD_OFFSET(ColumnStatisticsRequest, _impl_.unique_value_limit_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TableReference>()},
  }}, {{
    "\71\0\0\13\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest"
    "column_name"
  }},
};

PROTOBUF_NOINLINE void ColumnStatisticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.source_id_ != nullptr);
      _impl_.source_id_->Clear();
    }
  }
  _impl_.unique_value_limit_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ColumnStatisticsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ColumnStatisticsRequest& this_ = static_cast<const ColumnStatisticsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ColumnStatisticsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ColumnStatisticsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.source_id_, this_._impl_.source_id_->GetCachedSize(), target,
                stream);
          }

          // string column_name = 3;
          if (!this_._internal_column_name().empty()) {
            const std::string& _s = this_._internal_column_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest.column_name");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // optional int32 unique_value_limit = 4;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_unique_value_limit(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ColumnStatisticsRequest::ByteSizeLong(const MessageLite& base) {
          const ColumnStatisticsRequest& this_ = static_cast<const ColumnStatisticsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ColumnStatisticsRequest::ByteSizeLong() const {
          const ColumnStatisticsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string column_name = 3;
            if (!this_._internal_column_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_column_name());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
            // .io.deephaven.proto.backplane.grpc.TableReference source_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.source_id_);
            }
            // optional int32 unique_value_limit = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_unique_value_limit());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ColumnStatisticsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ColumnStatisticsRequest*>(&to_msg);
  auto& from = static_cast<const ColumnStatisticsRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column_name().empty()) {
    _this->_internal_set_column_name(from._internal_column_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.source_id_ != nullptr);
      if (_this->_impl_.source_id_ == nullptr) {
        _this->_impl_.source_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TableReference>(arena, *from._impl_.source_id_);
      } else {
        _this->_impl_.source_id_->MergeFrom(*from._impl_.source_id_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.unique_value_limit_ = from._impl_.unique_value_limit_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnStatisticsRequest::CopyFrom(const ColumnStatisticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ColumnStatisticsRequest::InternalSwap(ColumnStatisticsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.column_name_, &other->_impl_.column_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnStatisticsRequest, _impl_.unique_value_limit_)
      + sizeof(ColumnStatisticsRequest::_impl_.unique_value_limit_)
      - PROTOBUF_FIELD_OFFSET(ColumnStatisticsRequest, _impl_.result_id_)>(
          reinterpret_cast<char*>(&_impl_.result_id_),
          reinterpret_cast<char*>(&other->_impl_.result_id_));
}

::google::protobuf::Metadata ColumnStatisticsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BatchTableRequest_Operation::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation, _impl_._oneof_case_);
};

void BatchTableRequest_Operation::set_allocated_empty_table(::io::deephaven::proto::backplane::grpc::EmptyTableRequest* empty_table) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (empty_table) {
    ::google::protobuf::Arena* submessage_arena = empty_table->GetArena();
    if (message_arena != submessage_arena) {
      empty_table = ::google::protobuf::internal::GetOwnedMessage(message_arena, empty_table, submessage_arena);
    }
    set_has_empty_table();
    _impl_.op_.empty_table_ = empty_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.empty_table)
}
void BatchTableRequest_Operation::set_allocated_time_table(::io::deephaven::proto::backplane::grpc::TimeTableRequest* time_table) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (time_table) {
    ::google::protobuf::Arena* submessage_arena = time_table->GetArena();
    if (message_arena != submessage_arena) {
      time_table = ::google::protobuf::internal::GetOwnedMessage(message_arena, time_table, submessage_arena);
    }
    set_has_time_table();
    _impl_.op_.time_table_ = time_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.time_table)
}
void BatchTableRequest_Operation::set_allocated_drop_columns(::io::deephaven::proto::backplane::grpc::DropColumnsRequest* drop_columns) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (drop_columns) {
    ::google::protobuf::Arena* submessage_arena = drop_columns->GetArena();
    if (message_arena != submessage_arena) {
      drop_columns = ::google::protobuf::internal::GetOwnedMessage(message_arena, drop_columns, submessage_arena);
    }
    set_has_drop_columns();
    _impl_.op_.drop_columns_ = drop_columns;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.drop_columns)
}
void BatchTableRequest_Operation::set_allocated_update(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* update) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (update) {
    ::google::protobuf::Arena* submessage_arena = update->GetArena();
    if (message_arena != submessage_arena) {
      update = ::google::protobuf::internal::GetOwnedMessage(message_arena, update, submessage_arena);
    }
    set_has_update();
    _impl_.op_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update)
}
void BatchTableRequest_Operation::set_allocated_lazy_update(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* lazy_update) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (lazy_update) {
    ::google::protobuf::Arena* submessage_arena = lazy_update->GetArena();
    if (message_arena != submessage_arena) {
      lazy_update = ::google::protobuf::internal::GetOwnedMessage(message_arena, lazy_update, submessage_arena);
    }
    set_has_lazy_update();
    _impl_.op_.lazy_update_ = lazy_update;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.lazy_update)
}
void BatchTableRequest_Operation::set_allocated_view(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* view) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (view) {
    ::google::protobuf::Arena* submessage_arena = view->GetArena();
    if (message_arena != submessage_arena) {
      view = ::google::protobuf::internal::GetOwnedMessage(message_arena, view, submessage_arena);
    }
    set_has_view();
    _impl_.op_.view_ = view;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.view)
}
void BatchTableRequest_Operation::set_allocated_update_view(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* update_view) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (update_view) {
    ::google::protobuf::Arena* submessage_arena = update_view->GetArena();
    if (message_arena != submessage_arena) {
      update_view = ::google::protobuf::internal::GetOwnedMessage(message_arena, update_view, submessage_arena);
    }
    set_has_update_view();
    _impl_.op_.update_view_ = update_view;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update_view)
}
void BatchTableRequest_Operation::set_allocated_select(::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest* select) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (select) {
    ::google::protobuf::Arena* submessage_arena = select->GetArena();
    if (message_arena != submessage_arena) {
      select = ::google::protobuf::internal::GetOwnedMessage(message_arena, select, submessage_arena);
    }
    set_has_select();
    _impl_.op_.select_ = select;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select)
}
void BatchTableRequest_Operation::set_allocated_select_distinct(::io::deephaven::proto::backplane::grpc::SelectDistinctRequest* select_distinct) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (select_distinct) {
    ::google::protobuf::Arena* submessage_arena = select_distinct->GetArena();
    if (message_arena != submessage_arena) {
      select_distinct = ::google::protobuf::internal::GetOwnedMessage(message_arena, select_distinct, submessage_arena);
    }
    set_has_select_distinct();
    _impl_.op_.select_distinct_ = select_distinct;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.select_distinct)
}
void BatchTableRequest_Operation::set_allocated_filter(::io::deephaven::proto::backplane::grpc::FilterTableRequest* filter) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (filter) {
    ::google::protobuf::Arena* submessage_arena = filter->GetArena();
    if (message_arena != submessage_arena) {
      filter = ::google::protobuf::internal::GetOwnedMessage(message_arena, filter, submessage_arena);
    }
    set_has_filter();
    _impl_.op_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.filter)
}
void BatchTableRequest_Operation::set_allocated_unstructured_filter(::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest* unstructured_filter) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (unstructured_filter) {
    ::google::protobuf::Arena* submessage_arena = unstructured_filter->GetArena();
    if (message_arena != submessage_arena) {
      unstructured_filter = ::google::protobuf::internal::GetOwnedMessage(message_arena, unstructured_filter, submessage_arena);
    }
    set_has_unstructured_filter();
    _impl_.op_.unstructured_filter_ = unstructured_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.unstructured_filter)
}
void BatchTableRequest_Operation::set_allocated_sort(::io::deephaven::proto::backplane::grpc::SortTableRequest* sort) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (sort) {
    ::google::protobuf::Arena* submessage_arena = sort->GetArena();
    if (message_arena != submessage_arena) {
      sort = ::google::protobuf::internal::GetOwnedMessage(message_arena, sort, submessage_arena);
    }
    set_has_sort();
    _impl_.op_.sort_ = sort;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.sort)
}
void BatchTableRequest_Operation::set_allocated_head(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* head) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (head) {
    ::google::protobuf::Arena* submessage_arena = head->GetArena();
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(message_arena, head, submessage_arena);
    }
    set_has_head();
    _impl_.op_.head_ = head;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head)
}
void BatchTableRequest_Operation::set_allocated_tail(::io::deephaven::proto::backplane::grpc::HeadOrTailRequest* tail) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (tail) {
    ::google::protobuf::Arena* submessage_arena = tail->GetArena();
    if (message_arena != submessage_arena) {
      tail = ::google::protobuf::internal::GetOwnedMessage(message_arena, tail, submessage_arena);
    }
    set_has_tail();
    _impl_.op_.tail_ = tail;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail)
}
void BatchTableRequest_Operation::set_allocated_head_by(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* head_by) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (head_by) {
    ::google::protobuf::Arena* submessage_arena = head_by->GetArena();
    if (message_arena != submessage_arena) {
      head_by = ::google::protobuf::internal::GetOwnedMessage(message_arena, head_by, submessage_arena);
    }
    set_has_head_by();
    _impl_.op_.head_by_ = head_by;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.head_by)
}
void BatchTableRequest_Operation::set_allocated_tail_by(::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest* tail_by) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (tail_by) {
    ::google::protobuf::Arena* submessage_arena = tail_by->GetArena();
    if (message_arena != submessage_arena) {
      tail_by = ::google::protobuf::internal::GetOwnedMessage(message_arena, tail_by, submessage_arena);
    }
    set_has_tail_by();
    _impl_.op_.tail_by_ = tail_by;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.tail_by)
}
void BatchTableRequest_Operation::set_allocated_ungroup(::io::deephaven::proto::backplane::grpc::UngroupRequest* ungroup) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (ungroup) {
    ::google::protobuf::Arena* submessage_arena = ungroup->GetArena();
    if (message_arena != submessage_arena) {
      ungroup = ::google::protobuf::internal::GetOwnedMessage(message_arena, ungroup, submessage_arena);
    }
    set_has_ungroup();
    _impl_.op_.ungroup_ = ungroup;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.ungroup)
}
void BatchTableRequest_Operation::set_allocated_merge(::io::deephaven::proto::backplane::grpc::MergeTablesRequest* merge) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (merge) {
    ::google::protobuf::Arena* submessage_arena = merge->GetArena();
    if (message_arena != submessage_arena) {
      merge = ::google::protobuf::internal::GetOwnedMessage(message_arena, merge, submessage_arena);
    }
    set_has_merge();
    _impl_.op_.merge_ = merge;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.merge)
}
void BatchTableRequest_Operation::set_allocated_combo_aggregate(::io::deephaven::proto::backplane::grpc::ComboAggregateRequest* combo_aggregate) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (combo_aggregate) {
    ::google::protobuf::Arena* submessage_arena = combo_aggregate->GetArena();
    if (message_arena != submessage_arena) {
      combo_aggregate = ::google::protobuf::internal::GetOwnedMessage(message_arena, combo_aggregate, submessage_arena);
    }
    set_has_combo_aggregate();
    _impl_.op_.combo_aggregate_ = combo_aggregate;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.combo_aggregate)
}
void BatchTableRequest_Operation::set_allocated_flatten(::io::deephaven::proto::backplane::grpc::FlattenRequest* flatten) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (flatten) {
    ::google::protobuf::Arena* submessage_arena = flatten->GetArena();
    if (message_arena != submessage_arena) {
      flatten = ::google::protobuf::internal::GetOwnedMessage(message_arena, flatten, submessage_arena);
    }
    set_has_flatten();
    _impl_.op_.flatten_ = flatten;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.flatten)
}
void BatchTableRequest_Operation::set_allocated_run_chart_downsample(::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest* run_chart_downsample) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (run_chart_downsample) {
    ::google::protobuf::Arena* submessage_arena = run_chart_downsample->GetArena();
    if (message_arena != submessage_arena) {
      run_chart_downsample = ::google::protobuf::internal::GetOwnedMessage(message_arena, run_chart_downsample, submessage_arena);
    }
    set_has_run_chart_downsample();
    _impl_.op_.run_chart_downsample_ = run_chart_downsample;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.run_chart_downsample)
}
void BatchTableRequest_Operation::set_allocated_cross_join(::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest* cross_join) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (cross_join) {
    ::google::protobuf::Arena* submessage_arena = cross_join->GetArena();
    if (message_arena != submessage_arena) {
      cross_join = ::google::protobuf::internal::GetOwnedMessage(message_arena, cross_join, submessage_arena);
    }
    set_has_cross_join();
    _impl_.op_.cross_join_ = cross_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.cross_join)
}
void BatchTableRequest_Operation::set_allocated_natural_join(::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest* natural_join) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (natural_join) {
    ::google::protobuf::Arena* submessage_arena = natural_join->GetArena();
    if (message_arena != submessage_arena) {
      natural_join = ::google::protobuf::internal::GetOwnedMessage(message_arena, natural_join, submessage_arena);
    }
    set_has_natural_join();
    _impl_.op_.natural_join_ = natural_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.natural_join)
}
void BatchTableRequest_Operation::set_allocated_exact_join(::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest* exact_join) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (exact_join) {
    ::google::protobuf::Arena* submessage_arena = exact_join->GetArena();
    if (message_arena != submessage_arena) {
      exact_join = ::google::protobuf::internal::GetOwnedMessage(message_arena, exact_join, submessage_arena);
    }
    set_has_exact_join();
    _impl_.op_.exact_join_ = exact_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.exact_join)
}
void BatchTableRequest_Operation::set_allocated_left_join(::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest* left_join) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (left_join) {
    ::google::protobuf::Arena* submessage_arena = left_join->GetArena();
    if (message_arena != submessage_arena) {
      left_join = ::google::protobuf::internal::GetOwnedMessage(message_arena, left_join, submessage_arena);
    }
    set_has_left_join();
    _impl_.op_.left_join_ = left_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.left_join)
}
void BatchTableRequest_Operation::set_allocated_as_of_join(::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest* as_of_join) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (as_of_join) {
    ::google::protobuf::Arena* submessage_arena = as_of_join->GetArena();
    if (message_arena != submessage_arena) {
      as_of_join = ::google::protobuf::internal::GetOwnedMessage(message_arena, as_of_join, submessage_arena);
    }
    set_has_as_of_join();
    _impl_.op_.as_of_join_ = as_of_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.as_of_join)
}
void BatchTableRequest_Operation::set_allocated_fetch_table(::io::deephaven::proto::backplane::grpc::FetchTableRequest* fetch_table) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (fetch_table) {
    ::google::protobuf::Arena* submessage_arena = fetch_table->GetArena();
    if (message_arena != submessage_arena) {
      fetch_table = ::google::protobuf::internal::GetOwnedMessage(message_arena, fetch_table, submessage_arena);
    }
    set_has_fetch_table();
    _impl_.op_.fetch_table_ = fetch_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.fetch_table)
}
void BatchTableRequest_Operation::set_allocated_apply_preview_columns(::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest* apply_preview_columns) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (apply_preview_columns) {
    ::google::protobuf::Arena* submessage_arena = apply_preview_columns->GetArena();
    if (message_arena != submessage_arena) {
      apply_preview_columns = ::google::protobuf::internal::GetOwnedMessage(message_arena, apply_preview_columns, submessage_arena);
    }
    set_has_apply_preview_columns();
    _impl_.op_.apply_preview_columns_ = apply_preview_columns;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.apply_preview_columns)
}
void BatchTableRequest_Operation::set_allocated_create_input_table(::io::deephaven::proto::backplane::grpc::CreateInputTableRequest* create_input_table) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (create_input_table) {
    ::google::protobuf::Arena* submessage_arena = create_input_table->GetArena();
    if (message_arena != submessage_arena) {
      create_input_table = ::google::protobuf::internal::GetOwnedMessage(message_arena, create_input_table, submessage_arena);
    }
    set_has_create_input_table();
    _impl_.op_.create_input_table_ = create_input_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.create_input_table)
}
void BatchTableRequest_Operation::set_allocated_update_by(::io::deephaven::proto::backplane::grpc::UpdateByRequest* update_by) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (update_by) {
    ::google::protobuf::Arena* submessage_arena = update_by->GetArena();
    if (message_arena != submessage_arena) {
      update_by = ::google::protobuf::internal::GetOwnedMessage(message_arena, update_by, submessage_arena);
    }
    set_has_update_by();
    _impl_.op_.update_by_ = update_by;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.update_by)
}
void BatchTableRequest_Operation::set_allocated_where_in(::io::deephaven::proto::backplane::grpc::WhereInRequest* where_in) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (where_in) {
    ::google::protobuf::Arena* submessage_arena = where_in->GetArena();
    if (message_arena != submessage_arena) {
      where_in = ::google::protobuf::internal::GetOwnedMessage(message_arena, where_in, submessage_arena);
    }
    set_has_where_in();
    _impl_.op_.where_in_ = where_in;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.where_in)
}
void BatchTableRequest_Operation::set_allocated_aggregate_all(::io::deephaven::proto::backplane::grpc::AggregateAllRequest* aggregate_all) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (aggregate_all) {
    ::google::protobuf::Arena* submessage_arena = aggregate_all->GetArena();
    if (message_arena != submessage_arena) {
      aggregate_all = ::google::protobuf::internal::GetOwnedMessage(message_arena, aggregate_all, submessage_arena);
    }
    set_has_aggregate_all();
    _impl_.op_.aggregate_all_ = aggregate_all;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.aggregate_all)
}
void BatchTableRequest_Operation::set_allocated_aggregate(::io::deephaven::proto::backplane::grpc::AggregateRequest* aggregate) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (aggregate) {
    ::google::protobuf::Arena* submessage_arena = aggregate->GetArena();
    if (message_arena != submessage_arena) {
      aggregate = ::google::protobuf::internal::GetOwnedMessage(message_arena, aggregate, submessage_arena);
    }
    set_has_aggregate();
    _impl_.op_.aggregate_ = aggregate;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.aggregate)
}
void BatchTableRequest_Operation::set_allocated_snapshot(::io::deephaven::proto::backplane::grpc::SnapshotTableRequest* snapshot) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (snapshot) {
    ::google::protobuf::Arena* submessage_arena = snapshot->GetArena();
    if (message_arena != submessage_arena) {
      snapshot = ::google::protobuf::internal::GetOwnedMessage(message_arena, snapshot, submessage_arena);
    }
    set_has_snapshot();
    _impl_.op_.snapshot_ = snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.snapshot)
}
void BatchTableRequest_Operation::set_allocated_snapshot_when(::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest* snapshot_when) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (snapshot_when) {
    ::google::protobuf::Arena* submessage_arena = snapshot_when->GetArena();
    if (message_arena != submessage_arena) {
      snapshot_when = ::google::protobuf::internal::GetOwnedMessage(message_arena, snapshot_when, submessage_arena);
    }
    set_has_snapshot_when();
    _impl_.op_.snapshot_when_ = snapshot_when;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.snapshot_when)
}
void BatchTableRequest_Operation::set_allocated_meta_table(::io::deephaven::proto::backplane::grpc::MetaTableRequest* meta_table) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (meta_table) {
    ::google::protobuf::Arena* submessage_arena = meta_table->GetArena();
    if (message_arena != submessage_arena) {
      meta_table = ::google::protobuf::internal::GetOwnedMessage(message_arena, meta_table, submessage_arena);
    }
    set_has_meta_table();
    _impl_.op_.meta_table_ = meta_table;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.meta_table)
}
void BatchTableRequest_Operation::set_allocated_range_join(::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest* range_join) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (range_join) {
    ::google::protobuf::Arena* submessage_arena = range_join->GetArena();
    if (message_arena != submessage_arena) {
      range_join = ::google::protobuf::internal::GetOwnedMessage(message_arena, range_join, submessage_arena);
    }
    set_has_range_join();
    _impl_.op_.range_join_ = range_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.range_join)
}
void BatchTableRequest_Operation::set_allocated_aj(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest* aj) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (aj) {
    ::google::protobuf::Arena* submessage_arena = aj->GetArena();
    if (message_arena != submessage_arena) {
      aj = ::google::protobuf::internal::GetOwnedMessage(message_arena, aj, submessage_arena);
    }
    set_has_aj();
    _impl_.op_.aj_ = aj;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.aj)
}
void BatchTableRequest_Operation::set_allocated_raj(::io::deephaven::proto::backplane::grpc::AjRajTablesRequest* raj) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (raj) {
    ::google::protobuf::Arena* submessage_arena = raj->GetArena();
    if (message_arena != submessage_arena) {
      raj = ::google::protobuf::internal::GetOwnedMessage(message_arena, raj, submessage_arena);
    }
    set_has_raj();
    _impl_.op_.raj_ = raj;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.raj)
}
void BatchTableRequest_Operation::set_allocated_column_statistics(::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest* column_statistics) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (column_statistics) {
    ::google::protobuf::Arena* submessage_arena = column_statistics->GetArena();
    if (message_arena != submessage_arena) {
      column_statistics = ::google::protobuf::internal::GetOwnedMessage(message_arena, column_statistics, submessage_arena);
    }
    set_has_column_statistics();
    _impl_.op_.column_statistics_ = column_statistics;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.column_statistics)
}
void BatchTableRequest_Operation::set_allocated_multi_join(::io::deephaven::proto::backplane::grpc::MultiJoinTablesRequest* multi_join) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_op();
  if (multi_join) {
    ::google::protobuf::Arena* submessage_arena = multi_join->GetArena();
    if (message_arena != submessage_arena) {
      multi_join = ::google::protobuf::internal::GetOwnedMessage(message_arena, multi_join, submessage_arena);
    }
    set_has_multi_join();
    _impl_.op_.multi_join_ = multi_join;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation.multi_join)
}
BatchTableRequest_Operation::BatchTableRequest_Operation(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
}
inline PROTOBUF_NDEBUG_INLINE BatchTableRequest_Operation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation& from_msg)
      : op_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

BatchTableRequest_Operation::BatchTableRequest_Operation(
    ::google::protobuf::Arena* arena,
    const BatchTableRequest_Operation& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BatchTableRequest_Operation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (op_case()) {
    case OP_NOT_SET:
      break;
      case kEmptyTable:
        _impl_.op_.empty_table_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::EmptyTableRequest>(arena, *from._impl_.op_.empty_table_);
        break;
      case kTimeTable:
        _impl_.op_.time_table_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TimeTableRequest>(arena, *from._impl_.op_.time_table_);
        break;
      case kDropColumns:
        _impl_.op_.drop_columns_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::DropColumnsRequest>(arena, *from._impl_.op_.drop_columns_);
        break;
      case kUpdate:
        _impl_.op_.update_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>(arena, *from._impl_.op_.update_);
        break;
      case kLazyUpdate:
        _impl_.op_.lazy_update_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>(arena, *from._impl_.op_.lazy_update_);
        break;
      case kView:
        _impl_.op_.view_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>(arena, *from._impl_.op_.view_);
        break;
      case kUpdateView:
        _impl_.op_.update_view_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>(arena, *from._impl_.op_.update_view_);
        break;
      case kSelect:
        _impl_.op_.select_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>(arena, *from._impl_.op_.select_);
        break;
      case kSelectDistinct:
        _impl_.op_.select_distinct_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SelectDistinctRequest>(arena, *from._impl_.op_.select_distinct_);
        break;
      case kFilter:
        _impl_.op_.filter_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::FilterTableRequest>(arena, *from._impl_.op_.filter_);
        break;
      case kUnstructuredFilter:
        _impl_.op_.unstructured_filter_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest>(arena, *from._impl_.op_.unstructured_filter_);
        break;
      case kSort:
        _impl_.op_.sort_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SortTableRequest>(arena, *from._impl_.op_.sort_);
        break;
      case kHead:
        _impl_.op_.head_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::HeadOrTailRequest>(arena, *from._impl_.op_.head_);
        break;
      case kTail:
        _impl_.op_.tail_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::HeadOrTailRequest>(arena, *from._impl_.op_.tail_);
        break;
      case kHeadBy:
        _impl_.op_.head_by_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest>(arena, *from._impl_.op_.head_by_);
        break;
      case kTailBy:
        _impl_.op_.tail_by_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest>(arena, *from._impl_.op_.tail_by_);
        break;
      case kUngroup:
        _impl_.op_.ungroup_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UngroupRequest>(arena, *from._impl_.op_.ungroup_);
        break;
      case kMerge:
        _impl_.op_.merge_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::MergeTablesRequest>(arena, *from._impl_.op_.merge_);
        break;
      case kComboAggregate:
        _impl_.op_.combo_aggregate_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::ComboAggregateRequest>(arena, *from._impl_.op_.combo_aggregate_);
        break;
      case kFlatten:
        _impl_.op_.flatten_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::FlattenRequest>(arena, *from._impl_.op_.flatten_);
        break;
      case kRunChartDownsample:
        _impl_.op_.run_chart_downsample_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest>(arena, *from._impl_.op_.run_chart_downsample_);
        break;
      case kCrossJoin:
        _impl_.op_.cross_join_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest>(arena, *from._impl_.op_.cross_join_);
        break;
      case kNaturalJoin:
        _impl_.op_.natural_join_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest>(arena, *from._impl_.op_.natural_join_);
        break;
      case kExactJoin:
        _impl_.op_.exact_join_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest>(arena, *from._impl_.op_.exact_join_);
        break;
      case kLeftJoin:
        _impl_.op_.left_join_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest>(arena, *from._impl_.op_.left_join_);
        break;
      case kAsOfJoin:
        _impl_.op_.as_of_join_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest>(arena, *from._impl_.op_.as_of_join_);
        break;
      case kFetchTable:
        _impl_.op_.fetch_table_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::FetchTableRequest>(arena, *from._impl_.op_.fetch_table_);
        break;
      case kApplyPreviewColumns:
        _impl_.op_.apply_preview_columns_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest>(arena, *from._impl_.op_.apply_preview_columns_);
        break;
      case kCreateInputTable:
        _impl_.op_.create_input_table_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest>(arena, *from._impl_.op_.create_input_table_);
        break;
      case kUpdateBy:
        _impl_.op_.update_by_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest>(arena, *from._impl_.op_.update_by_);
        break;
      case kWhereIn:
        _impl_.op_.where_in_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::WhereInRequest>(arena, *from._impl_.op_.where_in_);
        break;
      case kAggregateAll:
        _impl_.op_.aggregate_all_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggregateAllRequest>(arena, *from._impl_.op_.aggregate_all_);
        break;
      case kAggregate:
        _impl_.op_.aggregate_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggregateRequest>(arena, *from._impl_.op_.aggregate_);
        break;
      case kSnapshot:
        _impl_.op_.snapshot_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SnapshotTableRequest>(arena, *from._impl_.op_.snapshot_);
        break;
      case kSnapshotWhen:
        _impl_.op_.snapshot_when_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest>(arena, *from._impl_.op_.snapshot_when_);
        break;
      case kMetaTable:
        _impl_.op_.meta_table_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::MetaTableRequest>(arena, *from._impl_.op_.meta_table_);
        break;
      case kRangeJoin:
        _impl_.op_.range_join_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest>(arena, *from._impl_.op_.range_join_);
        break;
      case kAj:
        _impl_.op_.aj_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AjRajTablesRequest>(arena, *from._impl_.op_.aj_);
        break;
      case kRaj:
        _impl_.op_.raj_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AjRajTablesRequest>(arena, *from._impl_.op_.raj_);
        break;
      case kColumnStatistics:
        _impl_.op_.column_statistics_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest>(arena, *from._impl_.op_.column_statistics_);
        break;
      case kMultiJoin:
        _impl_.op_.multi_join_ = ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::MultiJoinTablesRequest>(arena, *from._impl_.op_.multi_join_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
}
inline PROTOBUF_NDEBUG_INLINE BatchTableRequest_Operation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : op_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void BatchTableRequest_Operation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
BatchTableRequest_Operation::~BatchTableRequest_Operation() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BatchTableRequest_Operation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_op()) {
    clear_op();
  }
  _impl_.~Impl_();
}

void BatchTableRequest_Operation::clear_op() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (op_case()) {
    case kEmptyTable: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.empty_table_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.empty_table_);
      }
      break;
    }
    case kTimeTable: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.time_table_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.time_table_);
      }
      break;
    }
    case kDropColumns: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.drop_columns_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.drop_columns_);
      }
      break;
    }
    case kUpdate: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.update_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.update_);
      }
      break;
    }
    case kLazyUpdate: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.lazy_update_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.lazy_update_);
      }
      break;
    }
    case kView: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.view_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.view_);
      }
      break;
    }
    case kUpdateView: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.update_view_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.update_view_);
      }
      break;
    }
    case kSelect: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.select_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.select_);
      }
      break;
    }
    case kSelectDistinct: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.select_distinct_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.select_distinct_);
      }
      break;
    }
    case kFilter: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.filter_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.filter_);
      }
      break;
    }
    case kUnstructuredFilter: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.unstructured_filter_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.unstructured_filter_);
      }
      break;
    }
    case kSort: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.sort_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.sort_);
      }
      break;
    }
    case kHead: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.head_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.head_);
      }
      break;
    }
    case kTail: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.tail_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.tail_);
      }
      break;
    }
    case kHeadBy: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.head_by_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.head_by_);
      }
      break;
    }
    case kTailBy: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.tail_by_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.tail_by_);
      }
      break;
    }
    case kUngroup: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.ungroup_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.ungroup_);
      }
      break;
    }
    case kMerge: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.merge_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.merge_);
      }
      break;
    }
    case kComboAggregate: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.combo_aggregate_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.combo_aggregate_);
      }
      break;
    }
    case kFlatten: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.flatten_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.flatten_);
      }
      break;
    }
    case kRunChartDownsample: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.run_chart_downsample_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.run_chart_downsample_);
      }
      break;
    }
    case kCrossJoin: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.cross_join_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.cross_join_);
      }
      break;
    }
    case kNaturalJoin: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.natural_join_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.natural_join_);
      }
      break;
    }
    case kExactJoin: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.exact_join_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.exact_join_);
      }
      break;
    }
    case kLeftJoin: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.left_join_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.left_join_);
      }
      break;
    }
    case kAsOfJoin: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.as_of_join_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.as_of_join_);
      }
      break;
    }
    case kFetchTable: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.fetch_table_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.fetch_table_);
      }
      break;
    }
    case kApplyPreviewColumns: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.apply_preview_columns_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.apply_preview_columns_);
      }
      break;
    }
    case kCreateInputTable: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.create_input_table_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.create_input_table_);
      }
      break;
    }
    case kUpdateBy: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.update_by_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.update_by_);
      }
      break;
    }
    case kWhereIn: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.where_in_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.where_in_);
      }
      break;
    }
    case kAggregateAll: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.aggregate_all_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.aggregate_all_);
      }
      break;
    }
    case kAggregate: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.aggregate_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.aggregate_);
      }
      break;
    }
    case kSnapshot: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.snapshot_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.snapshot_);
      }
      break;
    }
    case kSnapshotWhen: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.snapshot_when_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.snapshot_when_);
      }
      break;
    }
    case kMetaTable: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.meta_table_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.meta_table_);
      }
      break;
    }
    case kRangeJoin: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.range_join_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.range_join_);
      }
      break;
    }
    case kAj: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.aj_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.aj_);
      }
      break;
    }
    case kRaj: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.raj_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.raj_);
      }
      break;
    }
    case kColumnStatistics: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.column_statistics_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.column_statistics_);
      }
      break;
    }
    case kMultiJoin: {
      if (GetArena() == nullptr) {
        delete _impl_.op_.multi_join_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.op_.multi_join_);
      }
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OP_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    BatchTableRequest_Operation::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_BatchTableRequest_Operation_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &BatchTableRequest_Operation::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<BatchTableRequest_Operation>(),
            ::google::protobuf::Message::GetNewImpl<BatchTableRequest_Operation>(),
            ::google::protobuf::Message::GetClearImpl<BatchTableRequest_Operation>(), &BatchTableRequest_Operation::ByteSizeLong,
                &BatchTableRequest_Operation::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_._cached_size_),
            false,
        },
        &BatchTableRequest_Operation::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* BatchTableRequest_Operation::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 41, 41, 0, 7> BatchTableRequest_Operation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    43, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    268959744,  // skipmap
    offsetof(decltype(_table_), field_entries),
    41,  // num_field_entries
    41,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    33, 0, 1,
    63488, 30,
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.EmptyTableRequest empty_table = 1;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.empty_table_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.TimeTableRequest time_table = 2;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.time_table_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.DropColumnsRequest drop_columns = 3;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.drop_columns_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update = 4;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.update_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest lazy_update = 5;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.lazy_update_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest view = 6;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.view_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update_view = 7;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.update_view_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest select = 8;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.select_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.SelectDistinctRequest select_distinct = 9;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.select_distinct_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.FilterTableRequest filter = 10;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.filter_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest unstructured_filter = 11;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.unstructured_filter_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.SortTableRequest sort = 12;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.sort_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest head = 13;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.head_), _Internal::kOneofCaseOffset + 0, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest tail = 14;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.tail_), _Internal::kOneofCaseOffset + 0, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest head_by = 15;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.head_by_), _Internal::kOneofCaseOffset + 0, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest tail_by = 16;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.tail_by_), _Internal::kOneofCaseOffset + 0, 15,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UngroupRequest ungroup = 17;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.ungroup_), _Internal::kOneofCaseOffset + 0, 16,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.MergeTablesRequest merge = 18;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.merge_), _Internal::kOneofCaseOffset + 0, 17,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest combo_aggregate = 19;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.combo_aggregate_), _Internal::kOneofCaseOffset + 0, 18,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.FlattenRequest flatten = 21;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.flatten_), _Internal::kOneofCaseOffset + 0, 19,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest run_chart_downsample = 22;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.run_chart_downsample_), _Internal::kOneofCaseOffset + 0, 20,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest cross_join = 23;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.cross_join_), _Internal::kOneofCaseOffset + 0, 21,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest natural_join = 24;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.natural_join_), _Internal::kOneofCaseOffset + 0, 22,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest exact_join = 25;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.exact_join_), _Internal::kOneofCaseOffset + 0, 23,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest left_join = 26;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.left_join_), _Internal::kOneofCaseOffset + 0, 24,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest as_of_join = 27 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.as_of_join_), _Internal::kOneofCaseOffset + 0, 25,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.FetchTableRequest fetch_table = 28;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.fetch_table_), _Internal::kOneofCaseOffset + 0, 26,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest apply_preview_columns = 30;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.apply_preview_columns_), _Internal::kOneofCaseOffset + 0, 27,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest create_input_table = 31;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.create_input_table_), _Internal::kOneofCaseOffset + 0, 28,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.UpdateByRequest update_by = 32;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.update_by_), _Internal::kOneofCaseOffset + 0, 29,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.WhereInRequest where_in = 33;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.where_in_), _Internal::kOneofCaseOffset + 0, 30,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggregateAllRequest aggregate_all = 34;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.aggregate_all_), _Internal::kOneofCaseOffset + 0, 31,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AggregateRequest aggregate = 35;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.aggregate_), _Internal::kOneofCaseOffset + 0, 32,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.SnapshotTableRequest snapshot = 36;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.snapshot_), _Internal::kOneofCaseOffset + 0, 33,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest snapshot_when = 37;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.snapshot_when_), _Internal::kOneofCaseOffset + 0, 34,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.MetaTableRequest meta_table = 38;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.meta_table_), _Internal::kOneofCaseOffset + 0, 35,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest range_join = 39;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.range_join_), _Internal::kOneofCaseOffset + 0, 36,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AjRajTablesRequest aj = 40;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.aj_), _Internal::kOneofCaseOffset + 0, 37,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.AjRajTablesRequest raj = 41;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.raj_), _Internal::kOneofCaseOffset + 0, 38,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest column_statistics = 42;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.column_statistics_), _Internal::kOneofCaseOffset + 0, 39,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.MultiJoinTablesRequest multi_join = 43;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest_Operation, _impl_.op_.multi_join_), _Internal::kOneofCaseOffset + 0, 40,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::EmptyTableRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TimeTableRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::DropColumnsRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SelectDistinctRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::FilterTableRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SortTableRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::HeadOrTailRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::HeadOrTailRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UngroupRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::MergeTablesRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ComboAggregateRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::FlattenRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::FetchTableRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::UpdateByRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::WhereInRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggregateAllRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AggregateRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SnapshotTableRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::MetaTableRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AjRajTablesRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::AjRajTablesRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::MultiJoinTablesRequest>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void BatchTableRequest_Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_op();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BatchTableRequest_Operation::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BatchTableRequest_Operation& this_ = static_cast<const BatchTableRequest_Operation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BatchTableRequest_Operation::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BatchTableRequest_Operation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.op_case()) {
            case kEmptyTable: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.op_.empty_table_, this_._impl_.op_.empty_table_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kTimeTable: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.op_.time_table_, this_._impl_.op_.time_table_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDropColumns: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.op_.drop_columns_, this_._impl_.op_.drop_columns_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kUpdate: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  4, *this_._impl_.op_.update_, this_._impl_.op_.update_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kLazyUpdate: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.op_.lazy_update_, this_._impl_.op_.lazy_update_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kView: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  6, *this_._impl_.op_.view_, this_._impl_.op_.view_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kUpdateView: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  7, *this_._impl_.op_.update_view_, this_._impl_.op_.update_view_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSelect: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  8, *this_._impl_.op_.select_, this_._impl_.op_.select_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSelectDistinct: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  9, *this_._impl_.op_.select_distinct_, this_._impl_.op_.select_distinct_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kFilter: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  10, *this_._impl_.op_.filter_, this_._impl_.op_.filter_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kUnstructuredFilter: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  11, *this_._impl_.op_.unstructured_filter_, this_._impl_.op_.unstructured_filter_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSort: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  12, *this_._impl_.op_.sort_, this_._impl_.op_.sort_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHead: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  13, *this_._impl_.op_.head_, this_._impl_.op_.head_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kTail: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  14, *this_._impl_.op_.tail_, this_._impl_.op_.tail_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHeadBy: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  15, *this_._impl_.op_.head_by_, this_._impl_.op_.head_by_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kTailBy: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  16, *this_._impl_.op_.tail_by_, this_._impl_.op_.tail_by_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kUngroup: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  17, *this_._impl_.op_.ungroup_, this_._impl_.op_.ungroup_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMerge: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  18, *this_._impl_.op_.merge_, this_._impl_.op_.merge_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kComboAggregate: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  19, *this_._impl_.op_.combo_aggregate_, this_._impl_.op_.combo_aggregate_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kFlatten: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  21, *this_._impl_.op_.flatten_, this_._impl_.op_.flatten_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRunChartDownsample: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  22, *this_._impl_.op_.run_chart_downsample_, this_._impl_.op_.run_chart_downsample_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kCrossJoin: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  23, *this_._impl_.op_.cross_join_, this_._impl_.op_.cross_join_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kNaturalJoin: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  24, *this_._impl_.op_.natural_join_, this_._impl_.op_.natural_join_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kExactJoin: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  25, *this_._impl_.op_.exact_join_, this_._impl_.op_.exact_join_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kLeftJoin: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  26, *this_._impl_.op_.left_join_, this_._impl_.op_.left_join_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAsOfJoin: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  27, *this_._impl_.op_.as_of_join_, this_._impl_.op_.as_of_join_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kFetchTable: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  28, *this_._impl_.op_.fetch_table_, this_._impl_.op_.fetch_table_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kApplyPreviewColumns: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  30, *this_._impl_.op_.apply_preview_columns_, this_._impl_.op_.apply_preview_columns_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kCreateInputTable: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  31, *this_._impl_.op_.create_input_table_, this_._impl_.op_.create_input_table_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kUpdateBy: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  32, *this_._impl_.op_.update_by_, this_._impl_.op_.update_by_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kWhereIn: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  33, *this_._impl_.op_.where_in_, this_._impl_.op_.where_in_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAggregateAll: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  34, *this_._impl_.op_.aggregate_all_, this_._impl_.op_.aggregate_all_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAggregate: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  35, *this_._impl_.op_.aggregate_, this_._impl_.op_.aggregate_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSnapshot: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  36, *this_._impl_.op_.snapshot_, this_._impl_.op_.snapshot_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSnapshotWhen: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  37, *this_._impl_.op_.snapshot_when_, this_._impl_.op_.snapshot_when_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMetaTable: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  38, *this_._impl_.op_.meta_table_, this_._impl_.op_.meta_table_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRangeJoin: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  39, *this_._impl_.op_.range_join_, this_._impl_.op_.range_join_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAj: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  40, *this_._impl_.op_.aj_, this_._impl_.op_.aj_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRaj: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  41, *this_._impl_.op_.raj_, this_._impl_.op_.raj_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kColumnStatistics: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  42, *this_._impl_.op_.column_statistics_, this_._impl_.op_.column_statistics_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMultiJoin: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  43, *this_._impl_.op_.multi_join_, this_._impl_.op_.multi_join_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BatchTableRequest_Operation::ByteSizeLong(const MessageLite& base) {
          const BatchTableRequest_Operation& this_ = static_cast<const BatchTableRequest_Operation&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BatchTableRequest_Operation::ByteSizeLong() const {
          const BatchTableRequest_Operation& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.op_case()) {
            // .io.deephaven.proto.backplane.grpc.EmptyTableRequest empty_table = 1;
            case kEmptyTable: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.empty_table_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.TimeTableRequest time_table = 2;
            case kTimeTable: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.time_table_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.DropColumnsRequest drop_columns = 3;
            case kDropColumns: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.drop_columns_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update = 4;
            case kUpdate: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.update_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest lazy_update = 5;
            case kLazyUpdate: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.lazy_update_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest view = 6;
            case kView: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.view_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest update_view = 7;
            case kUpdateView: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.update_view_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.SelectOrUpdateRequest select = 8;
            case kSelect: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.select_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.SelectDistinctRequest select_distinct = 9;
            case kSelectDistinct: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.select_distinct_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.FilterTableRequest filter = 10;
            case kFilter: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.filter_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UnstructuredFilterTableRequest unstructured_filter = 11;
            case kUnstructuredFilter: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.unstructured_filter_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.SortTableRequest sort = 12;
            case kSort: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.sort_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest head = 13;
            case kHead: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.head_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.HeadOrTailRequest tail = 14;
            case kTail: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.tail_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest head_by = 15;
            case kHeadBy: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.head_by_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.HeadOrTailByRequest tail_by = 16;
            case kTailBy: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.tail_by_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UngroupRequest ungroup = 17;
            case kUngroup: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.ungroup_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.MergeTablesRequest merge = 18;
            case kMerge: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.merge_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.ComboAggregateRequest combo_aggregate = 19;
            case kComboAggregate: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.combo_aggregate_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.FlattenRequest flatten = 21;
            case kFlatten: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.flatten_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest run_chart_downsample = 22;
            case kRunChartDownsample: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.run_chart_downsample_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest cross_join = 23;
            case kCrossJoin: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.cross_join_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.NaturalJoinTablesRequest natural_join = 24;
            case kNaturalJoin: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.natural_join_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.ExactJoinTablesRequest exact_join = 25;
            case kExactJoin: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.exact_join_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.LeftJoinTablesRequest left_join = 26;
            case kLeftJoin: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.left_join_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AsOfJoinTablesRequest as_of_join = 27 [deprecated = true];
            case kAsOfJoin: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.as_of_join_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.FetchTableRequest fetch_table = 28;
            case kFetchTable: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.fetch_table_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.ApplyPreviewColumnsRequest apply_preview_columns = 30;
            case kApplyPreviewColumns: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.apply_preview_columns_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.CreateInputTableRequest create_input_table = 31;
            case kCreateInputTable: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.create_input_table_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.UpdateByRequest update_by = 32;
            case kUpdateBy: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.update_by_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.WhereInRequest where_in = 33;
            case kWhereIn: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.where_in_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggregateAllRequest aggregate_all = 34;
            case kAggregateAll: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.aggregate_all_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AggregateRequest aggregate = 35;
            case kAggregate: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.aggregate_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.SnapshotTableRequest snapshot = 36;
            case kSnapshot: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.snapshot_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest snapshot_when = 37;
            case kSnapshotWhen: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.snapshot_when_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.MetaTableRequest meta_table = 38;
            case kMetaTable: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.meta_table_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest range_join = 39;
            case kRangeJoin: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.range_join_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AjRajTablesRequest aj = 40;
            case kAj: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.aj_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.AjRajTablesRequest raj = 41;
            case kRaj: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.raj_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.ColumnStatisticsRequest column_statistics = 42;
            case kColumnStatistics: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.column_statistics_);
              break;
            }
            // .io.deephaven.proto.backplane.grpc.MultiJoinTablesRequest multi_join = 43;
            case kMultiJoin: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.op_.multi_join_);
              break;
            }
            case OP_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BatchTableRequest_Operation::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BatchTableRequest_Operation*>(&to_msg);
  auto& from = static_cast<const BatchTableRequest_Operation&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_op();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kEmptyTable: {
        if (oneof_needs_init) {
          _this->_impl_.op_.empty_table_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::EmptyTableRequest>(arena, *from._impl_.op_.empty_table_);
        } else {
          _this->_impl_.op_.empty_table_->MergeFrom(from._internal_empty_table());
        }
        break;
      }
      case kTimeTable: {
        if (oneof_needs_init) {
          _this->_impl_.op_.time_table_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::TimeTableRequest>(arena, *from._impl_.op_.time_table_);
        } else {
          _this->_impl_.op_.time_table_->MergeFrom(from._internal_time_table());
        }
        break;
      }
      case kDropColumns: {
        if (oneof_needs_init) {
          _this->_impl_.op_.drop_columns_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::DropColumnsRequest>(arena, *from._impl_.op_.drop_columns_);
        } else {
          _this->_impl_.op_.drop_columns_->MergeFrom(from._internal_drop_columns());
        }
        break;
      }
      case kUpdate: {
        if (oneof_needs_init) {
          _this->_impl_.op_.update_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>(arena, *from._impl_.op_.update_);
        } else {
          _this->_impl_.op_.update_->MergeFrom(from._internal_update());
        }
        break;
      }
      case kLazyUpdate: {
        if (oneof_needs_init) {
          _this->_impl_.op_.lazy_update_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>(arena, *from._impl_.op_.lazy_update_);
        } else {
          _this->_impl_.op_.lazy_update_->MergeFrom(from._internal_lazy_update());
        }
        break;
      }
      case kView: {
        if (oneof_needs_init) {
          _this->_impl_.op_.view_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>(arena, *from._impl_.op_.view_);
        } else {
          _this->_impl_.op_.view_->MergeFrom(from._internal_view());
        }
        break;
      }
      case kUpdateView: {
        if (oneof_needs_init) {
          _this->_impl_.op_.update_view_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>(arena, *from._impl_.op_.update_view_);
        } else {
          _this->_impl_.op_.update_view_->MergeFrom(from._internal_update_view());
        }
        break;
      }
      case kSelect: {
        if (oneof_needs_init) {
          _this->_impl_.op_.select_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SelectOrUpdateRequest>(arena, *from._impl_.op_.select_);
        } else {
          _this->_impl_.op_.select_->MergeFrom(from._internal_select());
        }
        break;
      }
      case kSelectDistinct: {
        if (oneof_needs_init) {
          _this->_impl_.op_.select_distinct_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SelectDistinctRequest>(arena, *from._impl_.op_.select_distinct_);
        } else {
          _this->_impl_.op_.select_distinct_->MergeFrom(from._internal_select_distinct());
        }
        break;
      }
      case kFilter: {
        if (oneof_needs_init) {
          _this->_impl_.op_.filter_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::FilterTableRequest>(arena, *from._impl_.op_.filter_);
        } else {
          _this->_impl_.op_.filter_->MergeFrom(from._internal_filter());
        }
        break;
      }
      case kUnstructuredFilter: {
        if (oneof_needs_init) {
          _this->_impl_.op_.unstructured_filter_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UnstructuredFilterTableRequest>(arena, *from._impl_.op_.unstructured_filter_);
        } else {
          _this->_impl_.op_.unstructured_filter_->MergeFrom(from._internal_unstructured_filter());
        }
        break;
      }
      case kSort: {
        if (oneof_needs_init) {
          _this->_impl_.op_.sort_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SortTableRequest>(arena, *from._impl_.op_.sort_);
        } else {
          _this->_impl_.op_.sort_->MergeFrom(from._internal_sort());
        }
        break;
      }
      case kHead: {
        if (oneof_needs_init) {
          _this->_impl_.op_.head_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::HeadOrTailRequest>(arena, *from._impl_.op_.head_);
        } else {
          _this->_impl_.op_.head_->MergeFrom(from._internal_head());
        }
        break;
      }
      case kTail: {
        if (oneof_needs_init) {
          _this->_impl_.op_.tail_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::HeadOrTailRequest>(arena, *from._impl_.op_.tail_);
        } else {
          _this->_impl_.op_.tail_->MergeFrom(from._internal_tail());
        }
        break;
      }
      case kHeadBy: {
        if (oneof_needs_init) {
          _this->_impl_.op_.head_by_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest>(arena, *from._impl_.op_.head_by_);
        } else {
          _this->_impl_.op_.head_by_->MergeFrom(from._internal_head_by());
        }
        break;
      }
      case kTailBy: {
        if (oneof_needs_init) {
          _this->_impl_.op_.tail_by_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::HeadOrTailByRequest>(arena, *from._impl_.op_.tail_by_);
        } else {
          _this->_impl_.op_.tail_by_->MergeFrom(from._internal_tail_by());
        }
        break;
      }
      case kUngroup: {
        if (oneof_needs_init) {
          _this->_impl_.op_.ungroup_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UngroupRequest>(arena, *from._impl_.op_.ungroup_);
        } else {
          _this->_impl_.op_.ungroup_->MergeFrom(from._internal_ungroup());
        }
        break;
      }
      case kMerge: {
        if (oneof_needs_init) {
          _this->_impl_.op_.merge_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::MergeTablesRequest>(arena, *from._impl_.op_.merge_);
        } else {
          _this->_impl_.op_.merge_->MergeFrom(from._internal_merge());
        }
        break;
      }
      case kComboAggregate: {
        if (oneof_needs_init) {
          _this->_impl_.op_.combo_aggregate_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::ComboAggregateRequest>(arena, *from._impl_.op_.combo_aggregate_);
        } else {
          _this->_impl_.op_.combo_aggregate_->MergeFrom(from._internal_combo_aggregate());
        }
        break;
      }
      case kFlatten: {
        if (oneof_needs_init) {
          _this->_impl_.op_.flatten_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::FlattenRequest>(arena, *from._impl_.op_.flatten_);
        } else {
          _this->_impl_.op_.flatten_->MergeFrom(from._internal_flatten());
        }
        break;
      }
      case kRunChartDownsample: {
        if (oneof_needs_init) {
          _this->_impl_.op_.run_chart_downsample_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::RunChartDownsampleRequest>(arena, *from._impl_.op_.run_chart_downsample_);
        } else {
          _this->_impl_.op_.run_chart_downsample_->MergeFrom(from._internal_run_chart_downsample());
        }
        break;
      }
      case kCrossJoin: {
        if (oneof_needs_init) {
          _this->_impl_.op_.cross_join_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::CrossJoinTablesRequest>(arena, *from._impl_.op_.cross_join_);
        } else {
          _this->_impl_.op_.cross_join_->MergeFrom(from._internal_cross_join());
        }
        break;
      }
      case kNaturalJoin: {
        if (oneof_needs_init) {
          _this->_impl_.op_.natural_join_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::NaturalJoinTablesRequest>(arena, *from._impl_.op_.natural_join_);
        } else {
          _this->_impl_.op_.natural_join_->MergeFrom(from._internal_natural_join());
        }
        break;
      }
      case kExactJoin: {
        if (oneof_needs_init) {
          _this->_impl_.op_.exact_join_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::ExactJoinTablesRequest>(arena, *from._impl_.op_.exact_join_);
        } else {
          _this->_impl_.op_.exact_join_->MergeFrom(from._internal_exact_join());
        }
        break;
      }
      case kLeftJoin: {
        if (oneof_needs_init) {
          _this->_impl_.op_.left_join_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::LeftJoinTablesRequest>(arena, *from._impl_.op_.left_join_);
        } else {
          _this->_impl_.op_.left_join_->MergeFrom(from._internal_left_join());
        }
        break;
      }
      case kAsOfJoin: {
        if (oneof_needs_init) {
          _this->_impl_.op_.as_of_join_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AsOfJoinTablesRequest>(arena, *from._impl_.op_.as_of_join_);
        } else {
          _this->_impl_.op_.as_of_join_->MergeFrom(from._internal_as_of_join());
        }
        break;
      }
      case kFetchTable: {
        if (oneof_needs_init) {
          _this->_impl_.op_.fetch_table_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::FetchTableRequest>(arena, *from._impl_.op_.fetch_table_);
        } else {
          _this->_impl_.op_.fetch_table_->MergeFrom(from._internal_fetch_table());
        }
        break;
      }
      case kApplyPreviewColumns: {
        if (oneof_needs_init) {
          _this->_impl_.op_.apply_preview_columns_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::ApplyPreviewColumnsRequest>(arena, *from._impl_.op_.apply_preview_columns_);
        } else {
          _this->_impl_.op_.apply_preview_columns_->MergeFrom(from._internal_apply_preview_columns());
        }
        break;
      }
      case kCreateInputTable: {
        if (oneof_needs_init) {
          _this->_impl_.op_.create_input_table_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::CreateInputTableRequest>(arena, *from._impl_.op_.create_input_table_);
        } else {
          _this->_impl_.op_.create_input_table_->MergeFrom(from._internal_create_input_table());
        }
        break;
      }
      case kUpdateBy: {
        if (oneof_needs_init) {
          _this->_impl_.op_.update_by_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::UpdateByRequest>(arena, *from._impl_.op_.update_by_);
        } else {
          _this->_impl_.op_.update_by_->MergeFrom(from._internal_update_by());
        }
        break;
      }
      case kWhereIn: {
        if (oneof_needs_init) {
          _this->_impl_.op_.where_in_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::WhereInRequest>(arena, *from._impl_.op_.where_in_);
        } else {
          _this->_impl_.op_.where_in_->MergeFrom(from._internal_where_in());
        }
        break;
      }
      case kAggregateAll: {
        if (oneof_needs_init) {
          _this->_impl_.op_.aggregate_all_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggregateAllRequest>(arena, *from._impl_.op_.aggregate_all_);
        } else {
          _this->_impl_.op_.aggregate_all_->MergeFrom(from._internal_aggregate_all());
        }
        break;
      }
      case kAggregate: {
        if (oneof_needs_init) {
          _this->_impl_.op_.aggregate_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AggregateRequest>(arena, *from._impl_.op_.aggregate_);
        } else {
          _this->_impl_.op_.aggregate_->MergeFrom(from._internal_aggregate());
        }
        break;
      }
      case kSnapshot: {
        if (oneof_needs_init) {
          _this->_impl_.op_.snapshot_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SnapshotTableRequest>(arena, *from._impl_.op_.snapshot_);
        } else {
          _this->_impl_.op_.snapshot_->MergeFrom(from._internal_snapshot());
        }
        break;
      }
      case kSnapshotWhen: {
        if (oneof_needs_init) {
          _this->_impl_.op_.snapshot_when_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::SnapshotWhenTableRequest>(arena, *from._impl_.op_.snapshot_when_);
        } else {
          _this->_impl_.op_.snapshot_when_->MergeFrom(from._internal_snapshot_when());
        }
        break;
      }
      case kMetaTable: {
        if (oneof_needs_init) {
          _this->_impl_.op_.meta_table_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::MetaTableRequest>(arena, *from._impl_.op_.meta_table_);
        } else {
          _this->_impl_.op_.meta_table_->MergeFrom(from._internal_meta_table());
        }
        break;
      }
      case kRangeJoin: {
        if (oneof_needs_init) {
          _this->_impl_.op_.range_join_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::RangeJoinTablesRequest>(arena, *from._impl_.op_.range_join_);
        } else {
          _this->_impl_.op_.range_join_->MergeFrom(from._internal_range_join());
        }
        break;
      }
      case kAj: {
        if (oneof_needs_init) {
          _this->_impl_.op_.aj_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AjRajTablesRequest>(arena, *from._impl_.op_.aj_);
        } else {
          _this->_impl_.op_.aj_->MergeFrom(from._internal_aj());
        }
        break;
      }
      case kRaj: {
        if (oneof_needs_init) {
          _this->_impl_.op_.raj_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::AjRajTablesRequest>(arena, *from._impl_.op_.raj_);
        } else {
          _this->_impl_.op_.raj_->MergeFrom(from._internal_raj());
        }
        break;
      }
      case kColumnStatistics: {
        if (oneof_needs_init) {
          _this->_impl_.op_.column_statistics_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::ColumnStatisticsRequest>(arena, *from._impl_.op_.column_statistics_);
        } else {
          _this->_impl_.op_.column_statistics_->MergeFrom(from._internal_column_statistics());
        }
        break;
      }
      case kMultiJoin: {
        if (oneof_needs_init) {
          _this->_impl_.op_.multi_join_ =
              ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::MultiJoinTablesRequest>(arena, *from._impl_.op_.multi_join_);
        } else {
          _this->_impl_.op_.multi_join_->MergeFrom(from._internal_multi_join());
        }
        break;
      }
      case OP_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BatchTableRequest_Operation::CopyFrom(const BatchTableRequest_Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BatchTableRequest_Operation::InternalSwap(BatchTableRequest_Operation* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.op_, other->_impl_.op_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata BatchTableRequest_Operation::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BatchTableRequest::_Internal {
 public:
};

BatchTableRequest::BatchTableRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.BatchTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE BatchTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::BatchTableRequest& from_msg)
      : ops_{visibility, arena, from.ops_},
        _cached_size_{0} {}

BatchTableRequest::BatchTableRequest(
    ::google::protobuf::Arena* arena,
    const BatchTableRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BatchTableRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.BatchTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE BatchTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : ops_{visibility, arena},
        _cached_size_{0} {}

inline void BatchTableRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
BatchTableRequest::~BatchTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BatchTableRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    BatchTableRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_BatchTableRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &BatchTableRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<BatchTableRequest>(),
            ::google::protobuf::Message::GetNewImpl<BatchTableRequest>(),
            ::google::protobuf::Message::GetClearImpl<BatchTableRequest>(), &BatchTableRequest::ByteSizeLong,
                &BatchTableRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(BatchTableRequest, _impl_._cached_size_),
            false,
        },
        &BatchTableRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2ftable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* BatchTableRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> BatchTableRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::BatchTableRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation ops = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BatchTableRequest, _impl_.ops_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation ops = 1;
    {PROTOBUF_FIELD_OFFSET(BatchTableRequest, _impl_.ops_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::BatchTableRequest_Operation>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void BatchTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ops_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BatchTableRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BatchTableRequest& this_ = static_cast<const BatchTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BatchTableRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BatchTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation ops = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_ops_size());
               i < n; i++) {
            const auto& repfield = this_._internal_ops().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.BatchTableRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BatchTableRequest::ByteSizeLong(const MessageLite& base) {
          const BatchTableRequest& this_ = static_cast<const BatchTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BatchTableRequest::ByteSizeLong() const {
          const BatchTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation ops = 1;
             {
              total_size += 1UL * this_._internal_ops_size();
              for (const auto& msg : this_._internal_ops()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BatchTableRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BatchTableRequest*>(&to_msg);
  auto& from = static_cast<const BatchTableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ops()->MergeFrom(
      from._internal_ops());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BatchTableRequest::CopyFrom(const BatchTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.BatchTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BatchTableRequest::InternalSwap(BatchTableRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ops_.InternalSwap(&other->_impl_.ops_);
}

::google::protobuf::Metadata BatchTableRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_deephaven_2fproto_2ftable_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
