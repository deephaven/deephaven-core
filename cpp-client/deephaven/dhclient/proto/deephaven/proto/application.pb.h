// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/application.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fapplication_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fapplication_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "deephaven/proto/ticket.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_deephaven_2fproto_2fapplication_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_deephaven_2fproto_2fapplication_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_deephaven_2fproto_2fapplication_2eproto;
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
class FieldInfo;
struct FieldInfoDefaultTypeInternal;
extern FieldInfoDefaultTypeInternal _FieldInfo_default_instance_;
class FieldsChangeUpdate;
struct FieldsChangeUpdateDefaultTypeInternal;
extern FieldsChangeUpdateDefaultTypeInternal _FieldsChangeUpdate_default_instance_;
class ListFieldsRequest;
struct ListFieldsRequestDefaultTypeInternal;
extern ListFieldsRequestDefaultTypeInternal _ListFieldsRequest_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

// ===================================================================


// -------------------------------------------------------------------

class ListFieldsRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ListFieldsRequest) */ {
 public:
  inline ListFieldsRequest() : ListFieldsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListFieldsRequest(::google::protobuf::internal::ConstantInitialized);

  inline ListFieldsRequest(const ListFieldsRequest& from)
      : ListFieldsRequest(nullptr, from) {}
  ListFieldsRequest(ListFieldsRequest&& from) noexcept
    : ListFieldsRequest() {
    *this = ::std::move(from);
  }

  inline ListFieldsRequest& operator=(const ListFieldsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFieldsRequest& operator=(ListFieldsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListFieldsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListFieldsRequest* internal_default_instance() {
    return reinterpret_cast<const ListFieldsRequest*>(
               &_ListFieldsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListFieldsRequest& a, ListFieldsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListFieldsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListFieldsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListFieldsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListFieldsRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListFieldsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListFieldsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ListFieldsRequest";
  }
  protected:
  explicit ListFieldsRequest(::google::protobuf::Arena* arena);
  ListFieldsRequest(::google::protobuf::Arena* arena, const ListFieldsRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ListFieldsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_deephaven_2fproto_2fapplication_2eproto;
};// -------------------------------------------------------------------

class FieldInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.FieldInfo) */ {
 public:
  inline FieldInfo() : FieldInfo(nullptr) {}
  ~FieldInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FieldInfo(::google::protobuf::internal::ConstantInitialized);

  inline FieldInfo(const FieldInfo& from)
      : FieldInfo(nullptr, from) {}
  FieldInfo(FieldInfo&& from) noexcept
    : FieldInfo() {
    *this = ::std::move(from);
  }

  inline FieldInfo& operator=(const FieldInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldInfo& operator=(FieldInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldInfo* internal_default_instance() {
    return reinterpret_cast<const FieldInfo*>(
               &_FieldInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FieldInfo& a, FieldInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FieldInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FieldInfo& from) {
    FieldInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FieldInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.FieldInfo";
  }
  protected:
  explicit FieldInfo(::google::protobuf::Arena* arena);
  FieldInfo(::google::protobuf::Arena* arena, const FieldInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNameFieldNumber = 2,
    kFieldDescriptionFieldNumber = 3,
    kApplicationNameFieldNumber = 4,
    kApplicationIdFieldNumber = 5,
    kTypedTicketFieldNumber = 1,
  };
  // string field_name = 2;
  void clear_field_name() ;
  const std::string& field_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_field_name(Arg_&& arg, Args_... args);
  std::string* mutable_field_name();
  PROTOBUF_NODISCARD std::string* release_field_name();
  void set_allocated_field_name(std::string* value);

  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(
      const std::string& value);
  std::string* _internal_mutable_field_name();

  public:
  // string field_description = 3;
  void clear_field_description() ;
  const std::string& field_description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_field_description(Arg_&& arg, Args_... args);
  std::string* mutable_field_description();
  PROTOBUF_NODISCARD std::string* release_field_description();
  void set_allocated_field_description(std::string* value);

  private:
  const std::string& _internal_field_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_description(
      const std::string& value);
  std::string* _internal_mutable_field_description();

  public:
  // string application_name = 4;
  void clear_application_name() ;
  const std::string& application_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_application_name(Arg_&& arg, Args_... args);
  std::string* mutable_application_name();
  PROTOBUF_NODISCARD std::string* release_application_name();
  void set_allocated_application_name(std::string* value);

  private:
  const std::string& _internal_application_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_name(
      const std::string& value);
  std::string* _internal_mutable_application_name();

  public:
  // string application_id = 5;
  void clear_application_id() ;
  const std::string& application_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_application_id(Arg_&& arg, Args_... args);
  std::string* mutable_application_id();
  PROTOBUF_NODISCARD std::string* release_application_id();
  void set_allocated_application_id(std::string* value);

  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(
      const std::string& value);
  std::string* _internal_mutable_application_id();

  public:
  // .io.deephaven.proto.backplane.grpc.TypedTicket typed_ticket = 1;
  bool has_typed_ticket() const;
  void clear_typed_ticket() ;
  const ::io::deephaven::proto::backplane::grpc::TypedTicket& typed_ticket() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::TypedTicket* release_typed_ticket();
  ::io::deephaven::proto::backplane::grpc::TypedTicket* mutable_typed_ticket();
  void set_allocated_typed_ticket(::io::deephaven::proto::backplane::grpc::TypedTicket* value);
  void unsafe_arena_set_allocated_typed_ticket(::io::deephaven::proto::backplane::grpc::TypedTicket* value);
  ::io::deephaven::proto::backplane::grpc::TypedTicket* unsafe_arena_release_typed_ticket();

  private:
  const ::io::deephaven::proto::backplane::grpc::TypedTicket& _internal_typed_ticket() const;
  ::io::deephaven::proto::backplane::grpc::TypedTicket* _internal_mutable_typed_ticket();

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.FieldInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      109, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr field_name_;
    ::google::protobuf::internal::ArenaStringPtr field_description_;
    ::google::protobuf::internal::ArenaStringPtr application_name_;
    ::google::protobuf::internal::ArenaStringPtr application_id_;
    ::io::deephaven::proto::backplane::grpc::TypedTicket* typed_ticket_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fapplication_2eproto;
};// -------------------------------------------------------------------

class FieldsChangeUpdate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate) */ {
 public:
  inline FieldsChangeUpdate() : FieldsChangeUpdate(nullptr) {}
  ~FieldsChangeUpdate() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FieldsChangeUpdate(::google::protobuf::internal::ConstantInitialized);

  inline FieldsChangeUpdate(const FieldsChangeUpdate& from)
      : FieldsChangeUpdate(nullptr, from) {}
  FieldsChangeUpdate(FieldsChangeUpdate&& from) noexcept
    : FieldsChangeUpdate() {
    *this = ::std::move(from);
  }

  inline FieldsChangeUpdate& operator=(const FieldsChangeUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldsChangeUpdate& operator=(FieldsChangeUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldsChangeUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldsChangeUpdate* internal_default_instance() {
    return reinterpret_cast<const FieldsChangeUpdate*>(
               &_FieldsChangeUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FieldsChangeUpdate& a, FieldsChangeUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldsChangeUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldsChangeUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldsChangeUpdate* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldsChangeUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FieldsChangeUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FieldsChangeUpdate& from) {
    FieldsChangeUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FieldsChangeUpdate* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.FieldsChangeUpdate";
  }
  protected:
  explicit FieldsChangeUpdate(::google::protobuf::Arena* arena);
  FieldsChangeUpdate(::google::protobuf::Arena* arena, const FieldsChangeUpdate& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedFieldNumber = 1,
    kUpdatedFieldNumber = 2,
    kRemovedFieldNumber = 3,
  };
  // repeated .io.deephaven.proto.backplane.grpc.FieldInfo created = 1;
  int created_size() const;
  private:
  int _internal_created_size() const;

  public:
  void clear_created() ;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* mutable_created(int index);
  ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >*
      mutable_created();
  private:
  const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>& _internal_created() const;
  ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>* _internal_mutable_created();
  public:
  const ::io::deephaven::proto::backplane::grpc::FieldInfo& created(int index) const;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* add_created();
  const ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >&
      created() const;
  // repeated .io.deephaven.proto.backplane.grpc.FieldInfo updated = 2;
  int updated_size() const;
  private:
  int _internal_updated_size() const;

  public:
  void clear_updated() ;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* mutable_updated(int index);
  ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >*
      mutable_updated();
  private:
  const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>& _internal_updated() const;
  ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>* _internal_mutable_updated();
  public:
  const ::io::deephaven::proto::backplane::grpc::FieldInfo& updated(int index) const;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* add_updated();
  const ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >&
      updated() const;
  // repeated .io.deephaven.proto.backplane.grpc.FieldInfo removed = 3;
  int removed_size() const;
  private:
  int _internal_removed_size() const;

  public:
  void clear_removed() ;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* mutable_removed(int index);
  ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >*
      mutable_removed();
  private:
  const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>& _internal_removed() const;
  ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>* _internal_mutable_removed();
  public:
  const ::io::deephaven::proto::backplane::grpc::FieldInfo& removed(int index) const;
  ::io::deephaven::proto::backplane::grpc::FieldInfo* add_removed();
  const ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo >&
      removed() const;
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo > created_;
    ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo > updated_;
    ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::FieldInfo > removed_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fapplication_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ListFieldsRequest

// -------------------------------------------------------------------

// FieldsChangeUpdate

// repeated .io.deephaven.proto.backplane.grpc.FieldInfo created = 1;
inline int FieldsChangeUpdate::_internal_created_size() const {
  return _internal_created().size();
}
inline int FieldsChangeUpdate::created_size() const {
  return _internal_created_size();
}
inline void FieldsChangeUpdate::clear_created() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.created_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::mutable_created(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.created)
  return _internal_mutable_created()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>* FieldsChangeUpdate::mutable_created()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.created)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_created();
}
inline const ::io::deephaven::proto::backplane::grpc::FieldInfo& FieldsChangeUpdate::created(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.created)
  return _internal_created().Get(index);
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::add_created() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::io::deephaven::proto::backplane::grpc::FieldInfo* _add = _internal_mutable_created()->Add();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.created)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>& FieldsChangeUpdate::created() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.created)
  return _internal_created();
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>&
FieldsChangeUpdate::_internal_created() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.created_;
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>*
FieldsChangeUpdate::_internal_mutable_created() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.created_;
}

// repeated .io.deephaven.proto.backplane.grpc.FieldInfo updated = 2;
inline int FieldsChangeUpdate::_internal_updated_size() const {
  return _internal_updated().size();
}
inline int FieldsChangeUpdate::updated_size() const {
  return _internal_updated_size();
}
inline void FieldsChangeUpdate::clear_updated() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.updated_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::mutable_updated(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.updated)
  return _internal_mutable_updated()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>* FieldsChangeUpdate::mutable_updated()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.updated)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_updated();
}
inline const ::io::deephaven::proto::backplane::grpc::FieldInfo& FieldsChangeUpdate::updated(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.updated)
  return _internal_updated().Get(index);
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::add_updated() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::io::deephaven::proto::backplane::grpc::FieldInfo* _add = _internal_mutable_updated()->Add();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.updated)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>& FieldsChangeUpdate::updated() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.updated)
  return _internal_updated();
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>&
FieldsChangeUpdate::_internal_updated() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.updated_;
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>*
FieldsChangeUpdate::_internal_mutable_updated() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.updated_;
}

// repeated .io.deephaven.proto.backplane.grpc.FieldInfo removed = 3;
inline int FieldsChangeUpdate::_internal_removed_size() const {
  return _internal_removed().size();
}
inline int FieldsChangeUpdate::removed_size() const {
  return _internal_removed_size();
}
inline void FieldsChangeUpdate::clear_removed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.removed_.Clear();
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::mutable_removed(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.removed)
  return _internal_mutable_removed()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>* FieldsChangeUpdate::mutable_removed()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.removed)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_removed();
}
inline const ::io::deephaven::proto::backplane::grpc::FieldInfo& FieldsChangeUpdate::removed(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.removed)
  return _internal_removed().Get(index);
}
inline ::io::deephaven::proto::backplane::grpc::FieldInfo* FieldsChangeUpdate::add_removed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::io::deephaven::proto::backplane::grpc::FieldInfo* _add = _internal_mutable_removed()->Add();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.removed)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>& FieldsChangeUpdate::removed() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.FieldsChangeUpdate.removed)
  return _internal_removed();
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>&
FieldsChangeUpdate::_internal_removed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.removed_;
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::FieldInfo>*
FieldsChangeUpdate::_internal_mutable_removed() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.removed_;
}

// -------------------------------------------------------------------

// FieldInfo

// .io.deephaven.proto.backplane.grpc.TypedTicket typed_ticket = 1;
inline bool FieldInfo::has_typed_ticket() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.typed_ticket_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::TypedTicket& FieldInfo::_internal_typed_ticket() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::io::deephaven::proto::backplane::grpc::TypedTicket* p = _impl_.typed_ticket_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TypedTicket&>(::io::deephaven::proto::backplane::grpc::_TypedTicket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TypedTicket& FieldInfo::typed_ticket() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.typed_ticket)
  return _internal_typed_ticket();
}
inline void FieldInfo::unsafe_arena_set_allocated_typed_ticket(::io::deephaven::proto::backplane::grpc::TypedTicket* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.typed_ticket_);
  }
  _impl_.typed_ticket_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::TypedTicket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.typed_ticket)
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* FieldInfo::release_typed_ticket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::TypedTicket* released = _impl_.typed_ticket_;
  _impl_.typed_ticket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* FieldInfo::unsafe_arena_release_typed_ticket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.typed_ticket)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::TypedTicket* temp = _impl_.typed_ticket_;
  _impl_.typed_ticket_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* FieldInfo::_internal_mutable_typed_ticket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.typed_ticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TypedTicket>(GetArena());
    _impl_.typed_ticket_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::TypedTicket*>(p);
  }
  return _impl_.typed_ticket_;
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* FieldInfo::mutable_typed_ticket() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::io::deephaven::proto::backplane::grpc::TypedTicket* _msg = _internal_mutable_typed_ticket();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.typed_ticket)
  return _msg;
}
inline void FieldInfo::set_allocated_typed_ticket(::io::deephaven::proto::backplane::grpc::TypedTicket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.typed_ticket_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.typed_ticket_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::TypedTicket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.typed_ticket)
}

// string field_name = 2;
inline void FieldInfo::clear_field_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_name_.ClearToEmpty();
}
inline const std::string& FieldInfo::field_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.field_name)
  return _internal_field_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FieldInfo::set_field_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FieldInfo.field_name)
}
inline std::string* FieldInfo::mutable_field_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.field_name)
  return _s;
}
inline const std::string& FieldInfo::_internal_field_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.field_name_.Get();
}
inline void FieldInfo::_internal_set_field_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_name_.Set(value, GetArena());
}
inline std::string* FieldInfo::_internal_mutable_field_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.field_name_.Mutable( GetArena());
}
inline std::string* FieldInfo::release_field_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.field_name)
  return _impl_.field_name_.Release();
}
inline void FieldInfo::set_allocated_field_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.field_name_.IsDefault()) {
          _impl_.field_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.field_name)
}

// string field_description = 3;
inline void FieldInfo::clear_field_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_description_.ClearToEmpty();
}
inline const std::string& FieldInfo::field_description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.field_description)
  return _internal_field_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FieldInfo::set_field_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FieldInfo.field_description)
}
inline std::string* FieldInfo::mutable_field_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_field_description();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.field_description)
  return _s;
}
inline const std::string& FieldInfo::_internal_field_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.field_description_.Get();
}
inline void FieldInfo::_internal_set_field_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_description_.Set(value, GetArena());
}
inline std::string* FieldInfo::_internal_mutable_field_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.field_description_.Mutable( GetArena());
}
inline std::string* FieldInfo::release_field_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.field_description)
  return _impl_.field_description_.Release();
}
inline void FieldInfo::set_allocated_field_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.field_description_.IsDefault()) {
          _impl_.field_description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.field_description)
}

// string application_name = 4;
inline void FieldInfo::clear_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_name_.ClearToEmpty();
}
inline const std::string& FieldInfo::application_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.application_name)
  return _internal_application_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FieldInfo::set_application_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FieldInfo.application_name)
}
inline std::string* FieldInfo::mutable_application_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_application_name();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.application_name)
  return _s;
}
inline const std::string& FieldInfo::_internal_application_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.application_name_.Get();
}
inline void FieldInfo::_internal_set_application_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_name_.Set(value, GetArena());
}
inline std::string* FieldInfo::_internal_mutable_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.application_name_.Mutable( GetArena());
}
inline std::string* FieldInfo::release_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.application_name)
  return _impl_.application_name_.Release();
}
inline void FieldInfo::set_allocated_application_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.application_name_.IsDefault()) {
          _impl_.application_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.application_name)
}

// string application_id = 5;
inline void FieldInfo::clear_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_id_.ClearToEmpty();
}
inline const std::string& FieldInfo::application_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FieldInfo.application_id)
  return _internal_application_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FieldInfo::set_application_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FieldInfo.application_id)
}
inline std::string* FieldInfo::mutable_application_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FieldInfo.application_id)
  return _s;
}
inline const std::string& FieldInfo::_internal_application_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.application_id_.Get();
}
inline void FieldInfo::_internal_set_application_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_id_.Set(value, GetArena());
}
inline std::string* FieldInfo::_internal_mutable_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.application_id_.Mutable( GetArena());
}
inline std::string* FieldInfo::release_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FieldInfo.application_id)
  return _impl_.application_id_.Release();
}
inline void FieldInfo::set_allocated_application_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.application_id_.IsDefault()) {
          _impl_.application_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FieldInfo.application_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fapplication_2eproto_2epb_2eh
