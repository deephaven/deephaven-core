// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/object.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fobject_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fobject_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "deephaven/proto/ticket.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_deephaven_2fproto_2fobject_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_deephaven_2fproto_2fobject_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_deephaven_2fproto_2fobject_2eproto;
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
class BrowserNextResponse;
struct BrowserNextResponseDefaultTypeInternal;
extern BrowserNextResponseDefaultTypeInternal _BrowserNextResponse_default_instance_;
class ClientData;
struct ClientDataDefaultTypeInternal;
extern ClientDataDefaultTypeInternal _ClientData_default_instance_;
class ConnectRequest;
struct ConnectRequestDefaultTypeInternal;
extern ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
class FetchObjectRequest;
struct FetchObjectRequestDefaultTypeInternal;
extern FetchObjectRequestDefaultTypeInternal _FetchObjectRequest_default_instance_;
class FetchObjectResponse;
struct FetchObjectResponseDefaultTypeInternal;
extern FetchObjectResponseDefaultTypeInternal _FetchObjectResponse_default_instance_;
class ServerData;
struct ServerDataDefaultTypeInternal;
extern ServerDataDefaultTypeInternal _ServerData_default_instance_;
class StreamRequest;
struct StreamRequestDefaultTypeInternal;
extern StreamRequestDefaultTypeInternal _StreamRequest_default_instance_;
class StreamResponse;
struct StreamResponseDefaultTypeInternal;
extern StreamResponseDefaultTypeInternal _StreamResponse_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

// ===================================================================


// -------------------------------------------------------------------

class BrowserNextResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.BrowserNextResponse) */ {
 public:
  inline BrowserNextResponse() : BrowserNextResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BrowserNextResponse(::google::protobuf::internal::ConstantInitialized);

  inline BrowserNextResponse(const BrowserNextResponse& from)
      : BrowserNextResponse(nullptr, from) {}
  BrowserNextResponse(BrowserNextResponse&& from) noexcept
    : BrowserNextResponse() {
    *this = ::std::move(from);
  }

  inline BrowserNextResponse& operator=(const BrowserNextResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrowserNextResponse& operator=(BrowserNextResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrowserNextResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrowserNextResponse* internal_default_instance() {
    return reinterpret_cast<const BrowserNextResponse*>(
               &_BrowserNextResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BrowserNextResponse& a, BrowserNextResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BrowserNextResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrowserNextResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrowserNextResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrowserNextResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BrowserNextResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BrowserNextResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.BrowserNextResponse";
  }
  protected:
  explicit BrowserNextResponse(::google::protobuf::Arena* arena);
  BrowserNextResponse(::google::protobuf::Arena* arena, const BrowserNextResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.BrowserNextResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_deephaven_2fproto_2fobject_2eproto;
};// -------------------------------------------------------------------

class ServerData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ServerData) */ {
 public:
  inline ServerData() : ServerData(nullptr) {}
  ~ServerData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerData(::google::protobuf::internal::ConstantInitialized);

  inline ServerData(const ServerData& from)
      : ServerData(nullptr, from) {}
  ServerData(ServerData&& from) noexcept
    : ServerData() {
    *this = ::std::move(from);
  }

  inline ServerData& operator=(const ServerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerData& operator=(ServerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerData* internal_default_instance() {
    return reinterpret_cast<const ServerData*>(
               &_ServerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServerData& a, ServerData& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServerData& from) {
    ServerData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServerData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ServerData";
  }
  protected:
  explicit ServerData(::google::protobuf::Arena* arena);
  ServerData(::google::protobuf::Arena* arena, const ServerData& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExportedReferencesFieldNumber = 2,
    kPayloadFieldNumber = 1,
  };
  // repeated .io.deephaven.proto.backplane.grpc.TypedTicket exported_references = 2;
  int exported_references_size() const;
  private:
  int _internal_exported_references_size() const;

  public:
  void clear_exported_references() ;
  ::io::deephaven::proto::backplane::grpc::TypedTicket* mutable_exported_references(int index);
  ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TypedTicket >*
      mutable_exported_references();
  private:
  const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>& _internal_exported_references() const;
  ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>* _internal_mutable_exported_references();
  public:
  const ::io::deephaven::proto::backplane::grpc::TypedTicket& exported_references(int index) const;
  ::io::deephaven::proto::backplane::grpc::TypedTicket* add_exported_references();
  const ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TypedTicket >&
      exported_references() const;
  // bytes payload = 1;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ServerData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TypedTicket > exported_references_;
    ::google::protobuf::internal::ArenaStringPtr payload_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fobject_2eproto;
};// -------------------------------------------------------------------

class FetchObjectResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.FetchObjectResponse) */ {
 public:
  inline FetchObjectResponse() : FetchObjectResponse(nullptr) {}
  ~FetchObjectResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FetchObjectResponse(::google::protobuf::internal::ConstantInitialized);

  inline FetchObjectResponse(const FetchObjectResponse& from)
      : FetchObjectResponse(nullptr, from) {}
  FetchObjectResponse(FetchObjectResponse&& from) noexcept
    : FetchObjectResponse() {
    *this = ::std::move(from);
  }

  inline FetchObjectResponse& operator=(const FetchObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchObjectResponse& operator=(FetchObjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchObjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchObjectResponse* internal_default_instance() {
    return reinterpret_cast<const FetchObjectResponse*>(
               &_FetchObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FetchObjectResponse& a, FetchObjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchObjectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchObjectResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchObjectResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchObjectResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FetchObjectResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FetchObjectResponse& from) {
    FetchObjectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FetchObjectResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.FetchObjectResponse";
  }
  protected:
  explicit FetchObjectResponse(::google::protobuf::Arena* arena);
  FetchObjectResponse(::google::protobuf::Arena* arena, const FetchObjectResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypedExportIdsFieldNumber = 3,
    kTypeFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // repeated .io.deephaven.proto.backplane.grpc.TypedTicket typed_export_ids = 3;
  int typed_export_ids_size() const;
  private:
  int _internal_typed_export_ids_size() const;

  public:
  void clear_typed_export_ids() ;
  ::io::deephaven::proto::backplane::grpc::TypedTicket* mutable_typed_export_ids(int index);
  ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TypedTicket >*
      mutable_typed_export_ids();
  private:
  const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>& _internal_typed_export_ids() const;
  ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>* _internal_mutable_typed_export_ids();
  public:
  const ::io::deephaven::proto::backplane::grpc::TypedTicket& typed_export_ids(int index) const;
  ::io::deephaven::proto::backplane::grpc::TypedTicket* add_typed_export_ids();
  const ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TypedTicket >&
      typed_export_ids() const;
  // string type = 1;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.FetchObjectResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      66, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TypedTicket > typed_export_ids_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fobject_2eproto;
};// -------------------------------------------------------------------

class FetchObjectRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.FetchObjectRequest) */ {
 public:
  inline FetchObjectRequest() : FetchObjectRequest(nullptr) {}
  ~FetchObjectRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FetchObjectRequest(::google::protobuf::internal::ConstantInitialized);

  inline FetchObjectRequest(const FetchObjectRequest& from)
      : FetchObjectRequest(nullptr, from) {}
  FetchObjectRequest(FetchObjectRequest&& from) noexcept
    : FetchObjectRequest() {
    *this = ::std::move(from);
  }

  inline FetchObjectRequest& operator=(const FetchObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchObjectRequest& operator=(FetchObjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchObjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchObjectRequest* internal_default_instance() {
    return reinterpret_cast<const FetchObjectRequest*>(
               &_FetchObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FetchObjectRequest& a, FetchObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchObjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchObjectRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchObjectRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchObjectRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FetchObjectRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FetchObjectRequest& from) {
    FetchObjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FetchObjectRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.FetchObjectRequest";
  }
  protected:
  explicit FetchObjectRequest(::google::protobuf::Arena* arena);
  FetchObjectRequest(::google::protobuf::Arena* arena, const FetchObjectRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
  };
  // .io.deephaven.proto.backplane.grpc.TypedTicket source_id = 1;
  bool has_source_id() const;
  void clear_source_id() ;
  const ::io::deephaven::proto::backplane::grpc::TypedTicket& source_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::TypedTicket* release_source_id();
  ::io::deephaven::proto::backplane::grpc::TypedTicket* mutable_source_id();
  void set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TypedTicket* value);
  void unsafe_arena_set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TypedTicket* value);
  ::io::deephaven::proto::backplane::grpc::TypedTicket* unsafe_arena_release_source_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::TypedTicket& _internal_source_id() const;
  ::io::deephaven::proto::backplane::grpc::TypedTicket* _internal_mutable_source_id();

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.FetchObjectRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::io::deephaven::proto::backplane::grpc::TypedTicket* source_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fobject_2eproto;
};// -------------------------------------------------------------------

class ConnectRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ConnectRequest) */ {
 public:
  inline ConnectRequest() : ConnectRequest(nullptr) {}
  ~ConnectRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectRequest(::google::protobuf::internal::ConstantInitialized);

  inline ConnectRequest(const ConnectRequest& from)
      : ConnectRequest(nullptr, from) {}
  ConnectRequest(ConnectRequest&& from) noexcept
    : ConnectRequest() {
    *this = ::std::move(from);
  }

  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectRequest& operator=(ConnectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest*>(
               &_ConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConnectRequest& a, ConnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConnectRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ConnectRequest& from) {
    ConnectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ConnectRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ConnectRequest";
  }
  protected:
  explicit ConnectRequest(::google::protobuf::Arena* arena);
  ConnectRequest(::google::protobuf::Arena* arena, const ConnectRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
  };
  // .io.deephaven.proto.backplane.grpc.TypedTicket source_id = 1;
  bool has_source_id() const;
  void clear_source_id() ;
  const ::io::deephaven::proto::backplane::grpc::TypedTicket& source_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::TypedTicket* release_source_id();
  ::io::deephaven::proto::backplane::grpc::TypedTicket* mutable_source_id();
  void set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TypedTicket* value);
  void unsafe_arena_set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TypedTicket* value);
  ::io::deephaven::proto::backplane::grpc::TypedTicket* unsafe_arena_release_source_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::TypedTicket& _internal_source_id() const;
  ::io::deephaven::proto::backplane::grpc::TypedTicket* _internal_mutable_source_id();

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ConnectRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::io::deephaven::proto::backplane::grpc::TypedTicket* source_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fobject_2eproto;
};// -------------------------------------------------------------------

class ClientData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.ClientData) */ {
 public:
  inline ClientData() : ClientData(nullptr) {}
  ~ClientData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientData(::google::protobuf::internal::ConstantInitialized);

  inline ClientData(const ClientData& from)
      : ClientData(nullptr, from) {}
  ClientData(ClientData&& from) noexcept
    : ClientData() {
    *this = ::std::move(from);
  }

  inline ClientData& operator=(const ClientData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientData& operator=(ClientData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientData* internal_default_instance() {
    return reinterpret_cast<const ClientData*>(
               &_ClientData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClientData& a, ClientData& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClientData& from) {
    ClientData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.ClientData";
  }
  protected:
  explicit ClientData(::google::protobuf::Arena* arena);
  ClientData(::google::protobuf::Arena* arena, const ClientData& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferencesFieldNumber = 2,
    kPayloadFieldNumber = 1,
  };
  // repeated .io.deephaven.proto.backplane.grpc.TypedTicket references = 2;
  int references_size() const;
  private:
  int _internal_references_size() const;

  public:
  void clear_references() ;
  ::io::deephaven::proto::backplane::grpc::TypedTicket* mutable_references(int index);
  ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TypedTicket >*
      mutable_references();
  private:
  const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>& _internal_references() const;
  ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>* _internal_mutable_references();
  public:
  const ::io::deephaven::proto::backplane::grpc::TypedTicket& references(int index) const;
  ::io::deephaven::proto::backplane::grpc::TypedTicket* add_references();
  const ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TypedTicket >&
      references() const;
  // bytes payload = 1;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.ClientData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::TypedTicket > references_;
    ::google::protobuf::internal::ArenaStringPtr payload_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fobject_2eproto;
};// -------------------------------------------------------------------

class StreamResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.StreamResponse) */ {
 public:
  inline StreamResponse() : StreamResponse(nullptr) {}
  ~StreamResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamResponse(::google::protobuf::internal::ConstantInitialized);

  inline StreamResponse(const StreamResponse& from)
      : StreamResponse(nullptr, from) {}
  StreamResponse(StreamResponse&& from) noexcept
    : StreamResponse() {
    *this = ::std::move(from);
  }

  inline StreamResponse& operator=(const StreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamResponse& operator=(StreamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamResponse& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kData = 1,
    MESSAGE_NOT_SET = 0,
  };

  static inline const StreamResponse* internal_default_instance() {
    return reinterpret_cast<const StreamResponse*>(
               &_StreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StreamResponse& a, StreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StreamResponse& from) {
    StreamResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StreamResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.StreamResponse";
  }
  protected:
  explicit StreamResponse(::google::protobuf::Arena* arena);
  StreamResponse(::google::protobuf::Arena* arena, const StreamResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .io.deephaven.proto.backplane.grpc.ServerData data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;

  public:
  void clear_data() ;
  const ::io::deephaven::proto::backplane::grpc::ServerData& data() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::ServerData* release_data();
  ::io::deephaven::proto::backplane::grpc::ServerData* mutable_data();
  void set_allocated_data(::io::deephaven::proto::backplane::grpc::ServerData* value);
  void unsafe_arena_set_allocated_data(::io::deephaven::proto::backplane::grpc::ServerData* value);
  ::io::deephaven::proto::backplane::grpc::ServerData* unsafe_arena_release_data();

  private:
  const ::io::deephaven::proto::backplane::grpc::ServerData& _internal_data() const;
  ::io::deephaven::proto::backplane::grpc::ServerData* _internal_mutable_data();

  public:
  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.StreamResponse)
 private:
  class _Internal;
  void set_has_data();

  inline bool has_message() const;
  inline void clear_has_message();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::io::deephaven::proto::backplane::grpc::ServerData* data_;
    } message_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fobject_2eproto;
};// -------------------------------------------------------------------

class StreamRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.StreamRequest) */ {
 public:
  inline StreamRequest() : StreamRequest(nullptr) {}
  ~StreamRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamRequest(::google::protobuf::internal::ConstantInitialized);

  inline StreamRequest(const StreamRequest& from)
      : StreamRequest(nullptr, from) {}
  StreamRequest(StreamRequest&& from) noexcept
    : StreamRequest() {
    *this = ::std::move(from);
  }

  inline StreamRequest& operator=(const StreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamRequest& operator=(StreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamRequest& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kConnect = 1,
    kData = 2,
    MESSAGE_NOT_SET = 0,
  };

  static inline const StreamRequest* internal_default_instance() {
    return reinterpret_cast<const StreamRequest*>(
               &_StreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StreamRequest& a, StreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StreamRequest& from) {
    StreamRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StreamRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.StreamRequest";
  }
  protected:
  explicit StreamRequest(::google::protobuf::Arena* arena);
  StreamRequest(::google::protobuf::Arena* arena, const StreamRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .io.deephaven.proto.backplane.grpc.ConnectRequest connect = 1;
  bool has_connect() const;
  private:
  bool _internal_has_connect() const;

  public:
  void clear_connect() ;
  const ::io::deephaven::proto::backplane::grpc::ConnectRequest& connect() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::ConnectRequest* release_connect();
  ::io::deephaven::proto::backplane::grpc::ConnectRequest* mutable_connect();
  void set_allocated_connect(::io::deephaven::proto::backplane::grpc::ConnectRequest* value);
  void unsafe_arena_set_allocated_connect(::io::deephaven::proto::backplane::grpc::ConnectRequest* value);
  ::io::deephaven::proto::backplane::grpc::ConnectRequest* unsafe_arena_release_connect();

  private:
  const ::io::deephaven::proto::backplane::grpc::ConnectRequest& _internal_connect() const;
  ::io::deephaven::proto::backplane::grpc::ConnectRequest* _internal_mutable_connect();

  public:
  // .io.deephaven.proto.backplane.grpc.ClientData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;

  public:
  void clear_data() ;
  const ::io::deephaven::proto::backplane::grpc::ClientData& data() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::ClientData* release_data();
  ::io::deephaven::proto::backplane::grpc::ClientData* mutable_data();
  void set_allocated_data(::io::deephaven::proto::backplane::grpc::ClientData* value);
  void unsafe_arena_set_allocated_data(::io::deephaven::proto::backplane::grpc::ClientData* value);
  ::io::deephaven::proto::backplane::grpc::ClientData* unsafe_arena_release_data();

  private:
  const ::io::deephaven::proto::backplane::grpc::ClientData& _internal_data() const;
  ::io::deephaven::proto::backplane::grpc::ClientData* _internal_mutable_data();

  public:
  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.StreamRequest)
 private:
  class _Internal;
  void set_has_connect();
  void set_has_data();

  inline bool has_message() const;
  inline void clear_has_message();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::io::deephaven::proto::backplane::grpc::ConnectRequest* connect_;
      ::io::deephaven::proto::backplane::grpc::ClientData* data_;
    } message_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fobject_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FetchObjectRequest

// .io.deephaven.proto.backplane.grpc.TypedTicket source_id = 1;
inline bool FetchObjectRequest::has_source_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.source_id_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::TypedTicket& FetchObjectRequest::_internal_source_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::io::deephaven::proto::backplane::grpc::TypedTicket* p = _impl_.source_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TypedTicket&>(::io::deephaven::proto::backplane::grpc::_TypedTicket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TypedTicket& FetchObjectRequest::source_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FetchObjectRequest.source_id)
  return _internal_source_id();
}
inline void FetchObjectRequest::unsafe_arena_set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TypedTicket* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_id_);
  }
  _impl_.source_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::TypedTicket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.FetchObjectRequest.source_id)
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* FetchObjectRequest::release_source_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::TypedTicket* released = _impl_.source_id_;
  _impl_.source_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* FetchObjectRequest::unsafe_arena_release_source_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FetchObjectRequest.source_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::TypedTicket* temp = _impl_.source_id_;
  _impl_.source_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* FetchObjectRequest::_internal_mutable_source_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TypedTicket>(GetArena());
    _impl_.source_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::TypedTicket*>(p);
  }
  return _impl_.source_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* FetchObjectRequest::mutable_source_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::io::deephaven::proto::backplane::grpc::TypedTicket* _msg = _internal_mutable_source_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FetchObjectRequest.source_id)
  return _msg;
}
inline void FetchObjectRequest::set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TypedTicket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.source_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::TypedTicket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FetchObjectRequest.source_id)
}

// -------------------------------------------------------------------

// FetchObjectResponse

// string type = 1;
inline void FetchObjectResponse::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& FetchObjectResponse::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FetchObjectResponse.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FetchObjectResponse::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FetchObjectResponse.type)
}
inline std::string* FetchObjectResponse::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FetchObjectResponse.type)
  return _s;
}
inline const std::string& FetchObjectResponse::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void FetchObjectResponse::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* FetchObjectResponse::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* FetchObjectResponse::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FetchObjectResponse.type)
  return _impl_.type_.Release();
}
inline void FetchObjectResponse::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FetchObjectResponse.type)
}

// bytes data = 2;
inline void FetchObjectResponse::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& FetchObjectResponse::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FetchObjectResponse.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FetchObjectResponse::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.FetchObjectResponse.data)
}
inline std::string* FetchObjectResponse::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FetchObjectResponse.data)
  return _s;
}
inline const std::string& FetchObjectResponse::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void FetchObjectResponse::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* FetchObjectResponse::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* FetchObjectResponse::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.FetchObjectResponse.data)
  return _impl_.data_.Release();
}
inline void FetchObjectResponse::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.FetchObjectResponse.data)
}

// repeated .io.deephaven.proto.backplane.grpc.TypedTicket typed_export_ids = 3;
inline int FetchObjectResponse::_internal_typed_export_ids_size() const {
  return _internal_typed_export_ids().size();
}
inline int FetchObjectResponse::typed_export_ids_size() const {
  return _internal_typed_export_ids_size();
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* FetchObjectResponse::mutable_typed_export_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.FetchObjectResponse.typed_export_ids)
  return _internal_mutable_typed_export_ids()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>* FetchObjectResponse::mutable_typed_export_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.FetchObjectResponse.typed_export_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_typed_export_ids();
}
inline const ::io::deephaven::proto::backplane::grpc::TypedTicket& FetchObjectResponse::typed_export_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.FetchObjectResponse.typed_export_ids)
  return _internal_typed_export_ids().Get(index);
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* FetchObjectResponse::add_typed_export_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::io::deephaven::proto::backplane::grpc::TypedTicket* _add = _internal_mutable_typed_export_ids()->Add();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.FetchObjectResponse.typed_export_ids)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>& FetchObjectResponse::typed_export_ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.FetchObjectResponse.typed_export_ids)
  return _internal_typed_export_ids();
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>&
FetchObjectResponse::_internal_typed_export_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.typed_export_ids_;
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>*
FetchObjectResponse::_internal_mutable_typed_export_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.typed_export_ids_;
}

// -------------------------------------------------------------------

// ConnectRequest

// .io.deephaven.proto.backplane.grpc.TypedTicket source_id = 1;
inline bool ConnectRequest::has_source_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.source_id_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::TypedTicket& ConnectRequest::_internal_source_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::io::deephaven::proto::backplane::grpc::TypedTicket* p = _impl_.source_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::TypedTicket&>(::io::deephaven::proto::backplane::grpc::_TypedTicket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::TypedTicket& ConnectRequest::source_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ConnectRequest.source_id)
  return _internal_source_id();
}
inline void ConnectRequest::unsafe_arena_set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TypedTicket* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_id_);
  }
  _impl_.source_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::TypedTicket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.ConnectRequest.source_id)
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* ConnectRequest::release_source_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::TypedTicket* released = _impl_.source_id_;
  _impl_.source_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* ConnectRequest::unsafe_arena_release_source_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ConnectRequest.source_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::TypedTicket* temp = _impl_.source_id_;
  _impl_.source_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* ConnectRequest::_internal_mutable_source_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TypedTicket>(GetArena());
    _impl_.source_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::TypedTicket*>(p);
  }
  return _impl_.source_id_;
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* ConnectRequest::mutable_source_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::io::deephaven::proto::backplane::grpc::TypedTicket* _msg = _internal_mutable_source_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ConnectRequest.source_id)
  return _msg;
}
inline void ConnectRequest::set_allocated_source_id(::io::deephaven::proto::backplane::grpc::TypedTicket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.source_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::TypedTicket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ConnectRequest.source_id)
}

// -------------------------------------------------------------------

// ClientData

// bytes payload = 1;
inline void ClientData::clear_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& ClientData::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ClientData.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientData::set_payload(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ClientData.payload)
}
inline std::string* ClientData::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ClientData.payload)
  return _s;
}
inline const std::string& ClientData::_internal_payload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.payload_.Get();
}
inline void ClientData::_internal_set_payload(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* ClientData::_internal_mutable_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* ClientData::release_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ClientData.payload)
  return _impl_.payload_.Release();
}
inline void ClientData::set_allocated_payload(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ClientData.payload)
}

// repeated .io.deephaven.proto.backplane.grpc.TypedTicket references = 2;
inline int ClientData::_internal_references_size() const {
  return _internal_references().size();
}
inline int ClientData::references_size() const {
  return _internal_references_size();
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* ClientData::mutable_references(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ClientData.references)
  return _internal_mutable_references()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>* ClientData::mutable_references()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.ClientData.references)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_references();
}
inline const ::io::deephaven::proto::backplane::grpc::TypedTicket& ClientData::references(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ClientData.references)
  return _internal_references().Get(index);
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* ClientData::add_references() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::io::deephaven::proto::backplane::grpc::TypedTicket* _add = _internal_mutable_references()->Add();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.ClientData.references)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>& ClientData::references() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.ClientData.references)
  return _internal_references();
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>&
ClientData::_internal_references() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.references_;
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>*
ClientData::_internal_mutable_references() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.references_;
}

// -------------------------------------------------------------------

// ServerData

// bytes payload = 1;
inline void ServerData::clear_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& ServerData::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ServerData.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerData::set_payload(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.ServerData.payload)
}
inline std::string* ServerData::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ServerData.payload)
  return _s;
}
inline const std::string& ServerData::_internal_payload() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.payload_.Get();
}
inline void ServerData::_internal_set_payload(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* ServerData::_internal_mutable_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* ServerData::release_payload() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.ServerData.payload)
  return _impl_.payload_.Release();
}
inline void ServerData::set_allocated_payload(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.payload_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.ServerData.payload)
}

// repeated .io.deephaven.proto.backplane.grpc.TypedTicket exported_references = 2;
inline int ServerData::_internal_exported_references_size() const {
  return _internal_exported_references().size();
}
inline int ServerData::exported_references_size() const {
  return _internal_exported_references_size();
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* ServerData::mutable_exported_references(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.ServerData.exported_references)
  return _internal_mutable_exported_references()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>* ServerData::mutable_exported_references()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.ServerData.exported_references)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_exported_references();
}
inline const ::io::deephaven::proto::backplane::grpc::TypedTicket& ServerData::exported_references(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.ServerData.exported_references)
  return _internal_exported_references().Get(index);
}
inline ::io::deephaven::proto::backplane::grpc::TypedTicket* ServerData::add_exported_references() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::io::deephaven::proto::backplane::grpc::TypedTicket* _add = _internal_mutable_exported_references()->Add();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.ServerData.exported_references)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>& ServerData::exported_references() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.ServerData.exported_references)
  return _internal_exported_references();
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>&
ServerData::_internal_exported_references() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exported_references_;
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::TypedTicket>*
ServerData::_internal_mutable_exported_references() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.exported_references_;
}

// -------------------------------------------------------------------

// StreamRequest

// .io.deephaven.proto.backplane.grpc.ConnectRequest connect = 1;
inline bool StreamRequest::has_connect() const {
  return message_case() == kConnect;
}
inline bool StreamRequest::_internal_has_connect() const {
  return message_case() == kConnect;
}
inline void StreamRequest::set_has_connect() {
  _impl_._oneof_case_[0] = kConnect;
}
inline void StreamRequest::clear_connect() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_case() == kConnect) {
    if (GetArena() == nullptr) {
      delete _impl_.message_.connect_;
    }
    clear_has_message();
  }
}
inline ::io::deephaven::proto::backplane::grpc::ConnectRequest* StreamRequest::release_connect() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.StreamRequest.connect)
  if (message_case() == kConnect) {
    clear_has_message();
    auto* temp = _impl_.message_.connect_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::ConnectRequest& StreamRequest::_internal_connect() const {
  return message_case() == kConnect ? *_impl_.message_.connect_ : reinterpret_cast<::io::deephaven::proto::backplane::grpc::ConnectRequest&>(::io::deephaven::proto::backplane::grpc::_ConnectRequest_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::ConnectRequest& StreamRequest::connect() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.StreamRequest.connect)
  return _internal_connect();
}
inline ::io::deephaven::proto::backplane::grpc::ConnectRequest* StreamRequest::unsafe_arena_release_connect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.StreamRequest.connect)
  if (message_case() == kConnect) {
    clear_has_message();
    auto* temp = _impl_.message_.connect_;
    _impl_.message_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamRequest::unsafe_arena_set_allocated_connect(::io::deephaven::proto::backplane::grpc::ConnectRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_message();
  if (value) {
    set_has_connect();
    _impl_.message_.connect_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.StreamRequest.connect)
}
inline ::io::deephaven::proto::backplane::grpc::ConnectRequest* StreamRequest::_internal_mutable_connect() {
  if (message_case() != kConnect) {
    clear_message();
    set_has_connect();
    _impl_.message_.connect_ = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ConnectRequest>(GetArena());
  }
  return _impl_.message_.connect_;
}
inline ::io::deephaven::proto::backplane::grpc::ConnectRequest* StreamRequest::mutable_connect() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::io::deephaven::proto::backplane::grpc::ConnectRequest* _msg = _internal_mutable_connect();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.StreamRequest.connect)
  return _msg;
}

// .io.deephaven.proto.backplane.grpc.ClientData data = 2;
inline bool StreamRequest::has_data() const {
  return message_case() == kData;
}
inline bool StreamRequest::_internal_has_data() const {
  return message_case() == kData;
}
inline void StreamRequest::set_has_data() {
  _impl_._oneof_case_[0] = kData;
}
inline void StreamRequest::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_case() == kData) {
    if (GetArena() == nullptr) {
      delete _impl_.message_.data_;
    }
    clear_has_message();
  }
}
inline ::io::deephaven::proto::backplane::grpc::ClientData* StreamRequest::release_data() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.StreamRequest.data)
  if (message_case() == kData) {
    clear_has_message();
    auto* temp = _impl_.message_.data_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::ClientData& StreamRequest::_internal_data() const {
  return message_case() == kData ? *_impl_.message_.data_ : reinterpret_cast<::io::deephaven::proto::backplane::grpc::ClientData&>(::io::deephaven::proto::backplane::grpc::_ClientData_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::ClientData& StreamRequest::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.StreamRequest.data)
  return _internal_data();
}
inline ::io::deephaven::proto::backplane::grpc::ClientData* StreamRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.StreamRequest.data)
  if (message_case() == kData) {
    clear_has_message();
    auto* temp = _impl_.message_.data_;
    _impl_.message_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamRequest::unsafe_arena_set_allocated_data(::io::deephaven::proto::backplane::grpc::ClientData* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_message();
  if (value) {
    set_has_data();
    _impl_.message_.data_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.StreamRequest.data)
}
inline ::io::deephaven::proto::backplane::grpc::ClientData* StreamRequest::_internal_mutable_data() {
  if (message_case() != kData) {
    clear_message();
    set_has_data();
    _impl_.message_.data_ = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ClientData>(GetArena());
  }
  return _impl_.message_.data_;
}
inline ::io::deephaven::proto::backplane::grpc::ClientData* StreamRequest::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::io::deephaven::proto::backplane::grpc::ClientData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.StreamRequest.data)
  return _msg;
}

inline bool StreamRequest::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void StreamRequest::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline StreamRequest::MessageCase StreamRequest::message_case() const {
  return StreamRequest::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamResponse

// .io.deephaven.proto.backplane.grpc.ServerData data = 1;
inline bool StreamResponse::has_data() const {
  return message_case() == kData;
}
inline bool StreamResponse::_internal_has_data() const {
  return message_case() == kData;
}
inline void StreamResponse::set_has_data() {
  _impl_._oneof_case_[0] = kData;
}
inline void StreamResponse::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_case() == kData) {
    if (GetArena() == nullptr) {
      delete _impl_.message_.data_;
    }
    clear_has_message();
  }
}
inline ::io::deephaven::proto::backplane::grpc::ServerData* StreamResponse::release_data() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.StreamResponse.data)
  if (message_case() == kData) {
    clear_has_message();
    auto* temp = _impl_.message_.data_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::ServerData& StreamResponse::_internal_data() const {
  return message_case() == kData ? *_impl_.message_.data_ : reinterpret_cast<::io::deephaven::proto::backplane::grpc::ServerData&>(::io::deephaven::proto::backplane::grpc::_ServerData_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::ServerData& StreamResponse::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.StreamResponse.data)
  return _internal_data();
}
inline ::io::deephaven::proto::backplane::grpc::ServerData* StreamResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.StreamResponse.data)
  if (message_case() == kData) {
    clear_has_message();
    auto* temp = _impl_.message_.data_;
    _impl_.message_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamResponse::unsafe_arena_set_allocated_data(::io::deephaven::proto::backplane::grpc::ServerData* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_message();
  if (value) {
    set_has_data();
    _impl_.message_.data_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.StreamResponse.data)
}
inline ::io::deephaven::proto::backplane::grpc::ServerData* StreamResponse::_internal_mutable_data() {
  if (message_case() != kData) {
    clear_message();
    set_has_data();
    _impl_.message_.data_ = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ServerData>(GetArena());
  }
  return _impl_.message_.data_;
}
inline ::io::deephaven::proto::backplane::grpc::ServerData* StreamResponse::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::io::deephaven::proto::backplane::grpc::ServerData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.StreamResponse.data)
  return _msg;
}

inline bool StreamResponse::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void StreamResponse::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline StreamResponse::MessageCase StreamResponse::message_case() const {
  return StreamResponse::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BrowserNextResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fobject_2eproto_2epb_2eh
