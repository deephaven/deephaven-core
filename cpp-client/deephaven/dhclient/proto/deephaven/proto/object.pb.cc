// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/object.proto

#include "deephaven/proto/object.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
      template <typename>
PROTOBUF_CONSTEXPR BrowserNextResponse::BrowserNextResponse(::_pbi::ConstantInitialized) {}
struct BrowserNextResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrowserNextResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrowserNextResponseDefaultTypeInternal() {}
  union {
    BrowserNextResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrowserNextResponseDefaultTypeInternal _BrowserNextResponse_default_instance_;

inline constexpr ServerData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : exported_references_{},
        payload_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ServerData::ServerData(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ServerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerDataDefaultTypeInternal() {}
  union {
    ServerData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerDataDefaultTypeInternal _ServerData_default_instance_;

inline constexpr FetchObjectResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : typed_export_ids_{},
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FetchObjectResponse::FetchObjectResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FetchObjectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchObjectResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchObjectResponseDefaultTypeInternal() {}
  union {
    FetchObjectResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchObjectResponseDefaultTypeInternal _FetchObjectResponse_default_instance_;

inline constexpr FetchObjectRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        source_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR FetchObjectRequest::FetchObjectRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FetchObjectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchObjectRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchObjectRequestDefaultTypeInternal() {}
  union {
    FetchObjectRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchObjectRequestDefaultTypeInternal _FetchObjectRequest_default_instance_;

inline constexpr ConnectRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        source_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ConnectRequest::ConnectRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConnectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectRequestDefaultTypeInternal() {}
  union {
    ConnectRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;

inline constexpr ClientData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : references_{},
        payload_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ClientData::ClientData(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ClientDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientDataDefaultTypeInternal() {}
  union {
    ClientData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientDataDefaultTypeInternal _ClientData_default_instance_;

inline constexpr StreamResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR StreamResponse::StreamResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StreamResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamResponseDefaultTypeInternal() {}
  union {
    StreamResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamResponseDefaultTypeInternal _StreamResponse_default_instance_;

inline constexpr StreamRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR StreamRequest::StreamRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StreamRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamRequestDefaultTypeInternal() {}
  union {
    StreamRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamRequestDefaultTypeInternal _StreamRequest_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
static ::_pb::Metadata file_level_metadata_deephaven_2fproto_2fobject_2eproto[8];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_deephaven_2fproto_2fobject_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_deephaven_2fproto_2fobject_2eproto = nullptr;
const ::uint32_t TableStruct_deephaven_2fproto_2fobject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchObjectRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchObjectRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchObjectRequest, _impl_.source_id_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchObjectResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchObjectResponse, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchObjectResponse, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::FetchObjectResponse, _impl_.typed_export_ids_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ConnectRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ConnectRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ConnectRequest, _impl_.source_id_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ClientData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ClientData, _impl_.payload_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ClientData, _impl_.references_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ServerData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ServerData, _impl_.payload_),
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::ServerData, _impl_.exported_references_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::StreamRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::StreamRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::StreamRequest, _impl_.message_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::StreamResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::StreamResponse, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::StreamResponse, _impl_.message_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::BrowserNextResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 9, -1, sizeof(::io::deephaven::proto::backplane::grpc::FetchObjectRequest)},
        {10, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::FetchObjectResponse)},
        {21, 30, -1, sizeof(::io::deephaven::proto::backplane::grpc::ConnectRequest)},
        {31, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ClientData)},
        {41, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::ServerData)},
        {51, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::StreamRequest)},
        {62, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::StreamResponse)},
        {72, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::BrowserNextResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::io::deephaven::proto::backplane::grpc::_FetchObjectRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_FetchObjectResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_ConnectRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_ClientData_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_ServerData_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_StreamRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_StreamResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_BrowserNextResponse_default_instance_._instance,
};
const char descriptor_table_protodef_deephaven_2fproto_2fobject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034deephaven/proto/object.proto\022!io.deeph"
    "aven.proto.backplane.grpc\032\034deephaven/pro"
    "to/ticket.proto\"W\n\022FetchObjectRequest\022A\n"
    "\tsource_id\030\001 \001(\0132..io.deephaven.proto.ba"
    "ckplane.grpc.TypedTicket\"{\n\023FetchObjectR"
    "esponse\022\014\n\004type\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\022H\n\020t"
    "yped_export_ids\030\003 \003(\0132..io.deephaven.pro"
    "to.backplane.grpc.TypedTicket\"S\n\016Connect"
    "Request\022A\n\tsource_id\030\001 \001(\0132..io.deephave"
    "n.proto.backplane.grpc.TypedTicket\"a\n\nCl"
    "ientData\022\017\n\007payload\030\001 \001(\014\022B\n\nreferences\030"
    "\002 \003(\0132..io.deephaven.proto.backplane.grp"
    "c.TypedTicket\"j\n\nServerData\022\017\n\007payload\030\001"
    " \001(\014\022K\n\023exported_references\030\002 \003(\0132..io.d"
    "eephaven.proto.backplane.grpc.TypedTicke"
    "t\"\237\001\n\rStreamRequest\022D\n\007connect\030\001 \001(\01321.i"
    "o.deephaven.proto.backplane.grpc.Connect"
    "RequestH\000\022=\n\004data\030\002 \001(\0132-.io.deephaven.p"
    "roto.backplane.grpc.ClientDataH\000B\t\n\007mess"
    "age\"Z\n\016StreamResponse\022=\n\004data\030\001 \001(\0132-.io"
    ".deephaven.proto.backplane.grpc.ServerDa"
    "taH\000B\t\n\007message\"\025\n\023BrowserNextResponse2\216"
    "\004\n\rObjectService\022\201\001\n\013FetchObject\0225.io.de"
    "ephaven.proto.backplane.grpc.FetchObject"
    "Request\0326.io.deephaven.proto.backplane.g"
    "rpc.FetchObjectResponse\"\003\210\002\001\022z\n\rMessageS"
    "tream\0220.io.deephaven.proto.backplane.grp"
    "c.StreamRequest\0321.io.deephaven.proto.bac"
    "kplane.grpc.StreamResponse\"\000(\0010\001\022|\n\021Open"
    "MessageStream\0220.io.deephaven.proto.backp"
    "lane.grpc.StreamRequest\0321.io.deephaven.p"
    "roto.backplane.grpc.StreamResponse\"\0000\001\022\177"
    "\n\021NextMessageStream\0220.io.deephaven.proto"
    ".backplane.grpc.StreamRequest\0326.io.deeph"
    "aven.proto.backplane.grpc.BrowserNextRes"
    "ponse\"\000BBH\001P\001Z<github.com/deephaven/deep"
    "haven-core/go/internal/proto/objectb\006pro"
    "to3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_deephaven_2fproto_2fobject_2eproto_deps[1] =
    {
        &::descriptor_table_deephaven_2fproto_2fticket_2eproto,
};
static ::absl::once_flag descriptor_table_deephaven_2fproto_2fobject_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_deephaven_2fproto_2fobject_2eproto = {
    false,
    false,
    1483,
    descriptor_table_protodef_deephaven_2fproto_2fobject_2eproto,
    "deephaven/proto/object.proto",
    &descriptor_table_deephaven_2fproto_2fobject_2eproto_once,
    descriptor_table_deephaven_2fproto_2fobject_2eproto_deps,
    1,
    8,
    schemas,
    file_default_instances,
    TableStruct_deephaven_2fproto_2fobject_2eproto::offsets,
    file_level_metadata_deephaven_2fproto_2fobject_2eproto,
    file_level_enum_descriptors_deephaven_2fproto_2fobject_2eproto,
    file_level_service_descriptors_deephaven_2fproto_2fobject_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_deephaven_2fproto_2fobject_2eproto_getter() {
  return &descriptor_table_deephaven_2fproto_2fobject_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_deephaven_2fproto_2fobject_2eproto(&descriptor_table_deephaven_2fproto_2fobject_2eproto);
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
// ===================================================================

class FetchObjectRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<FetchObjectRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FetchObjectRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::TypedTicket& source_id(const FetchObjectRequest* msg);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::io::deephaven::proto::backplane::grpc::TypedTicket& FetchObjectRequest::_Internal::source_id(const FetchObjectRequest* msg) {
  return *msg->_impl_.source_id_;
}
void FetchObjectRequest::clear_source_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.source_id_ != nullptr) _impl_.source_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FetchObjectRequest::FetchObjectRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.FetchObjectRequest)
}
inline PROTOBUF_NDEBUG_INLINE FetchObjectRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

FetchObjectRequest::FetchObjectRequest(
    ::google::protobuf::Arena* arena,
    const FetchObjectRequest& from)
    : ::google::protobuf::Message(arena) {
  FetchObjectRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.source_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TypedTicket>(arena, *from._impl_.source_id_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.FetchObjectRequest)
}
inline PROTOBUF_NDEBUG_INLINE FetchObjectRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FetchObjectRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.source_id_ = {};
}
FetchObjectRequest::~FetchObjectRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.FetchObjectRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FetchObjectRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.source_id_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FetchObjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.FetchObjectRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.source_id_ != nullptr);
    _impl_.source_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FetchObjectRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> FetchObjectRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FetchObjectRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FetchObjectRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .io.deephaven.proto.backplane.grpc.TypedTicket source_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FetchObjectRequest, _impl_.source_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.TypedTicket source_id = 1;
    {PROTOBUF_FIELD_OFFSET(FetchObjectRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TypedTicket>()},
  }}, {{
  }},
};

::uint8_t* FetchObjectRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.FetchObjectRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.TypedTicket source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.FetchObjectRequest)
  return target;
}

::size_t FetchObjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.FetchObjectRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.TypedTicket source_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FetchObjectRequest::_class_data_ = {
    FetchObjectRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FetchObjectRequest::GetClassData() const {
  return &_class_data_;
}

void FetchObjectRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FetchObjectRequest*>(&to_msg);
  auto& from = static_cast<const FetchObjectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.FetchObjectRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TypedTicket::MergeFrom(
        from._internal_source_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FetchObjectRequest::CopyFrom(const FetchObjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.FetchObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FetchObjectRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FetchObjectRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FetchObjectRequest::InternalSwap(FetchObjectRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.source_id_, other->_impl_.source_id_);
}

::google::protobuf::Metadata FetchObjectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fobject_2eproto_getter, &descriptor_table_deephaven_2fproto_2fobject_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fobject_2eproto[0]);
}
// ===================================================================

class FetchObjectResponse::_Internal {
 public:
};

void FetchObjectResponse::clear_typed_export_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.typed_export_ids_.Clear();
}
FetchObjectResponse::FetchObjectResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.FetchObjectResponse)
}
inline PROTOBUF_NDEBUG_INLINE FetchObjectResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : typed_export_ids_{visibility, arena, from.typed_export_ids_},
        type_(arena, from.type_),
        data_(arena, from.data_),
        _cached_size_{0} {}

FetchObjectResponse::FetchObjectResponse(
    ::google::protobuf::Arena* arena,
    const FetchObjectResponse& from)
    : ::google::protobuf::Message(arena) {
  FetchObjectResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.FetchObjectResponse)
}
inline PROTOBUF_NDEBUG_INLINE FetchObjectResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : typed_export_ids_{visibility, arena},
        type_(arena),
        data_(arena),
        _cached_size_{0} {}

inline void FetchObjectResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
FetchObjectResponse::~FetchObjectResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.FetchObjectResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FetchObjectResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.type_.Destroy();
  _impl_.data_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FetchObjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.FetchObjectResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.typed_export_ids_.Clear();
  _impl_.type_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FetchObjectResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 66, 2> FetchObjectResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FetchObjectResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string type = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FetchObjectResponse, _impl_.type_)}},
    // bytes data = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FetchObjectResponse, _impl_.data_)}},
    // repeated .io.deephaven.proto.backplane.grpc.TypedTicket typed_export_ids = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(FetchObjectResponse, _impl_.typed_export_ids_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string type = 1;
    {PROTOBUF_FIELD_OFFSET(FetchObjectResponse, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes data = 2;
    {PROTOBUF_FIELD_OFFSET(FetchObjectResponse, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated .io.deephaven.proto.backplane.grpc.TypedTicket typed_export_ids = 3;
    {PROTOBUF_FIELD_OFFSET(FetchObjectResponse, _impl_.typed_export_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TypedTicket>()},
  }}, {{
    "\65\4\0\0\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.FetchObjectResponse"
    "type"
  }},
};

::uint8_t* FetchObjectResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.FetchObjectResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.FetchObjectResponse.type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // repeated .io.deephaven.proto.backplane.grpc.TypedTicket typed_export_ids = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_typed_export_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_typed_export_ids().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.FetchObjectResponse)
  return target;
}

::size_t FetchObjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.FetchObjectResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.TypedTicket typed_export_ids = 3;
  total_size += 1UL * this->_internal_typed_export_ids_size();
  for (const auto& msg : this->_internal_typed_export_ids()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData FetchObjectResponse::_class_data_ = {
    FetchObjectResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* FetchObjectResponse::GetClassData() const {
  return &_class_data_;
}

void FetchObjectResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<FetchObjectResponse*>(&to_msg);
  auto& from = static_cast<const FetchObjectResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.FetchObjectResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_typed_export_ids()->MergeFrom(
      from._internal_typed_export_ids());
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FetchObjectResponse::CopyFrom(const FetchObjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.FetchObjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FetchObjectResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FetchObjectResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FetchObjectResponse::InternalSwap(FetchObjectResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.typed_export_ids_.InternalSwap(&other->_impl_.typed_export_ids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
}

::google::protobuf::Metadata FetchObjectResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fobject_2eproto_getter, &descriptor_table_deephaven_2fproto_2fobject_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fobject_2eproto[1]);
}
// ===================================================================

class ConnectRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ConnectRequest, _impl_._has_bits_);
  static const ::io::deephaven::proto::backplane::grpc::TypedTicket& source_id(const ConnectRequest* msg);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::io::deephaven::proto::backplane::grpc::TypedTicket& ConnectRequest::_Internal::source_id(const ConnectRequest* msg) {
  return *msg->_impl_.source_id_;
}
void ConnectRequest::clear_source_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.source_id_ != nullptr) _impl_.source_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ConnectRequest::ConnectRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ConnectRequest)
}
inline PROTOBUF_NDEBUG_INLINE ConnectRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ConnectRequest::ConnectRequest(
    ::google::protobuf::Arena* arena,
    const ConnectRequest& from)
    : ::google::protobuf::Message(arena) {
  ConnectRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.source_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TypedTicket>(arena, *from._impl_.source_id_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ConnectRequest)
}
inline PROTOBUF_NDEBUG_INLINE ConnectRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ConnectRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.source_id_ = {};
}
ConnectRequest::~ConnectRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ConnectRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ConnectRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.source_id_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ConnectRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.source_id_ != nullptr);
    _impl_.source_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ConnectRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ConnectRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConnectRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ConnectRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .io.deephaven.proto.backplane.grpc.TypedTicket source_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ConnectRequest, _impl_.source_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.TypedTicket source_id = 1;
    {PROTOBUF_FIELD_OFFSET(ConnectRequest, _impl_.source_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TypedTicket>()},
  }}, {{
  }},
};

::uint8_t* ConnectRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ConnectRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .io.deephaven.proto.backplane.grpc.TypedTicket source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::source_id(this),
        _Internal::source_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ConnectRequest)
  return target;
}

::size_t ConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ConnectRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.TypedTicket source_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.source_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ConnectRequest::_class_data_ = {
    ConnectRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ConnectRequest::GetClassData() const {
  return &_class_data_;
}

void ConnectRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ConnectRequest*>(&to_msg);
  auto& from = static_cast<const ConnectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ConnectRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_source_id()->::io::deephaven::proto::backplane::grpc::TypedTicket::MergeFrom(
        from._internal_source_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ConnectRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ConnectRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ConnectRequest::InternalSwap(ConnectRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.source_id_, other->_impl_.source_id_);
}

::google::protobuf::Metadata ConnectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fobject_2eproto_getter, &descriptor_table_deephaven_2fproto_2fobject_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fobject_2eproto[2]);
}
// ===================================================================

class ClientData::_Internal {
 public:
};

void ClientData::clear_references() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.references_.Clear();
}
ClientData::ClientData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ClientData)
}
inline PROTOBUF_NDEBUG_INLINE ClientData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : references_{visibility, arena, from.references_},
        payload_(arena, from.payload_),
        _cached_size_{0} {}

ClientData::ClientData(
    ::google::protobuf::Arena* arena,
    const ClientData& from)
    : ::google::protobuf::Message(arena) {
  ClientData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ClientData)
}
inline PROTOBUF_NDEBUG_INLINE ClientData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : references_{visibility, arena},
        payload_(arena),
        _cached_size_{0} {}

inline void ClientData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ClientData::~ClientData() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ClientData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ClientData::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.payload_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ClientData::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ClientData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.references_.Clear();
  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ClientData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> ClientData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ClientData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .io.deephaven.proto.backplane.grpc.TypedTicket references = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ClientData, _impl_.references_)}},
    // bytes payload = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ClientData, _impl_.payload_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes payload = 1;
    {PROTOBUF_FIELD_OFFSET(ClientData, _impl_.payload_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated .io.deephaven.proto.backplane.grpc.TypedTicket references = 2;
    {PROTOBUF_FIELD_OFFSET(ClientData, _impl_.references_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TypedTicket>()},
  }}, {{
  }},
};

::uint8_t* ClientData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ClientData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    const std::string& _s = this->_internal_payload();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // repeated .io.deephaven.proto.backplane.grpc.TypedTicket references = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_references_size()); i < n; i++) {
    const auto& repfield = this->_internal_references().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ClientData)
  return target;
}

::size_t ClientData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ClientData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.TypedTicket references = 2;
  total_size += 1UL * this->_internal_references_size();
  for (const auto& msg : this->_internal_references()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ClientData::_class_data_ = {
    ClientData::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ClientData::GetClassData() const {
  return &_class_data_;
}

void ClientData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ClientData*>(&to_msg);
  auto& from = static_cast<const ClientData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ClientData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_references()->MergeFrom(
      from._internal_references());
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ClientData::CopyFrom(const ClientData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ClientData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ClientData::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ClientData::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ClientData::InternalSwap(ClientData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.references_.InternalSwap(&other->_impl_.references_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, &other->_impl_.payload_, arena);
}

::google::protobuf::Metadata ClientData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fobject_2eproto_getter, &descriptor_table_deephaven_2fproto_2fobject_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fobject_2eproto[3]);
}
// ===================================================================

class ServerData::_Internal {
 public:
};

void ServerData::clear_exported_references() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exported_references_.Clear();
}
ServerData::ServerData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.ServerData)
}
inline PROTOBUF_NDEBUG_INLINE ServerData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : exported_references_{visibility, arena, from.exported_references_},
        payload_(arena, from.payload_),
        _cached_size_{0} {}

ServerData::ServerData(
    ::google::protobuf::Arena* arena,
    const ServerData& from)
    : ::google::protobuf::Message(arena) {
  ServerData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.ServerData)
}
inline PROTOBUF_NDEBUG_INLINE ServerData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : exported_references_{visibility, arena},
        payload_(arena),
        _cached_size_{0} {}

inline void ServerData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ServerData::~ServerData() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.ServerData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ServerData::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.payload_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ServerData::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.ServerData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exported_references_.Clear();
  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ServerData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> ServerData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ServerData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .io.deephaven.proto.backplane.grpc.TypedTicket exported_references = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ServerData, _impl_.exported_references_)}},
    // bytes payload = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ServerData, _impl_.payload_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes payload = 1;
    {PROTOBUF_FIELD_OFFSET(ServerData, _impl_.payload_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated .io.deephaven.proto.backplane.grpc.TypedTicket exported_references = 2;
    {PROTOBUF_FIELD_OFFSET(ServerData, _impl_.exported_references_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::TypedTicket>()},
  }}, {{
  }},
};

::uint8_t* ServerData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.ServerData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    const std::string& _s = this->_internal_payload();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // repeated .io.deephaven.proto.backplane.grpc.TypedTicket exported_references = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exported_references_size()); i < n; i++) {
    const auto& repfield = this->_internal_exported_references().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.ServerData)
  return target;
}

::size_t ServerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.ServerData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.deephaven.proto.backplane.grpc.TypedTicket exported_references = 2;
  total_size += 1UL * this->_internal_exported_references_size();
  for (const auto& msg : this->_internal_exported_references()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ServerData::_class_data_ = {
    ServerData::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ServerData::GetClassData() const {
  return &_class_data_;
}

void ServerData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ServerData*>(&to_msg);
  auto& from = static_cast<const ServerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.ServerData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_exported_references()->MergeFrom(
      from._internal_exported_references());
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ServerData::CopyFrom(const ServerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.ServerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ServerData::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ServerData::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ServerData::InternalSwap(ServerData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exported_references_.InternalSwap(&other->_impl_.exported_references_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, &other->_impl_.payload_, arena);
}

::google::protobuf::Metadata ServerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fobject_2eproto_getter, &descriptor_table_deephaven_2fproto_2fobject_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fobject_2eproto[4]);
}
// ===================================================================

class StreamRequest::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::StreamRequest, _impl_._oneof_case_);
  static const ::io::deephaven::proto::backplane::grpc::ConnectRequest& connect(const StreamRequest* msg);
  static const ::io::deephaven::proto::backplane::grpc::ClientData& data(const StreamRequest* msg);
};

const ::io::deephaven::proto::backplane::grpc::ConnectRequest& StreamRequest::_Internal::connect(const StreamRequest* msg) {
  return *msg->_impl_.message_.connect_;
}
const ::io::deephaven::proto::backplane::grpc::ClientData& StreamRequest::_Internal::data(const StreamRequest* msg) {
  return *msg->_impl_.message_.data_;
}
void StreamRequest::set_allocated_connect(::io::deephaven::proto::backplane::grpc::ConnectRequest* connect) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (connect) {
    ::google::protobuf::Arena* submessage_arena = connect->GetArena();
    if (message_arena != submessage_arena) {
      connect = ::google::protobuf::internal::GetOwnedMessage(message_arena, connect, submessage_arena);
    }
    set_has_connect();
    _impl_.message_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.StreamRequest.connect)
}
void StreamRequest::set_allocated_data(::io::deephaven::proto::backplane::grpc::ClientData* data) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (data) {
    ::google::protobuf::Arena* submessage_arena = data->GetArena();
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(message_arena, data, submessage_arena);
    }
    set_has_data();
    _impl_.message_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.StreamRequest.data)
}
StreamRequest::StreamRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.StreamRequest)
}
inline PROTOBUF_NDEBUG_INLINE StreamRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : message_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

StreamRequest::StreamRequest(
    ::google::protobuf::Arena* arena,
    const StreamRequest& from)
    : ::google::protobuf::Message(arena) {
  StreamRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (message_case()) {
    case MESSAGE_NOT_SET:
      break;
      case kConnect:
        _impl_.message_.connect_ = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ConnectRequest>(arena, *from._impl_.message_.connect_);
        break;
      case kData:
        _impl_.message_.data_ = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ClientData>(arena, *from._impl_.message_.data_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.StreamRequest)
}
inline PROTOBUF_NDEBUG_INLINE StreamRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void StreamRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
StreamRequest::~StreamRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.StreamRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StreamRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_message()) {
    clear_message();
  }
  _impl_.~Impl_();
}

void StreamRequest::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.StreamRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (message_case()) {
    case kConnect: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.connect_;
      }
      break;
    }
    case kData: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.data_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


PROTOBUF_NOINLINE void StreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.StreamRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StreamRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2> StreamRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StreamRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.ConnectRequest connect = 1;
    {PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.message_.connect_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.ClientData data = 2;
    {PROTOBUF_FIELD_OFFSET(StreamRequest, _impl_.message_.data_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ConnectRequest>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ClientData>()},
  }}, {{
  }},
};

::uint8_t* StreamRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.StreamRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (message_case()) {
    case kConnect: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, _Internal::connect(this),
          _Internal::connect(this).GetCachedSize(), target, stream);
      break;
    }
    case kData: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::data(this),
          _Internal::data(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.StreamRequest)
  return target;
}

::size_t StreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.StreamRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .io.deephaven.proto.backplane.grpc.ConnectRequest connect = 1;
    case kConnect: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.message_.connect_);
      break;
    }
    // .io.deephaven.proto.backplane.grpc.ClientData data = 2;
    case kData: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.message_.data_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StreamRequest::_class_data_ = {
    StreamRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StreamRequest::GetClassData() const {
  return &_class_data_;
}

void StreamRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StreamRequest*>(&to_msg);
  auto& from = static_cast<const StreamRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.StreamRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kConnect: {
      _this->_internal_mutable_connect()->::io::deephaven::proto::backplane::grpc::ConnectRequest::MergeFrom(
          from._internal_connect());
      break;
    }
    case kData: {
      _this->_internal_mutable_data()->::io::deephaven::proto::backplane::grpc::ClientData::MergeFrom(
          from._internal_data());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamRequest::CopyFrom(const StreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.StreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StreamRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StreamRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StreamRequest::InternalSwap(StreamRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata StreamRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fobject_2eproto_getter, &descriptor_table_deephaven_2fproto_2fobject_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fobject_2eproto[5]);
}
// ===================================================================

class StreamResponse::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::StreamResponse, _impl_._oneof_case_);
  static const ::io::deephaven::proto::backplane::grpc::ServerData& data(const StreamResponse* msg);
};

const ::io::deephaven::proto::backplane::grpc::ServerData& StreamResponse::_Internal::data(const StreamResponse* msg) {
  return *msg->_impl_.message_.data_;
}
void StreamResponse::set_allocated_data(::io::deephaven::proto::backplane::grpc::ServerData* data) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (data) {
    ::google::protobuf::Arena* submessage_arena = data->GetArena();
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(message_arena, data, submessage_arena);
    }
    set_has_data();
    _impl_.message_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.StreamResponse.data)
}
StreamResponse::StreamResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.StreamResponse)
}
inline PROTOBUF_NDEBUG_INLINE StreamResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : message_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

StreamResponse::StreamResponse(
    ::google::protobuf::Arena* arena,
    const StreamResponse& from)
    : ::google::protobuf::Message(arena) {
  StreamResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (message_case()) {
    case MESSAGE_NOT_SET:
      break;
      case kData:
        _impl_.message_.data_ = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::ServerData>(arena, *from._impl_.message_.data_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.StreamResponse)
}
inline PROTOBUF_NDEBUG_INLINE StreamResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void StreamResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
StreamResponse::~StreamResponse() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.StreamResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StreamResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_message()) {
    clear_message();
  }
  _impl_.~Impl_();
}

void StreamResponse::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:io.deephaven.proto.backplane.grpc.StreamResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (message_case()) {
    case kData: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.data_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


PROTOBUF_NOINLINE void StreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.StreamResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StreamResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> StreamResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StreamResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.ServerData data = 1;
    {PROTOBUF_FIELD_OFFSET(StreamResponse, _impl_.message_.data_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::ServerData>()},
  }}, {{
  }},
};

::uint8_t* StreamResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.StreamResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .io.deephaven.proto.backplane.grpc.ServerData data = 1;
  if (message_case() == kData) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.StreamResponse)
  return target;
}

::size_t StreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.StreamResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .io.deephaven.proto.backplane.grpc.ServerData data = 1;
    case kData: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.message_.data_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StreamResponse::_class_data_ = {
    StreamResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StreamResponse::GetClassData() const {
  return &_class_data_;
}

void StreamResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StreamResponse*>(&to_msg);
  auto& from = static_cast<const StreamResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.StreamResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kData: {
      _this->_internal_mutable_data()->::io::deephaven::proto::backplane::grpc::ServerData::MergeFrom(
          from._internal_data());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamResponse::CopyFrom(const StreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.StreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StreamResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StreamResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StreamResponse::InternalSwap(StreamResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata StreamResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fobject_2eproto_getter, &descriptor_table_deephaven_2fproto_2fobject_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fobject_2eproto[6]);
}
// ===================================================================

class BrowserNextResponse::_Internal {
 public:
};

BrowserNextResponse::BrowserNextResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.BrowserNextResponse)
}
BrowserNextResponse::BrowserNextResponse(
    ::google::protobuf::Arena* arena,
    const BrowserNextResponse& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  BrowserNextResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.BrowserNextResponse)
}









::google::protobuf::Metadata BrowserNextResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_deephaven_2fproto_2fobject_2eproto_getter, &descriptor_table_deephaven_2fproto_2fobject_2eproto_once,
      file_level_metadata_deephaven_2fproto_2fobject_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
