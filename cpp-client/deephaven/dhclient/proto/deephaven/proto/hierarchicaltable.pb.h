// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: deephaven/proto/hierarchicaltable.proto
// Protobuf C++ Version: 5.28.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fhierarchicaltable_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fhierarchicaltable_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "deephaven/proto/table.pb.h"
#include "deephaven/proto/ticket.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_deephaven_2fproto_2fhierarchicaltable_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto;
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
class HierarchicalTableApplyRequest;
struct HierarchicalTableApplyRequestDefaultTypeInternal;
extern HierarchicalTableApplyRequestDefaultTypeInternal _HierarchicalTableApplyRequest_default_instance_;
class HierarchicalTableApplyResponse;
struct HierarchicalTableApplyResponseDefaultTypeInternal;
extern HierarchicalTableApplyResponseDefaultTypeInternal _HierarchicalTableApplyResponse_default_instance_;
class HierarchicalTableDescriptor;
struct HierarchicalTableDescriptorDefaultTypeInternal;
extern HierarchicalTableDescriptorDefaultTypeInternal _HierarchicalTableDescriptor_default_instance_;
class HierarchicalTableSourceExportRequest;
struct HierarchicalTableSourceExportRequestDefaultTypeInternal;
extern HierarchicalTableSourceExportRequestDefaultTypeInternal _HierarchicalTableSourceExportRequest_default_instance_;
class HierarchicalTableViewKeyTableDescriptor;
struct HierarchicalTableViewKeyTableDescriptorDefaultTypeInternal;
extern HierarchicalTableViewKeyTableDescriptorDefaultTypeInternal _HierarchicalTableViewKeyTableDescriptor_default_instance_;
class HierarchicalTableViewRequest;
struct HierarchicalTableViewRequestDefaultTypeInternal;
extern HierarchicalTableViewRequestDefaultTypeInternal _HierarchicalTableViewRequest_default_instance_;
class HierarchicalTableViewResponse;
struct HierarchicalTableViewResponseDefaultTypeInternal;
extern HierarchicalTableViewResponseDefaultTypeInternal _HierarchicalTableViewResponse_default_instance_;
class RollupRequest;
struct RollupRequestDefaultTypeInternal;
extern RollupRequestDefaultTypeInternal _RollupRequest_default_instance_;
class RollupResponse;
struct RollupResponseDefaultTypeInternal;
extern RollupResponseDefaultTypeInternal _RollupResponse_default_instance_;
class TreeRequest;
struct TreeRequestDefaultTypeInternal;
extern TreeRequestDefaultTypeInternal _TreeRequest_default_instance_;
class TreeResponse;
struct TreeResponseDefaultTypeInternal;
extern TreeResponseDefaultTypeInternal _TreeResponse_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

// ===================================================================


// -------------------------------------------------------------------

class TreeResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.TreeResponse) */ {
 public:
  inline TreeResponse() : TreeResponse(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TreeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline TreeResponse(const TreeResponse& from) : TreeResponse(nullptr, from) {}
  inline TreeResponse(TreeResponse&& from) noexcept
      : TreeResponse(nullptr, std::move(from)) {}
  inline TreeResponse& operator=(const TreeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TreeResponse& operator=(TreeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TreeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TreeResponse* internal_default_instance() {
    return reinterpret_cast<const TreeResponse*>(
        &_TreeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(TreeResponse& a, TreeResponse& b) { a.Swap(&b); }
  inline void Swap(TreeResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TreeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TreeResponse* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<TreeResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TreeResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TreeResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "io.deephaven.proto.backplane.grpc.TreeResponse"; }

 protected:
  explicit TreeResponse(::google::protobuf::Arena* arena);
  TreeResponse(::google::protobuf::Arena* arena, const TreeResponse& from);
  TreeResponse(::google::protobuf::Arena* arena, TreeResponse&& from) noexcept
      : TreeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.TreeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TreeResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TreeResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class RollupResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.RollupResponse) */ {
 public:
  inline RollupResponse() : RollupResponse(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollupResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RollupResponse(const RollupResponse& from) : RollupResponse(nullptr, from) {}
  inline RollupResponse(RollupResponse&& from) noexcept
      : RollupResponse(nullptr, std::move(from)) {}
  inline RollupResponse& operator=(const RollupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollupResponse& operator=(RollupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RollupResponse* internal_default_instance() {
    return reinterpret_cast<const RollupResponse*>(
        &_RollupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(RollupResponse& a, RollupResponse& b) { a.Swap(&b); }
  inline void Swap(RollupResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollupResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollupResponse* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<RollupResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RollupResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RollupResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "io.deephaven.proto.backplane.grpc.RollupResponse"; }

 protected:
  explicit RollupResponse(::google::protobuf::Arena* arena);
  RollupResponse(::google::protobuf::Arena* arena, const RollupResponse& from);
  RollupResponse(::google::protobuf::Arena* arena, RollupResponse&& from) noexcept
      : RollupResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.RollupResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RollupResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RollupResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class HierarchicalTableViewResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HierarchicalTableViewResponse) */ {
 public:
  inline HierarchicalTableViewResponse() : HierarchicalTableViewResponse(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HierarchicalTableViewResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline HierarchicalTableViewResponse(const HierarchicalTableViewResponse& from) : HierarchicalTableViewResponse(nullptr, from) {}
  inline HierarchicalTableViewResponse(HierarchicalTableViewResponse&& from) noexcept
      : HierarchicalTableViewResponse(nullptr, std::move(from)) {}
  inline HierarchicalTableViewResponse& operator=(const HierarchicalTableViewResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HierarchicalTableViewResponse& operator=(HierarchicalTableViewResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HierarchicalTableViewResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HierarchicalTableViewResponse* internal_default_instance() {
    return reinterpret_cast<const HierarchicalTableViewResponse*>(
        &_HierarchicalTableViewResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(HierarchicalTableViewResponse& a, HierarchicalTableViewResponse& b) { a.Swap(&b); }
  inline void Swap(HierarchicalTableViewResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HierarchicalTableViewResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HierarchicalTableViewResponse* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<HierarchicalTableViewResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HierarchicalTableViewResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HierarchicalTableViewResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "io.deephaven.proto.backplane.grpc.HierarchicalTableViewResponse"; }

 protected:
  explicit HierarchicalTableViewResponse(::google::protobuf::Arena* arena);
  HierarchicalTableViewResponse(::google::protobuf::Arena* arena, const HierarchicalTableViewResponse& from);
  HierarchicalTableViewResponse(::google::protobuf::Arena* arena, HierarchicalTableViewResponse&& from) noexcept
      : HierarchicalTableViewResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HierarchicalTableViewResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_HierarchicalTableViewResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HierarchicalTableViewResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class HierarchicalTableDescriptor final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor) */ {
 public:
  inline HierarchicalTableDescriptor() : HierarchicalTableDescriptor(nullptr) {}
  ~HierarchicalTableDescriptor() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HierarchicalTableDescriptor(
      ::google::protobuf::internal::ConstantInitialized);

  inline HierarchicalTableDescriptor(const HierarchicalTableDescriptor& from) : HierarchicalTableDescriptor(nullptr, from) {}
  inline HierarchicalTableDescriptor(HierarchicalTableDescriptor&& from) noexcept
      : HierarchicalTableDescriptor(nullptr, std::move(from)) {}
  inline HierarchicalTableDescriptor& operator=(const HierarchicalTableDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline HierarchicalTableDescriptor& operator=(HierarchicalTableDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HierarchicalTableDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const HierarchicalTableDescriptor* internal_default_instance() {
    return reinterpret_cast<const HierarchicalTableDescriptor*>(
        &_HierarchicalTableDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(HierarchicalTableDescriptor& a, HierarchicalTableDescriptor& b) { a.Swap(&b); }
  inline void Swap(HierarchicalTableDescriptor* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HierarchicalTableDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HierarchicalTableDescriptor* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<HierarchicalTableDescriptor>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HierarchicalTableDescriptor& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HierarchicalTableDescriptor& from) { HierarchicalTableDescriptor::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HierarchicalTableDescriptor* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor"; }

 protected:
  explicit HierarchicalTableDescriptor(::google::protobuf::Arena* arena);
  HierarchicalTableDescriptor(::google::protobuf::Arena* arena, const HierarchicalTableDescriptor& from);
  HierarchicalTableDescriptor(::google::protobuf::Arena* arena, HierarchicalTableDescriptor&& from) noexcept
      : HierarchicalTableDescriptor(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSnapshotSchemaFieldNumber = 1,
    kIsStaticFieldNumber = 2,
  };
  // bytes snapshot_schema = 1;
  void clear_snapshot_schema() ;
  const std::string& snapshot_schema() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_snapshot_schema(Arg_&& arg, Args_... args);
  std::string* mutable_snapshot_schema();
  PROTOBUF_NODISCARD std::string* release_snapshot_schema();
  void set_allocated_snapshot_schema(std::string* value);

  private:
  const std::string& _internal_snapshot_schema() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshot_schema(
      const std::string& value);
  std::string* _internal_mutable_snapshot_schema();

  public:
  // bool is_static = 2;
  void clear_is_static() ;
  bool is_static() const;
  void set_is_static(bool value);

  private:
  bool _internal_is_static() const;
  void _internal_set_is_static(bool value);

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_HierarchicalTableDescriptor_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HierarchicalTableDescriptor& from_msg);
    ::google::protobuf::internal::ArenaStringPtr snapshot_schema_;
    bool is_static_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class HierarchicalTableApplyResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyResponse) */ {
 public:
  inline HierarchicalTableApplyResponse() : HierarchicalTableApplyResponse(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HierarchicalTableApplyResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline HierarchicalTableApplyResponse(const HierarchicalTableApplyResponse& from) : HierarchicalTableApplyResponse(nullptr, from) {}
  inline HierarchicalTableApplyResponse(HierarchicalTableApplyResponse&& from) noexcept
      : HierarchicalTableApplyResponse(nullptr, std::move(from)) {}
  inline HierarchicalTableApplyResponse& operator=(const HierarchicalTableApplyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HierarchicalTableApplyResponse& operator=(HierarchicalTableApplyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HierarchicalTableApplyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HierarchicalTableApplyResponse* internal_default_instance() {
    return reinterpret_cast<const HierarchicalTableApplyResponse*>(
        &_HierarchicalTableApplyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(HierarchicalTableApplyResponse& a, HierarchicalTableApplyResponse& b) { a.Swap(&b); }
  inline void Swap(HierarchicalTableApplyResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HierarchicalTableApplyResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HierarchicalTableApplyResponse* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<HierarchicalTableApplyResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HierarchicalTableApplyResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HierarchicalTableApplyResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "io.deephaven.proto.backplane.grpc.HierarchicalTableApplyResponse"; }

 protected:
  explicit HierarchicalTableApplyResponse(::google::protobuf::Arena* arena);
  HierarchicalTableApplyResponse(::google::protobuf::Arena* arena, const HierarchicalTableApplyResponse& from);
  HierarchicalTableApplyResponse(::google::protobuf::Arena* arena, HierarchicalTableApplyResponse&& from) noexcept
      : HierarchicalTableApplyResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::internal::ZeroFieldsBase::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_HierarchicalTableApplyResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HierarchicalTableApplyResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class TreeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.TreeRequest) */ {
 public:
  inline TreeRequest() : TreeRequest(nullptr) {}
  ~TreeRequest() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TreeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline TreeRequest(const TreeRequest& from) : TreeRequest(nullptr, from) {}
  inline TreeRequest(TreeRequest&& from) noexcept
      : TreeRequest(nullptr, std::move(from)) {}
  inline TreeRequest& operator=(const TreeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TreeRequest& operator=(TreeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TreeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TreeRequest* internal_default_instance() {
    return reinterpret_cast<const TreeRequest*>(
        &_TreeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(TreeRequest& a, TreeRequest& b) { a.Swap(&b); }
  inline void Swap(TreeRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TreeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TreeRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<TreeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TreeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TreeRequest& from) { TreeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TreeRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "io.deephaven.proto.backplane.grpc.TreeRequest"; }

 protected:
  explicit TreeRequest(::google::protobuf::Arena* arena);
  TreeRequest(::google::protobuf::Arena* arena, const TreeRequest& from);
  TreeRequest(::google::protobuf::Arena* arena, TreeRequest&& from) noexcept
      : TreeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdentifierColumnFieldNumber = 3,
    kParentIdentifierColumnFieldNumber = 4,
    kResultTreeTableIdFieldNumber = 1,
    kSourceTableIdFieldNumber = 2,
    kPromoteOrphansFieldNumber = 5,
  };
  // string identifier_column = 3;
  void clear_identifier_column() ;
  const std::string& identifier_column() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier_column(Arg_&& arg, Args_... args);
  std::string* mutable_identifier_column();
  PROTOBUF_NODISCARD std::string* release_identifier_column();
  void set_allocated_identifier_column(std::string* value);

  private:
  const std::string& _internal_identifier_column() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier_column(
      const std::string& value);
  std::string* _internal_mutable_identifier_column();

  public:
  // string parent_identifier_column = 4;
  void clear_parent_identifier_column() ;
  const std::string& parent_identifier_column() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent_identifier_column(Arg_&& arg, Args_... args);
  std::string* mutable_parent_identifier_column();
  PROTOBUF_NODISCARD std::string* release_parent_identifier_column();
  void set_allocated_parent_identifier_column(std::string* value);

  private:
  const std::string& _internal_parent_identifier_column() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_identifier_column(
      const std::string& value);
  std::string* _internal_mutable_parent_identifier_column();

  public:
  // .io.deephaven.proto.backplane.grpc.Ticket result_tree_table_id = 1;
  bool has_result_tree_table_id() const;
  void clear_result_tree_table_id() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& result_tree_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_result_tree_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_result_tree_table_id();
  void set_allocated_result_tree_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_result_tree_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_result_tree_table_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_result_tree_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_result_tree_table_id();

  public:
  // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
  bool has_source_table_id() const;
  void clear_source_table_id() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& source_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_source_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_source_table_id();
  void set_allocated_source_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_source_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_source_table_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_source_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_source_table_id();

  public:
  // bool promote_orphans = 5;
  void clear_promote_orphans() ;
  bool promote_orphans() const;
  void set_promote_orphans(bool value);

  private:
  bool _internal_promote_orphans() const;
  void _internal_set_promote_orphans(bool value);

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.TreeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      95, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TreeRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TreeRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr identifier_column_;
    ::google::protobuf::internal::ArenaStringPtr parent_identifier_column_;
    ::io::deephaven::proto::backplane::grpc::Ticket* result_tree_table_id_;
    ::io::deephaven::proto::backplane::grpc::Ticket* source_table_id_;
    bool promote_orphans_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class HierarchicalTableViewKeyTableDescriptor final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor) */ {
 public:
  inline HierarchicalTableViewKeyTableDescriptor() : HierarchicalTableViewKeyTableDescriptor(nullptr) {}
  ~HierarchicalTableViewKeyTableDescriptor() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HierarchicalTableViewKeyTableDescriptor(
      ::google::protobuf::internal::ConstantInitialized);

  inline HierarchicalTableViewKeyTableDescriptor(const HierarchicalTableViewKeyTableDescriptor& from) : HierarchicalTableViewKeyTableDescriptor(nullptr, from) {}
  inline HierarchicalTableViewKeyTableDescriptor(HierarchicalTableViewKeyTableDescriptor&& from) noexcept
      : HierarchicalTableViewKeyTableDescriptor(nullptr, std::move(from)) {}
  inline HierarchicalTableViewKeyTableDescriptor& operator=(const HierarchicalTableViewKeyTableDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline HierarchicalTableViewKeyTableDescriptor& operator=(HierarchicalTableViewKeyTableDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HierarchicalTableViewKeyTableDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const HierarchicalTableViewKeyTableDescriptor* internal_default_instance() {
    return reinterpret_cast<const HierarchicalTableViewKeyTableDescriptor*>(
        &_HierarchicalTableViewKeyTableDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(HierarchicalTableViewKeyTableDescriptor& a, HierarchicalTableViewKeyTableDescriptor& b) { a.Swap(&b); }
  inline void Swap(HierarchicalTableViewKeyTableDescriptor* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HierarchicalTableViewKeyTableDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HierarchicalTableViewKeyTableDescriptor* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<HierarchicalTableViewKeyTableDescriptor>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HierarchicalTableViewKeyTableDescriptor& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HierarchicalTableViewKeyTableDescriptor& from) { HierarchicalTableViewKeyTableDescriptor::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HierarchicalTableViewKeyTableDescriptor* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor"; }

 protected:
  explicit HierarchicalTableViewKeyTableDescriptor(::google::protobuf::Arena* arena);
  HierarchicalTableViewKeyTableDescriptor(::google::protobuf::Arena* arena, const HierarchicalTableViewKeyTableDescriptor& from);
  HierarchicalTableViewKeyTableDescriptor(::google::protobuf::Arena* arena, HierarchicalTableViewKeyTableDescriptor&& from) noexcept
      : HierarchicalTableViewKeyTableDescriptor(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyTableActionColumnFieldNumber = 2,
    kKeyTableIdFieldNumber = 1,
  };
  // optional string key_table_action_column = 2;
  bool has_key_table_action_column() const;
  void clear_key_table_action_column() ;
  const std::string& key_table_action_column() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key_table_action_column(Arg_&& arg, Args_... args);
  std::string* mutable_key_table_action_column();
  PROTOBUF_NODISCARD std::string* release_key_table_action_column();
  void set_allocated_key_table_action_column(std::string* value);

  private:
  const std::string& _internal_key_table_action_column() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_table_action_column(
      const std::string& value);
  std::string* _internal_mutable_key_table_action_column();

  public:
  // .io.deephaven.proto.backplane.grpc.Ticket key_table_id = 1;
  bool has_key_table_id() const;
  void clear_key_table_id() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& key_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_key_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_key_table_id();
  void set_allocated_key_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_key_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_key_table_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_key_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_key_table_id();

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      105, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_HierarchicalTableViewKeyTableDescriptor_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HierarchicalTableViewKeyTableDescriptor& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr key_table_action_column_;
    ::io::deephaven::proto::backplane::grpc::Ticket* key_table_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class HierarchicalTableSourceExportRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest) */ {
 public:
  inline HierarchicalTableSourceExportRequest() : HierarchicalTableSourceExportRequest(nullptr) {}
  ~HierarchicalTableSourceExportRequest() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HierarchicalTableSourceExportRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline HierarchicalTableSourceExportRequest(const HierarchicalTableSourceExportRequest& from) : HierarchicalTableSourceExportRequest(nullptr, from) {}
  inline HierarchicalTableSourceExportRequest(HierarchicalTableSourceExportRequest&& from) noexcept
      : HierarchicalTableSourceExportRequest(nullptr, std::move(from)) {}
  inline HierarchicalTableSourceExportRequest& operator=(const HierarchicalTableSourceExportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HierarchicalTableSourceExportRequest& operator=(HierarchicalTableSourceExportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HierarchicalTableSourceExportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HierarchicalTableSourceExportRequest* internal_default_instance() {
    return reinterpret_cast<const HierarchicalTableSourceExportRequest*>(
        &_HierarchicalTableSourceExportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(HierarchicalTableSourceExportRequest& a, HierarchicalTableSourceExportRequest& b) { a.Swap(&b); }
  inline void Swap(HierarchicalTableSourceExportRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HierarchicalTableSourceExportRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HierarchicalTableSourceExportRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<HierarchicalTableSourceExportRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HierarchicalTableSourceExportRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HierarchicalTableSourceExportRequest& from) { HierarchicalTableSourceExportRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HierarchicalTableSourceExportRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest"; }

 protected:
  explicit HierarchicalTableSourceExportRequest(::google::protobuf::Arena* arena);
  HierarchicalTableSourceExportRequest(::google::protobuf::Arena* arena, const HierarchicalTableSourceExportRequest& from);
  HierarchicalTableSourceExportRequest(::google::protobuf::Arena* arena, HierarchicalTableSourceExportRequest&& from) noexcept
      : HierarchicalTableSourceExportRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResultTableIdFieldNumber = 1,
    kHierarchicalTableIdFieldNumber = 2,
  };
  // .io.deephaven.proto.backplane.grpc.Ticket result_table_id = 1;
  bool has_result_table_id() const;
  void clear_result_table_id() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& result_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_result_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_result_table_id();
  void set_allocated_result_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_result_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_result_table_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_result_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_result_table_id();

  public:
  // .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
  bool has_hierarchical_table_id() const;
  void clear_hierarchical_table_id() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& hierarchical_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_hierarchical_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_hierarchical_table_id();
  void set_allocated_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_hierarchical_table_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_hierarchical_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_hierarchical_table_id();

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_HierarchicalTableSourceExportRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HierarchicalTableSourceExportRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::io::deephaven::proto::backplane::grpc::Ticket* result_table_id_;
    ::io::deephaven::proto::backplane::grpc::Ticket* hierarchical_table_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class HierarchicalTableViewRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest) */ {
 public:
  inline HierarchicalTableViewRequest() : HierarchicalTableViewRequest(nullptr) {}
  ~HierarchicalTableViewRequest() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HierarchicalTableViewRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline HierarchicalTableViewRequest(const HierarchicalTableViewRequest& from) : HierarchicalTableViewRequest(nullptr, from) {}
  inline HierarchicalTableViewRequest(HierarchicalTableViewRequest&& from) noexcept
      : HierarchicalTableViewRequest(nullptr, std::move(from)) {}
  inline HierarchicalTableViewRequest& operator=(const HierarchicalTableViewRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HierarchicalTableViewRequest& operator=(HierarchicalTableViewRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HierarchicalTableViewRequest& default_instance() {
    return *internal_default_instance();
  }
  enum TargetCase {
    kHierarchicalTableId = 2,
    kExistingViewId = 3,
    TARGET_NOT_SET = 0,
  };
  static inline const HierarchicalTableViewRequest* internal_default_instance() {
    return reinterpret_cast<const HierarchicalTableViewRequest*>(
        &_HierarchicalTableViewRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(HierarchicalTableViewRequest& a, HierarchicalTableViewRequest& b) { a.Swap(&b); }
  inline void Swap(HierarchicalTableViewRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HierarchicalTableViewRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HierarchicalTableViewRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<HierarchicalTableViewRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HierarchicalTableViewRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HierarchicalTableViewRequest& from) { HierarchicalTableViewRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HierarchicalTableViewRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest"; }

 protected:
  explicit HierarchicalTableViewRequest(::google::protobuf::Arena* arena);
  HierarchicalTableViewRequest(::google::protobuf::Arena* arena, const HierarchicalTableViewRequest& from);
  HierarchicalTableViewRequest(::google::protobuf::Arena* arena, HierarchicalTableViewRequest&& from) noexcept
      : HierarchicalTableViewRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResultViewIdFieldNumber = 1,
    kExpansionsFieldNumber = 4,
    kHierarchicalTableIdFieldNumber = 2,
    kExistingViewIdFieldNumber = 3,
  };
  // .io.deephaven.proto.backplane.grpc.Ticket result_view_id = 1;
  bool has_result_view_id() const;
  void clear_result_view_id() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& result_view_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_result_view_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_result_view_id();
  void set_allocated_result_view_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_result_view_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_result_view_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_result_view_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_result_view_id();

  public:
  // .io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor expansions = 4;
  bool has_expansions() const;
  void clear_expansions() ;
  const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor& expansions() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* release_expansions();
  ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* mutable_expansions();
  void set_allocated_expansions(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* value);
  void unsafe_arena_set_allocated_expansions(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* value);
  ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* unsafe_arena_release_expansions();

  private:
  const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor& _internal_expansions() const;
  ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* _internal_mutable_expansions();

  public:
  // .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
  bool has_hierarchical_table_id() const;
  private:
  bool _internal_has_hierarchical_table_id() const;

  public:
  void clear_hierarchical_table_id() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& hierarchical_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_hierarchical_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_hierarchical_table_id();
  void set_allocated_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_hierarchical_table_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_hierarchical_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_hierarchical_table_id();

  public:
  // .io.deephaven.proto.backplane.grpc.Ticket existing_view_id = 3;
  bool has_existing_view_id() const;
  private:
  bool _internal_has_existing_view_id() const;

  public:
  void clear_existing_view_id() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& existing_view_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_existing_view_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_existing_view_id();
  void set_allocated_existing_view_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_existing_view_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_existing_view_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_existing_view_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_existing_view_id();

  public:
  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
 private:
  class _Internal;
  void set_has_hierarchical_table_id();
  void set_has_existing_view_id();
  inline bool has_target() const;
  inline void clear_has_target();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 4, 4,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_HierarchicalTableViewRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HierarchicalTableViewRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::io::deephaven::proto::backplane::grpc::Ticket* result_view_id_;
    ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* expansions_;
    union TargetUnion {
      constexpr TargetUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::io::deephaven::proto::backplane::grpc::Ticket* hierarchical_table_id_;
      ::io::deephaven::proto::backplane::grpc::Ticket* existing_view_id_;
    } target_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class HierarchicalTableApplyRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest) */ {
 public:
  inline HierarchicalTableApplyRequest() : HierarchicalTableApplyRequest(nullptr) {}
  ~HierarchicalTableApplyRequest() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HierarchicalTableApplyRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline HierarchicalTableApplyRequest(const HierarchicalTableApplyRequest& from) : HierarchicalTableApplyRequest(nullptr, from) {}
  inline HierarchicalTableApplyRequest(HierarchicalTableApplyRequest&& from) noexcept
      : HierarchicalTableApplyRequest(nullptr, std::move(from)) {}
  inline HierarchicalTableApplyRequest& operator=(const HierarchicalTableApplyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HierarchicalTableApplyRequest& operator=(HierarchicalTableApplyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HierarchicalTableApplyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HierarchicalTableApplyRequest* internal_default_instance() {
    return reinterpret_cast<const HierarchicalTableApplyRequest*>(
        &_HierarchicalTableApplyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(HierarchicalTableApplyRequest& a, HierarchicalTableApplyRequest& b) { a.Swap(&b); }
  inline void Swap(HierarchicalTableApplyRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HierarchicalTableApplyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HierarchicalTableApplyRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<HierarchicalTableApplyRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HierarchicalTableApplyRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HierarchicalTableApplyRequest& from) { HierarchicalTableApplyRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HierarchicalTableApplyRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest"; }

 protected:
  explicit HierarchicalTableApplyRequest(::google::protobuf::Arena* arena);
  HierarchicalTableApplyRequest(::google::protobuf::Arena* arena, const HierarchicalTableApplyRequest& from);
  HierarchicalTableApplyRequest(::google::protobuf::Arena* arena, HierarchicalTableApplyRequest&& from) noexcept
      : HierarchicalTableApplyRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFiltersFieldNumber = 3,
    kSortsFieldNumber = 4,
    kResultHierarchicalTableIdFieldNumber = 1,
    kInputHierarchicalTableIdFieldNumber = 2,
  };
  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
  int filters_size() const;
  private:
  int _internal_filters_size() const;

  public:
  void clear_filters() ;
  ::io::deephaven::proto::backplane::grpc::Condition* mutable_filters(int index);
  ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::Condition>* mutable_filters();

  private:
  const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::Condition>& _internal_filters() const;
  ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::Condition>* _internal_mutable_filters();
  public:
  const ::io::deephaven::proto::backplane::grpc::Condition& filters(int index) const;
  ::io::deephaven::proto::backplane::grpc::Condition* add_filters();
  const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::Condition>& filters() const;
  // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 4;
  int sorts_size() const;
  private:
  int _internal_sorts_size() const;

  public:
  void clear_sorts() ;
  ::io::deephaven::proto::backplane::grpc::SortDescriptor* mutable_sorts(int index);
  ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::SortDescriptor>* mutable_sorts();

  private:
  const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::SortDescriptor>& _internal_sorts() const;
  ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::SortDescriptor>* _internal_mutable_sorts();
  public:
  const ::io::deephaven::proto::backplane::grpc::SortDescriptor& sorts(int index) const;
  ::io::deephaven::proto::backplane::grpc::SortDescriptor* add_sorts();
  const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::SortDescriptor>& sorts() const;
  // .io.deephaven.proto.backplane.grpc.Ticket result_hierarchical_table_id = 1;
  bool has_result_hierarchical_table_id() const;
  void clear_result_hierarchical_table_id() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& result_hierarchical_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_result_hierarchical_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_result_hierarchical_table_id();
  void set_allocated_result_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_result_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_result_hierarchical_table_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_result_hierarchical_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_result_hierarchical_table_id();

  public:
  // .io.deephaven.proto.backplane.grpc.Ticket input_hierarchical_table_id = 2;
  bool has_input_hierarchical_table_id() const;
  void clear_input_hierarchical_table_id() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& input_hierarchical_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_input_hierarchical_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_input_hierarchical_table_id();
  void set_allocated_input_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_input_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_input_hierarchical_table_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_input_hierarchical_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_input_hierarchical_table_id();

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_HierarchicalTableApplyRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HierarchicalTableApplyRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::Condition > filters_;
    ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::SortDescriptor > sorts_;
    ::io::deephaven::proto::backplane::grpc::Ticket* result_hierarchical_table_id_;
    ::io::deephaven::proto::backplane::grpc::Ticket* input_hierarchical_table_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class RollupRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.RollupRequest) */ {
 public:
  inline RollupRequest() : RollupRequest(nullptr) {}
  ~RollupRequest() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RollupRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RollupRequest(const RollupRequest& from) : RollupRequest(nullptr, from) {}
  inline RollupRequest(RollupRequest&& from) noexcept
      : RollupRequest(nullptr, std::move(from)) {}
  inline RollupRequest& operator=(const RollupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollupRequest& operator=(RollupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RollupRequest* internal_default_instance() {
    return reinterpret_cast<const RollupRequest*>(
        &_RollupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(RollupRequest& a, RollupRequest& b) { a.Swap(&b); }
  inline void Swap(RollupRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollupRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollupRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<RollupRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RollupRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RollupRequest& from) { RollupRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RollupRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "io.deephaven.proto.backplane.grpc.RollupRequest"; }

 protected:
  explicit RollupRequest(::google::protobuf::Arena* arena);
  RollupRequest(::google::protobuf::Arena* arena, const RollupRequest& from);
  RollupRequest(::google::protobuf::Arena* arena, RollupRequest&& from) noexcept
      : RollupRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAggregationsFieldNumber = 3,
    kGroupByColumnsFieldNumber = 5,
    kResultRollupTableIdFieldNumber = 1,
    kSourceTableIdFieldNumber = 2,
    kIncludeConstituentsFieldNumber = 4,
  };
  // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 3;
  int aggregations_size() const;
  private:
  int _internal_aggregations_size() const;

  public:
  void clear_aggregations() ;
  ::io::deephaven::proto::backplane::grpc::Aggregation* mutable_aggregations(int index);
  ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::Aggregation>* mutable_aggregations();

  private:
  const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::Aggregation>& _internal_aggregations() const;
  ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::Aggregation>* _internal_mutable_aggregations();
  public:
  const ::io::deephaven::proto::backplane::grpc::Aggregation& aggregations(int index) const;
  ::io::deephaven::proto::backplane::grpc::Aggregation* add_aggregations();
  const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::Aggregation>& aggregations() const;
  // repeated string group_by_columns = 5;
  int group_by_columns_size() const;
  private:
  int _internal_group_by_columns_size() const;

  public:
  void clear_group_by_columns() ;
  const std::string& group_by_columns(int index) const;
  std::string* mutable_group_by_columns(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_by_columns(int index, Arg_&& value, Args_... args);
  std::string* add_group_by_columns();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_group_by_columns(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& group_by_columns() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_group_by_columns();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_group_by_columns() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_group_by_columns();

  public:
  // .io.deephaven.proto.backplane.grpc.Ticket result_rollup_table_id = 1;
  bool has_result_rollup_table_id() const;
  void clear_result_rollup_table_id() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& result_rollup_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_result_rollup_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_result_rollup_table_id();
  void set_allocated_result_rollup_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_result_rollup_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_result_rollup_table_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_result_rollup_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_result_rollup_table_id();

  public:
  // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
  bool has_source_table_id() const;
  void clear_source_table_id() ;
  const ::io::deephaven::proto::backplane::grpc::Ticket& source_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_source_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_source_table_id();
  void set_allocated_source_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  void unsafe_arena_set_allocated_source_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_source_table_id();

  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_source_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_source_table_id();

  public:
  // bool include_constituents = 4;
  void clear_include_constituents() ;
  bool include_constituents() const;
  void set_include_constituents(bool value);

  private:
  bool _internal_include_constituents() const;
  void _internal_set_include_constituents(bool value);

  public:
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.RollupRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      72, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RollupRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RollupRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::Aggregation > aggregations_;
    ::google::protobuf::RepeatedPtrField<std::string> group_by_columns_;
    ::io::deephaven::proto::backplane::grpc::Ticket* result_rollup_table_id_;
    ::io::deephaven::proto::backplane::grpc::Ticket* source_table_id_;
    bool include_constituents_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RollupRequest

// .io.deephaven.proto.backplane.grpc.Ticket result_rollup_table_id = 1;
inline bool RollupRequest::has_result_rollup_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_rollup_table_id_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& RollupRequest::_internal_result_rollup_table_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = _impl_.result_rollup_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& RollupRequest::result_rollup_table_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.RollupRequest.result_rollup_table_id)
  return _internal_result_rollup_table_id();
}
inline void RollupRequest::unsafe_arena_set_allocated_result_rollup_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_rollup_table_id_);
  }
  _impl_.result_rollup_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.RollupRequest.result_rollup_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* RollupRequest::release_result_rollup_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* released = _impl_.result_rollup_table_id_;
  _impl_.result_rollup_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* RollupRequest::unsafe_arena_release_result_rollup_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.RollupRequest.result_rollup_table_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = _impl_.result_rollup_table_id_;
  _impl_.result_rollup_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* RollupRequest::_internal_mutable_result_rollup_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_rollup_table_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
    _impl_.result_rollup_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(p);
  }
  return _impl_.result_rollup_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* RollupRequest::mutable_result_rollup_table_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_result_rollup_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.RollupRequest.result_rollup_table_id)
  return _msg;
}
inline void RollupRequest::set_allocated_result_rollup_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_rollup_table_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_rollup_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.RollupRequest.result_rollup_table_id)
}

// .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
inline bool RollupRequest::has_source_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.source_table_id_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& RollupRequest::_internal_source_table_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = _impl_.source_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& RollupRequest::source_table_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.RollupRequest.source_table_id)
  return _internal_source_table_id();
}
inline void RollupRequest::unsafe_arena_set_allocated_source_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_table_id_);
  }
  _impl_.source_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.RollupRequest.source_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* RollupRequest::release_source_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* released = _impl_.source_table_id_;
  _impl_.source_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* RollupRequest::unsafe_arena_release_source_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.RollupRequest.source_table_id)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = _impl_.source_table_id_;
  _impl_.source_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* RollupRequest::_internal_mutable_source_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.source_table_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
    _impl_.source_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(p);
  }
  return _impl_.source_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* RollupRequest::mutable_source_table_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_source_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.RollupRequest.source_table_id)
  return _msg;
}
inline void RollupRequest::set_allocated_source_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_table_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.source_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.RollupRequest.source_table_id)
}

// repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 3;
inline int RollupRequest::_internal_aggregations_size() const {
  return _internal_aggregations().size();
}
inline int RollupRequest::aggregations_size() const {
  return _internal_aggregations_size();
}
inline ::io::deephaven::proto::backplane::grpc::Aggregation* RollupRequest::mutable_aggregations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.RollupRequest.aggregations)
  return _internal_mutable_aggregations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::Aggregation>* RollupRequest::mutable_aggregations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.RollupRequest.aggregations)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_aggregations();
}
inline const ::io::deephaven::proto::backplane::grpc::Aggregation& RollupRequest::aggregations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.RollupRequest.aggregations)
  return _internal_aggregations().Get(index);
}
inline ::io::deephaven::proto::backplane::grpc::Aggregation* RollupRequest::add_aggregations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::io::deephaven::proto::backplane::grpc::Aggregation* _add = _internal_mutable_aggregations()->Add();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.RollupRequest.aggregations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::Aggregation>& RollupRequest::aggregations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.RollupRequest.aggregations)
  return _internal_aggregations();
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::Aggregation>&
RollupRequest::_internal_aggregations() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.aggregations_;
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::Aggregation>*
RollupRequest::_internal_mutable_aggregations() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.aggregations_;
}

// bool include_constituents = 4;
inline void RollupRequest::clear_include_constituents() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_constituents_ = false;
}
inline bool RollupRequest::include_constituents() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.RollupRequest.include_constituents)
  return _internal_include_constituents();
}
inline void RollupRequest::set_include_constituents(bool value) {
  _internal_set_include_constituents(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.RollupRequest.include_constituents)
}
inline bool RollupRequest::_internal_include_constituents() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_constituents_;
}
inline void RollupRequest::_internal_set_include_constituents(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_constituents_ = value;
}

// repeated string group_by_columns = 5;
inline int RollupRequest::_internal_group_by_columns_size() const {
  return _internal_group_by_columns().size();
}
inline int RollupRequest::group_by_columns_size() const {
  return _internal_group_by_columns_size();
}
inline void RollupRequest::clear_group_by_columns() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_by_columns_.Clear();
}
inline std::string* RollupRequest::add_group_by_columns() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_group_by_columns()->Add();
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
  return _s;
}
inline const std::string& RollupRequest::group_by_columns(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
  return _internal_group_by_columns().Get(index);
}
inline std::string* RollupRequest::mutable_group_by_columns(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
  return _internal_mutable_group_by_columns()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RollupRequest::set_group_by_columns(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_group_by_columns()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
}
template <typename Arg_, typename... Args_>
inline void RollupRequest::add_group_by_columns(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_group_by_columns(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RollupRequest::group_by_columns() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
  return _internal_group_by_columns();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RollupRequest::mutable_group_by_columns() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_group_by_columns();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RollupRequest::_internal_group_by_columns() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_by_columns_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RollupRequest::_internal_mutable_group_by_columns() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.group_by_columns_;
}

// -------------------------------------------------------------------

// RollupResponse

// -------------------------------------------------------------------

// TreeRequest

// .io.deephaven.proto.backplane.grpc.Ticket result_tree_table_id = 1;
inline bool TreeRequest::has_result_tree_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_tree_table_id_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& TreeRequest::_internal_result_tree_table_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = _impl_.result_tree_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& TreeRequest::result_tree_table_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TreeRequest.result_tree_table_id)
  return _internal_result_tree_table_id();
}
inline void TreeRequest::unsafe_arena_set_allocated_result_tree_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_tree_table_id_);
  }
  _impl_.result_tree_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.TreeRequest.result_tree_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* TreeRequest::release_result_tree_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* released = _impl_.result_tree_table_id_;
  _impl_.result_tree_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* TreeRequest::unsafe_arena_release_result_tree_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.TreeRequest.result_tree_table_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = _impl_.result_tree_table_id_;
  _impl_.result_tree_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* TreeRequest::_internal_mutable_result_tree_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_tree_table_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
    _impl_.result_tree_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(p);
  }
  return _impl_.result_tree_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* TreeRequest::mutable_result_tree_table_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_result_tree_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TreeRequest.result_tree_table_id)
  return _msg;
}
inline void TreeRequest::set_allocated_result_tree_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_tree_table_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_tree_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TreeRequest.result_tree_table_id)
}

// .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
inline bool TreeRequest::has_source_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.source_table_id_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& TreeRequest::_internal_source_table_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = _impl_.source_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& TreeRequest::source_table_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TreeRequest.source_table_id)
  return _internal_source_table_id();
}
inline void TreeRequest::unsafe_arena_set_allocated_source_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_table_id_);
  }
  _impl_.source_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.TreeRequest.source_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* TreeRequest::release_source_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* released = _impl_.source_table_id_;
  _impl_.source_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* TreeRequest::unsafe_arena_release_source_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.TreeRequest.source_table_id)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = _impl_.source_table_id_;
  _impl_.source_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* TreeRequest::_internal_mutable_source_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.source_table_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
    _impl_.source_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(p);
  }
  return _impl_.source_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* TreeRequest::mutable_source_table_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_source_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TreeRequest.source_table_id)
  return _msg;
}
inline void TreeRequest::set_allocated_source_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_table_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.source_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TreeRequest.source_table_id)
}

// string identifier_column = 3;
inline void TreeRequest::clear_identifier_column() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identifier_column_.ClearToEmpty();
}
inline const std::string& TreeRequest::identifier_column() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TreeRequest.identifier_column)
  return _internal_identifier_column();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TreeRequest::set_identifier_column(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identifier_column_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TreeRequest.identifier_column)
}
inline std::string* TreeRequest::mutable_identifier_column() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_identifier_column();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TreeRequest.identifier_column)
  return _s;
}
inline const std::string& TreeRequest::_internal_identifier_column() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.identifier_column_.Get();
}
inline void TreeRequest::_internal_set_identifier_column(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identifier_column_.Set(value, GetArena());
}
inline std::string* TreeRequest::_internal_mutable_identifier_column() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.identifier_column_.Mutable( GetArena());
}
inline std::string* TreeRequest::release_identifier_column() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.TreeRequest.identifier_column)
  return _impl_.identifier_column_.Release();
}
inline void TreeRequest::set_allocated_identifier_column(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identifier_column_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_column_.IsDefault()) {
          _impl_.identifier_column_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TreeRequest.identifier_column)
}

// string parent_identifier_column = 4;
inline void TreeRequest::clear_parent_identifier_column() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_identifier_column_.ClearToEmpty();
}
inline const std::string& TreeRequest::parent_identifier_column() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TreeRequest.parent_identifier_column)
  return _internal_parent_identifier_column();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TreeRequest::set_parent_identifier_column(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_identifier_column_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TreeRequest.parent_identifier_column)
}
inline std::string* TreeRequest::mutable_parent_identifier_column() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_parent_identifier_column();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TreeRequest.parent_identifier_column)
  return _s;
}
inline const std::string& TreeRequest::_internal_parent_identifier_column() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parent_identifier_column_.Get();
}
inline void TreeRequest::_internal_set_parent_identifier_column(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_identifier_column_.Set(value, GetArena());
}
inline std::string* TreeRequest::_internal_mutable_parent_identifier_column() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.parent_identifier_column_.Mutable( GetArena());
}
inline std::string* TreeRequest::release_parent_identifier_column() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.TreeRequest.parent_identifier_column)
  return _impl_.parent_identifier_column_.Release();
}
inline void TreeRequest::set_allocated_parent_identifier_column(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parent_identifier_column_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.parent_identifier_column_.IsDefault()) {
          _impl_.parent_identifier_column_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TreeRequest.parent_identifier_column)
}

// bool promote_orphans = 5;
inline void TreeRequest::clear_promote_orphans() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.promote_orphans_ = false;
}
inline bool TreeRequest::promote_orphans() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TreeRequest.promote_orphans)
  return _internal_promote_orphans();
}
inline void TreeRequest::set_promote_orphans(bool value) {
  _internal_set_promote_orphans(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TreeRequest.promote_orphans)
}
inline bool TreeRequest::_internal_promote_orphans() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.promote_orphans_;
}
inline void TreeRequest::_internal_set_promote_orphans(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.promote_orphans_ = value;
}

// -------------------------------------------------------------------

// TreeResponse

// -------------------------------------------------------------------

// HierarchicalTableApplyRequest

// .io.deephaven.proto.backplane.grpc.Ticket result_hierarchical_table_id = 1;
inline bool HierarchicalTableApplyRequest::has_result_hierarchical_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_hierarchical_table_id_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableApplyRequest::_internal_result_hierarchical_table_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = _impl_.result_hierarchical_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableApplyRequest::result_hierarchical_table_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.result_hierarchical_table_id)
  return _internal_result_hierarchical_table_id();
}
inline void HierarchicalTableApplyRequest::unsafe_arena_set_allocated_result_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_hierarchical_table_id_);
  }
  _impl_.result_hierarchical_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.result_hierarchical_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableApplyRequest::release_result_hierarchical_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* released = _impl_.result_hierarchical_table_id_;
  _impl_.result_hierarchical_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableApplyRequest::unsafe_arena_release_result_hierarchical_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.result_hierarchical_table_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = _impl_.result_hierarchical_table_id_;
  _impl_.result_hierarchical_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableApplyRequest::_internal_mutable_result_hierarchical_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_hierarchical_table_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
    _impl_.result_hierarchical_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(p);
  }
  return _impl_.result_hierarchical_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableApplyRequest::mutable_result_hierarchical_table_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_result_hierarchical_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.result_hierarchical_table_id)
  return _msg;
}
inline void HierarchicalTableApplyRequest::set_allocated_result_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_hierarchical_table_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_hierarchical_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.result_hierarchical_table_id)
}

// .io.deephaven.proto.backplane.grpc.Ticket input_hierarchical_table_id = 2;
inline bool HierarchicalTableApplyRequest::has_input_hierarchical_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_hierarchical_table_id_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableApplyRequest::_internal_input_hierarchical_table_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = _impl_.input_hierarchical_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableApplyRequest::input_hierarchical_table_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.input_hierarchical_table_id)
  return _internal_input_hierarchical_table_id();
}
inline void HierarchicalTableApplyRequest::unsafe_arena_set_allocated_input_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.input_hierarchical_table_id_);
  }
  _impl_.input_hierarchical_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.input_hierarchical_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableApplyRequest::release_input_hierarchical_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* released = _impl_.input_hierarchical_table_id_;
  _impl_.input_hierarchical_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableApplyRequest::unsafe_arena_release_input_hierarchical_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.input_hierarchical_table_id)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = _impl_.input_hierarchical_table_id_;
  _impl_.input_hierarchical_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableApplyRequest::_internal_mutable_input_hierarchical_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.input_hierarchical_table_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
    _impl_.input_hierarchical_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(p);
  }
  return _impl_.input_hierarchical_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableApplyRequest::mutable_input_hierarchical_table_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_input_hierarchical_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.input_hierarchical_table_id)
  return _msg;
}
inline void HierarchicalTableApplyRequest::set_allocated_input_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.input_hierarchical_table_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.input_hierarchical_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.input_hierarchical_table_id)
}

// repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
inline int HierarchicalTableApplyRequest::_internal_filters_size() const {
  return _internal_filters().size();
}
inline int HierarchicalTableApplyRequest::filters_size() const {
  return _internal_filters_size();
}
inline ::io::deephaven::proto::backplane::grpc::Condition* HierarchicalTableApplyRequest::mutable_filters(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.filters)
  return _internal_mutable_filters()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::Condition>* HierarchicalTableApplyRequest::mutable_filters()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.filters)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_filters();
}
inline const ::io::deephaven::proto::backplane::grpc::Condition& HierarchicalTableApplyRequest::filters(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.filters)
  return _internal_filters().Get(index);
}
inline ::io::deephaven::proto::backplane::grpc::Condition* HierarchicalTableApplyRequest::add_filters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::io::deephaven::proto::backplane::grpc::Condition* _add = _internal_mutable_filters()->Add();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.filters)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::Condition>& HierarchicalTableApplyRequest::filters() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.filters)
  return _internal_filters();
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::Condition>&
HierarchicalTableApplyRequest::_internal_filters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filters_;
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::Condition>*
HierarchicalTableApplyRequest::_internal_mutable_filters() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.filters_;
}

// repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 4;
inline int HierarchicalTableApplyRequest::_internal_sorts_size() const {
  return _internal_sorts().size();
}
inline int HierarchicalTableApplyRequest::sorts_size() const {
  return _internal_sorts_size();
}
inline ::io::deephaven::proto::backplane::grpc::SortDescriptor* HierarchicalTableApplyRequest::mutable_sorts(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.sorts)
  return _internal_mutable_sorts()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::SortDescriptor>* HierarchicalTableApplyRequest::mutable_sorts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.sorts)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_sorts();
}
inline const ::io::deephaven::proto::backplane::grpc::SortDescriptor& HierarchicalTableApplyRequest::sorts(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.sorts)
  return _internal_sorts().Get(index);
}
inline ::io::deephaven::proto::backplane::grpc::SortDescriptor* HierarchicalTableApplyRequest::add_sorts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::io::deephaven::proto::backplane::grpc::SortDescriptor* _add = _internal_mutable_sorts()->Add();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.sorts)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::SortDescriptor>& HierarchicalTableApplyRequest::sorts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.sorts)
  return _internal_sorts();
}
inline const ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::SortDescriptor>&
HierarchicalTableApplyRequest::_internal_sorts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sorts_;
}
inline ::google::protobuf::RepeatedPtrField<::io::deephaven::proto::backplane::grpc::SortDescriptor>*
HierarchicalTableApplyRequest::_internal_mutable_sorts() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.sorts_;
}

// -------------------------------------------------------------------

// HierarchicalTableApplyResponse

// -------------------------------------------------------------------

// HierarchicalTableDescriptor

// bytes snapshot_schema = 1;
inline void HierarchicalTableDescriptor::clear_snapshot_schema() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snapshot_schema_.ClearToEmpty();
}
inline const std::string& HierarchicalTableDescriptor::snapshot_schema() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor.snapshot_schema)
  return _internal_snapshot_schema();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HierarchicalTableDescriptor::set_snapshot_schema(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snapshot_schema_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor.snapshot_schema)
}
inline std::string* HierarchicalTableDescriptor::mutable_snapshot_schema() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_snapshot_schema();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor.snapshot_schema)
  return _s;
}
inline const std::string& HierarchicalTableDescriptor::_internal_snapshot_schema() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.snapshot_schema_.Get();
}
inline void HierarchicalTableDescriptor::_internal_set_snapshot_schema(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snapshot_schema_.Set(value, GetArena());
}
inline std::string* HierarchicalTableDescriptor::_internal_mutable_snapshot_schema() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.snapshot_schema_.Mutable( GetArena());
}
inline std::string* HierarchicalTableDescriptor::release_snapshot_schema() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor.snapshot_schema)
  return _impl_.snapshot_schema_.Release();
}
inline void HierarchicalTableDescriptor::set_allocated_snapshot_schema(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.snapshot_schema_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.snapshot_schema_.IsDefault()) {
          _impl_.snapshot_schema_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor.snapshot_schema)
}

// bool is_static = 2;
inline void HierarchicalTableDescriptor::clear_is_static() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_static_ = false;
}
inline bool HierarchicalTableDescriptor::is_static() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor.is_static)
  return _internal_is_static();
}
inline void HierarchicalTableDescriptor::set_is_static(bool value) {
  _internal_set_is_static(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor.is_static)
}
inline bool HierarchicalTableDescriptor::_internal_is_static() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_static_;
}
inline void HierarchicalTableDescriptor::_internal_set_is_static(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_static_ = value;
}

// -------------------------------------------------------------------

// HierarchicalTableViewRequest

// .io.deephaven.proto.backplane.grpc.Ticket result_view_id = 1;
inline bool HierarchicalTableViewRequest::has_result_view_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_view_id_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewRequest::_internal_result_view_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = _impl_.result_view_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewRequest::result_view_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.result_view_id)
  return _internal_result_view_id();
}
inline void HierarchicalTableViewRequest::unsafe_arena_set_allocated_result_view_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_view_id_);
  }
  _impl_.result_view_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.result_view_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::release_result_view_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* released = _impl_.result_view_id_;
  _impl_.result_view_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::unsafe_arena_release_result_view_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.result_view_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = _impl_.result_view_id_;
  _impl_.result_view_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::_internal_mutable_result_view_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_view_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
    _impl_.result_view_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(p);
  }
  return _impl_.result_view_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::mutable_result_view_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_result_view_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.result_view_id)
  return _msg;
}
inline void HierarchicalTableViewRequest::set_allocated_result_view_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_view_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_view_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.result_view_id)
}

// .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
inline bool HierarchicalTableViewRequest::has_hierarchical_table_id() const {
  return target_case() == kHierarchicalTableId;
}
inline bool HierarchicalTableViewRequest::_internal_has_hierarchical_table_id() const {
  return target_case() == kHierarchicalTableId;
}
inline void HierarchicalTableViewRequest::set_has_hierarchical_table_id() {
  _impl_._oneof_case_[0] = kHierarchicalTableId;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::release_hierarchical_table_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.hierarchical_table_id)
  if (target_case() == kHierarchicalTableId) {
    clear_has_target();
    auto* temp = _impl_.target_.hierarchical_table_id_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.target_.hierarchical_table_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewRequest::_internal_hierarchical_table_id() const {
  return target_case() == kHierarchicalTableId ? *_impl_.target_.hierarchical_table_id_ : reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewRequest::hierarchical_table_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.hierarchical_table_id)
  return _internal_hierarchical_table_id();
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::unsafe_arena_release_hierarchical_table_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.hierarchical_table_id)
  if (target_case() == kHierarchicalTableId) {
    clear_has_target();
    auto* temp = _impl_.target_.hierarchical_table_id_;
    _impl_.target_.hierarchical_table_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HierarchicalTableViewRequest::unsafe_arena_set_allocated_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_target();
  if (value) {
    set_has_hierarchical_table_id();
    _impl_.target_.hierarchical_table_id_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.hierarchical_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::_internal_mutable_hierarchical_table_id() {
  if (target_case() != kHierarchicalTableId) {
    clear_target();
    set_has_hierarchical_table_id();
    _impl_.target_.hierarchical_table_id_ =
        ::google::protobuf::Message::DefaultConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
  }
  return _impl_.target_.hierarchical_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::mutable_hierarchical_table_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_hierarchical_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.hierarchical_table_id)
  return _msg;
}

// .io.deephaven.proto.backplane.grpc.Ticket existing_view_id = 3;
inline bool HierarchicalTableViewRequest::has_existing_view_id() const {
  return target_case() == kExistingViewId;
}
inline bool HierarchicalTableViewRequest::_internal_has_existing_view_id() const {
  return target_case() == kExistingViewId;
}
inline void HierarchicalTableViewRequest::set_has_existing_view_id() {
  _impl_._oneof_case_[0] = kExistingViewId;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::release_existing_view_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.existing_view_id)
  if (target_case() == kExistingViewId) {
    clear_has_target();
    auto* temp = _impl_.target_.existing_view_id_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.target_.existing_view_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewRequest::_internal_existing_view_id() const {
  return target_case() == kExistingViewId ? *_impl_.target_.existing_view_id_ : reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewRequest::existing_view_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.existing_view_id)
  return _internal_existing_view_id();
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::unsafe_arena_release_existing_view_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.existing_view_id)
  if (target_case() == kExistingViewId) {
    clear_has_target();
    auto* temp = _impl_.target_.existing_view_id_;
    _impl_.target_.existing_view_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HierarchicalTableViewRequest::unsafe_arena_set_allocated_existing_view_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_target();
  if (value) {
    set_has_existing_view_id();
    _impl_.target_.existing_view_id_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.existing_view_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::_internal_mutable_existing_view_id() {
  if (target_case() != kExistingViewId) {
    clear_target();
    set_has_existing_view_id();
    _impl_.target_.existing_view_id_ =
        ::google::protobuf::Message::DefaultConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
  }
  return _impl_.target_.existing_view_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::mutable_existing_view_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_existing_view_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.existing_view_id)
  return _msg;
}

// .io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor expansions = 4;
inline bool HierarchicalTableViewRequest::has_expansions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expansions_ != nullptr);
  return value;
}
inline void HierarchicalTableViewRequest::clear_expansions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.expansions_ != nullptr) _impl_.expansions_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor& HierarchicalTableViewRequest::_internal_expansions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* p = _impl_.expansions_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor&>(::io::deephaven::proto::backplane::grpc::_HierarchicalTableViewKeyTableDescriptor_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor& HierarchicalTableViewRequest::expansions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.expansions)
  return _internal_expansions();
}
inline void HierarchicalTableViewRequest::unsafe_arena_set_allocated_expansions(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expansions_);
  }
  _impl_.expansions_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.expansions)
}
inline ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* HierarchicalTableViewRequest::release_expansions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* released = _impl_.expansions_;
  _impl_.expansions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* HierarchicalTableViewRequest::unsafe_arena_release_expansions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.expansions)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* temp = _impl_.expansions_;
  _impl_.expansions_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* HierarchicalTableViewRequest::_internal_mutable_expansions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.expansions_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor>(GetArena());
    _impl_.expansions_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor*>(p);
  }
  return _impl_.expansions_;
}
inline ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* HierarchicalTableViewRequest::mutable_expansions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* _msg = _internal_mutable_expansions();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.expansions)
  return _msg;
}
inline void HierarchicalTableViewRequest::set_allocated_expansions(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.expansions_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.expansions_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.expansions)
}

inline bool HierarchicalTableViewRequest::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void HierarchicalTableViewRequest::clear_has_target() {
  _impl_._oneof_case_[0] = TARGET_NOT_SET;
}
inline HierarchicalTableViewRequest::TargetCase HierarchicalTableViewRequest::target_case() const {
  return HierarchicalTableViewRequest::TargetCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// HierarchicalTableViewKeyTableDescriptor

// .io.deephaven.proto.backplane.grpc.Ticket key_table_id = 1;
inline bool HierarchicalTableViewKeyTableDescriptor::has_key_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.key_table_id_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewKeyTableDescriptor::_internal_key_table_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = _impl_.key_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewKeyTableDescriptor::key_table_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_id)
  return _internal_key_table_id();
}
inline void HierarchicalTableViewKeyTableDescriptor::unsafe_arena_set_allocated_key_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.key_table_id_);
  }
  _impl_.key_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewKeyTableDescriptor::release_key_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* released = _impl_.key_table_id_;
  _impl_.key_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewKeyTableDescriptor::unsafe_arena_release_key_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_id)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = _impl_.key_table_id_;
  _impl_.key_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewKeyTableDescriptor::_internal_mutable_key_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.key_table_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
    _impl_.key_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(p);
  }
  return _impl_.key_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewKeyTableDescriptor::mutable_key_table_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_key_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_id)
  return _msg;
}
inline void HierarchicalTableViewKeyTableDescriptor::set_allocated_key_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.key_table_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.key_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_id)
}

// optional string key_table_action_column = 2;
inline bool HierarchicalTableViewKeyTableDescriptor::has_key_table_action_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HierarchicalTableViewKeyTableDescriptor::clear_key_table_action_column() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_table_action_column_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HierarchicalTableViewKeyTableDescriptor::key_table_action_column() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_action_column)
  return _internal_key_table_action_column();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HierarchicalTableViewKeyTableDescriptor::set_key_table_action_column(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_table_action_column_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_action_column)
}
inline std::string* HierarchicalTableViewKeyTableDescriptor::mutable_key_table_action_column() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key_table_action_column();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_action_column)
  return _s;
}
inline const std::string& HierarchicalTableViewKeyTableDescriptor::_internal_key_table_action_column() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_table_action_column_.Get();
}
inline void HierarchicalTableViewKeyTableDescriptor::_internal_set_key_table_action_column(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_table_action_column_.Set(value, GetArena());
}
inline std::string* HierarchicalTableViewKeyTableDescriptor::_internal_mutable_key_table_action_column() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_table_action_column_.Mutable( GetArena());
}
inline std::string* HierarchicalTableViewKeyTableDescriptor::release_key_table_action_column() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_action_column)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.key_table_action_column_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_table_action_column_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void HierarchicalTableViewKeyTableDescriptor::set_allocated_key_table_action_column(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_table_action_column_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_table_action_column_.IsDefault()) {
          _impl_.key_table_action_column_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_action_column)
}

// -------------------------------------------------------------------

// HierarchicalTableViewResponse

// -------------------------------------------------------------------

// HierarchicalTableSourceExportRequest

// .io.deephaven.proto.backplane.grpc.Ticket result_table_id = 1;
inline bool HierarchicalTableSourceExportRequest::has_result_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_table_id_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableSourceExportRequest::_internal_result_table_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = _impl_.result_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableSourceExportRequest::result_table_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.result_table_id)
  return _internal_result_table_id();
}
inline void HierarchicalTableSourceExportRequest::unsafe_arena_set_allocated_result_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_table_id_);
  }
  _impl_.result_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.result_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableSourceExportRequest::release_result_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* released = _impl_.result_table_id_;
  _impl_.result_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableSourceExportRequest::unsafe_arena_release_result_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.result_table_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = _impl_.result_table_id_;
  _impl_.result_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableSourceExportRequest::_internal_mutable_result_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_table_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
    _impl_.result_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(p);
  }
  return _impl_.result_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableSourceExportRequest::mutable_result_table_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_result_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.result_table_id)
  return _msg;
}
inline void HierarchicalTableSourceExportRequest::set_allocated_result_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_table_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.result_table_id)
}

// .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
inline bool HierarchicalTableSourceExportRequest::has_hierarchical_table_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hierarchical_table_id_ != nullptr);
  return value;
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableSourceExportRequest::_internal_hierarchical_table_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = _impl_.hierarchical_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableSourceExportRequest::hierarchical_table_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.hierarchical_table_id)
  return _internal_hierarchical_table_id();
}
inline void HierarchicalTableSourceExportRequest::unsafe_arena_set_allocated_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hierarchical_table_id_);
  }
  _impl_.hierarchical_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.hierarchical_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableSourceExportRequest::release_hierarchical_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* released = _impl_.hierarchical_table_id_;
  _impl_.hierarchical_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableSourceExportRequest::unsafe_arena_release_hierarchical_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.hierarchical_table_id)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = _impl_.hierarchical_table_id_;
  _impl_.hierarchical_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableSourceExportRequest::_internal_mutable_hierarchical_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hierarchical_table_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(GetArena());
    _impl_.hierarchical_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(p);
  }
  return _impl_.hierarchical_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableSourceExportRequest::mutable_hierarchical_table_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_hierarchical_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.hierarchical_table_id)
  return _msg;
}
inline void HierarchicalTableSourceExportRequest::set_allocated_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hierarchical_table_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.hierarchical_table_id_ = reinterpret_cast<::io::deephaven::proto::backplane::grpc::Ticket*>(value);
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.hierarchical_table_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fhierarchicaltable_2eproto_2epb_2eh
