// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deephaven/proto/hierarchicaltable.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fhierarchicaltable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fhierarchicaltable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "deephaven/proto/table.pb.h"
#include "deephaven/proto/ticket.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_deephaven_2fproto_2fhierarchicaltable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_deephaven_2fproto_2fhierarchicaltable_2eproto;
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
class HierarchicalTableApplyRequest;
struct HierarchicalTableApplyRequestDefaultTypeInternal;
extern HierarchicalTableApplyRequestDefaultTypeInternal _HierarchicalTableApplyRequest_default_instance_;
class HierarchicalTableApplyResponse;
struct HierarchicalTableApplyResponseDefaultTypeInternal;
extern HierarchicalTableApplyResponseDefaultTypeInternal _HierarchicalTableApplyResponse_default_instance_;
class HierarchicalTableDescriptor;
struct HierarchicalTableDescriptorDefaultTypeInternal;
extern HierarchicalTableDescriptorDefaultTypeInternal _HierarchicalTableDescriptor_default_instance_;
class HierarchicalTableSourceExportRequest;
struct HierarchicalTableSourceExportRequestDefaultTypeInternal;
extern HierarchicalTableSourceExportRequestDefaultTypeInternal _HierarchicalTableSourceExportRequest_default_instance_;
class HierarchicalTableViewKeyTableDescriptor;
struct HierarchicalTableViewKeyTableDescriptorDefaultTypeInternal;
extern HierarchicalTableViewKeyTableDescriptorDefaultTypeInternal _HierarchicalTableViewKeyTableDescriptor_default_instance_;
class HierarchicalTableViewRequest;
struct HierarchicalTableViewRequestDefaultTypeInternal;
extern HierarchicalTableViewRequestDefaultTypeInternal _HierarchicalTableViewRequest_default_instance_;
class HierarchicalTableViewResponse;
struct HierarchicalTableViewResponseDefaultTypeInternal;
extern HierarchicalTableViewResponseDefaultTypeInternal _HierarchicalTableViewResponse_default_instance_;
class RollupRequest;
struct RollupRequestDefaultTypeInternal;
extern RollupRequestDefaultTypeInternal _RollupRequest_default_instance_;
class RollupResponse;
struct RollupResponseDefaultTypeInternal;
extern RollupResponseDefaultTypeInternal _RollupResponse_default_instance_;
class TreeRequest;
struct TreeRequestDefaultTypeInternal;
extern TreeRequestDefaultTypeInternal _TreeRequest_default_instance_;
class TreeResponse;
struct TreeResponseDefaultTypeInternal;
extern TreeResponseDefaultTypeInternal _TreeResponse_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::HierarchicalTableApplyResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::HierarchicalTableDescriptor* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::HierarchicalTableDescriptor>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::HierarchicalTableSourceExportRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::HierarchicalTableViewRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::HierarchicalTableViewResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::RollupRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::RollupRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::RollupResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::RollupResponse>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::TreeRequest* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TreeRequest>(Arena*);
template<> ::io::deephaven::proto::backplane::grpc::TreeResponse* Arena::CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::TreeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

// ===================================================================

class RollupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.RollupRequest) */ {
 public:
  inline RollupRequest() : RollupRequest(nullptr) {}
  ~RollupRequest() override;
  explicit PROTOBUF_CONSTEXPR RollupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RollupRequest(const RollupRequest& from);
  RollupRequest(RollupRequest&& from) noexcept
    : RollupRequest() {
    *this = ::std::move(from);
  }

  inline RollupRequest& operator=(const RollupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollupRequest& operator=(RollupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RollupRequest* internal_default_instance() {
    return reinterpret_cast<const RollupRequest*>(
               &_RollupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RollupRequest& a, RollupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RollupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RollupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RollupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RollupRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RollupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.RollupRequest";
  }
  protected:
  explicit RollupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAggregationsFieldNumber = 3,
    kGroupByColumnsFieldNumber = 5,
    kResultRollupTableIdFieldNumber = 1,
    kSourceTableIdFieldNumber = 2,
    kIncludeConstituentsFieldNumber = 4,
  };
  // repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 3;
  int aggregations_size() const;
  private:
  int _internal_aggregations_size() const;
  public:
  void clear_aggregations();
  ::io::deephaven::proto::backplane::grpc::Aggregation* mutable_aggregations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::Aggregation >*
      mutable_aggregations();
  private:
  const ::io::deephaven::proto::backplane::grpc::Aggregation& _internal_aggregations(int index) const;
  ::io::deephaven::proto::backplane::grpc::Aggregation* _internal_add_aggregations();
  public:
  const ::io::deephaven::proto::backplane::grpc::Aggregation& aggregations(int index) const;
  ::io::deephaven::proto::backplane::grpc::Aggregation* add_aggregations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::Aggregation >&
      aggregations() const;

  // repeated string group_by_columns = 5;
  int group_by_columns_size() const;
  private:
  int _internal_group_by_columns_size() const;
  public:
  void clear_group_by_columns();
  const std::string& group_by_columns(int index) const;
  std::string* mutable_group_by_columns(int index);
  void set_group_by_columns(int index, const std::string& value);
  void set_group_by_columns(int index, std::string&& value);
  void set_group_by_columns(int index, const char* value);
  void set_group_by_columns(int index, const char* value, size_t size);
  std::string* add_group_by_columns();
  void add_group_by_columns(const std::string& value);
  void add_group_by_columns(std::string&& value);
  void add_group_by_columns(const char* value);
  void add_group_by_columns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& group_by_columns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_group_by_columns();
  private:
  const std::string& _internal_group_by_columns(int index) const;
  std::string* _internal_add_group_by_columns();
  public:

  // .io.deephaven.proto.backplane.grpc.Ticket result_rollup_table_id = 1;
  bool has_result_rollup_table_id() const;
  private:
  bool _internal_has_result_rollup_table_id() const;
  public:
  void clear_result_rollup_table_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& result_rollup_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_result_rollup_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_result_rollup_table_id();
  void set_allocated_result_rollup_table_id(::io::deephaven::proto::backplane::grpc::Ticket* result_rollup_table_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_result_rollup_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_result_rollup_table_id();
  public:
  void unsafe_arena_set_allocated_result_rollup_table_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* result_rollup_table_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_result_rollup_table_id();

  // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
  bool has_source_table_id() const;
  private:
  bool _internal_has_source_table_id() const;
  public:
  void clear_source_table_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& source_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_source_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_source_table_id();
  void set_allocated_source_table_id(::io::deephaven::proto::backplane::grpc::Ticket* source_table_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_source_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_source_table_id();
  public:
  void unsafe_arena_set_allocated_source_table_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* source_table_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_source_table_id();

  // bool include_constituents = 4;
  void clear_include_constituents();
  bool include_constituents() const;
  void set_include_constituents(bool value);
  private:
  bool _internal_include_constituents() const;
  void _internal_set_include_constituents(bool value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.RollupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::Aggregation > aggregations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> group_by_columns_;
  ::io::deephaven::proto::backplane::grpc::Ticket* result_rollup_table_id_;
  ::io::deephaven::proto::backplane::grpc::Ticket* source_table_id_;
  bool include_constituents_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class RollupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.RollupResponse) */ {
 public:
  inline RollupResponse() : RollupResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RollupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RollupResponse(const RollupResponse& from);
  RollupResponse(RollupResponse&& from) noexcept
    : RollupResponse() {
    *this = ::std::move(from);
  }

  inline RollupResponse& operator=(const RollupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollupResponse& operator=(RollupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RollupResponse* internal_default_instance() {
    return reinterpret_cast<const RollupResponse*>(
               &_RollupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RollupResponse& a, RollupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RollupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RollupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RollupResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RollupResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.RollupResponse";
  }
  protected:
  explicit RollupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.RollupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class TreeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.TreeRequest) */ {
 public:
  inline TreeRequest() : TreeRequest(nullptr) {}
  ~TreeRequest() override;
  explicit PROTOBUF_CONSTEXPR TreeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TreeRequest(const TreeRequest& from);
  TreeRequest(TreeRequest&& from) noexcept
    : TreeRequest() {
    *this = ::std::move(from);
  }

  inline TreeRequest& operator=(const TreeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TreeRequest& operator=(TreeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TreeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TreeRequest* internal_default_instance() {
    return reinterpret_cast<const TreeRequest*>(
               &_TreeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TreeRequest& a, TreeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TreeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TreeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TreeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TreeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TreeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TreeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.TreeRequest";
  }
  protected:
  explicit TreeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierColumnFieldNumber = 3,
    kParentIdentifierColumnFieldNumber = 4,
    kResultTreeTableIdFieldNumber = 1,
    kSourceTableIdFieldNumber = 2,
    kPromoteOrphansFieldNumber = 5,
  };
  // string identifier_column = 3;
  void clear_identifier_column();
  const std::string& identifier_column() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier_column(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier_column();
  PROTOBUF_NODISCARD std::string* release_identifier_column();
  void set_allocated_identifier_column(std::string* identifier_column);
  private:
  const std::string& _internal_identifier_column() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier_column(const std::string& value);
  std::string* _internal_mutable_identifier_column();
  public:

  // string parent_identifier_column = 4;
  void clear_parent_identifier_column();
  const std::string& parent_identifier_column() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent_identifier_column(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent_identifier_column();
  PROTOBUF_NODISCARD std::string* release_parent_identifier_column();
  void set_allocated_parent_identifier_column(std::string* parent_identifier_column);
  private:
  const std::string& _internal_parent_identifier_column() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_identifier_column(const std::string& value);
  std::string* _internal_mutable_parent_identifier_column();
  public:

  // .io.deephaven.proto.backplane.grpc.Ticket result_tree_table_id = 1;
  bool has_result_tree_table_id() const;
  private:
  bool _internal_has_result_tree_table_id() const;
  public:
  void clear_result_tree_table_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& result_tree_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_result_tree_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_result_tree_table_id();
  void set_allocated_result_tree_table_id(::io::deephaven::proto::backplane::grpc::Ticket* result_tree_table_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_result_tree_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_result_tree_table_id();
  public:
  void unsafe_arena_set_allocated_result_tree_table_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* result_tree_table_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_result_tree_table_id();

  // .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
  bool has_source_table_id() const;
  private:
  bool _internal_has_source_table_id() const;
  public:
  void clear_source_table_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& source_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_source_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_source_table_id();
  void set_allocated_source_table_id(::io::deephaven::proto::backplane::grpc::Ticket* source_table_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_source_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_source_table_id();
  public:
  void unsafe_arena_set_allocated_source_table_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* source_table_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_source_table_id();

  // bool promote_orphans = 5;
  void clear_promote_orphans();
  bool promote_orphans() const;
  void set_promote_orphans(bool value);
  private:
  bool _internal_promote_orphans() const;
  void _internal_set_promote_orphans(bool value);
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.TreeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_column_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_identifier_column_;
  ::io::deephaven::proto::backplane::grpc::Ticket* result_tree_table_id_;
  ::io::deephaven::proto::backplane::grpc::Ticket* source_table_id_;
  bool promote_orphans_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class TreeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.TreeResponse) */ {
 public:
  inline TreeResponse() : TreeResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TreeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TreeResponse(const TreeResponse& from);
  TreeResponse(TreeResponse&& from) noexcept
    : TreeResponse() {
    *this = ::std::move(from);
  }

  inline TreeResponse& operator=(const TreeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TreeResponse& operator=(TreeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TreeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TreeResponse* internal_default_instance() {
    return reinterpret_cast<const TreeResponse*>(
               &_TreeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TreeResponse& a, TreeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TreeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TreeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TreeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TreeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TreeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TreeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.TreeResponse";
  }
  protected:
  explicit TreeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.TreeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class HierarchicalTableApplyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest) */ {
 public:
  inline HierarchicalTableApplyRequest() : HierarchicalTableApplyRequest(nullptr) {}
  ~HierarchicalTableApplyRequest() override;
  explicit PROTOBUF_CONSTEXPR HierarchicalTableApplyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HierarchicalTableApplyRequest(const HierarchicalTableApplyRequest& from);
  HierarchicalTableApplyRequest(HierarchicalTableApplyRequest&& from) noexcept
    : HierarchicalTableApplyRequest() {
    *this = ::std::move(from);
  }

  inline HierarchicalTableApplyRequest& operator=(const HierarchicalTableApplyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HierarchicalTableApplyRequest& operator=(HierarchicalTableApplyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HierarchicalTableApplyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HierarchicalTableApplyRequest* internal_default_instance() {
    return reinterpret_cast<const HierarchicalTableApplyRequest*>(
               &_HierarchicalTableApplyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HierarchicalTableApplyRequest& a, HierarchicalTableApplyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HierarchicalTableApplyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HierarchicalTableApplyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HierarchicalTableApplyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HierarchicalTableApplyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HierarchicalTableApplyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HierarchicalTableApplyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HierarchicalTableApplyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest";
  }
  protected:
  explicit HierarchicalTableApplyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 3,
    kSortsFieldNumber = 4,
    kResultHierarchicalTableIdFieldNumber = 1,
    kInputHierarchicalTableIdFieldNumber = 2,
  };
  // repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  ::io::deephaven::proto::backplane::grpc::Condition* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::Condition >*
      mutable_filters();
  private:
  const ::io::deephaven::proto::backplane::grpc::Condition& _internal_filters(int index) const;
  ::io::deephaven::proto::backplane::grpc::Condition* _internal_add_filters();
  public:
  const ::io::deephaven::proto::backplane::grpc::Condition& filters(int index) const;
  ::io::deephaven::proto::backplane::grpc::Condition* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::Condition >&
      filters() const;

  // repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 4;
  int sorts_size() const;
  private:
  int _internal_sorts_size() const;
  public:
  void clear_sorts();
  ::io::deephaven::proto::backplane::grpc::SortDescriptor* mutable_sorts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::SortDescriptor >*
      mutable_sorts();
  private:
  const ::io::deephaven::proto::backplane::grpc::SortDescriptor& _internal_sorts(int index) const;
  ::io::deephaven::proto::backplane::grpc::SortDescriptor* _internal_add_sorts();
  public:
  const ::io::deephaven::proto::backplane::grpc::SortDescriptor& sorts(int index) const;
  ::io::deephaven::proto::backplane::grpc::SortDescriptor* add_sorts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::SortDescriptor >&
      sorts() const;

  // .io.deephaven.proto.backplane.grpc.Ticket result_hierarchical_table_id = 1;
  bool has_result_hierarchical_table_id() const;
  private:
  bool _internal_has_result_hierarchical_table_id() const;
  public:
  void clear_result_hierarchical_table_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& result_hierarchical_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_result_hierarchical_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_result_hierarchical_table_id();
  void set_allocated_result_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* result_hierarchical_table_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_result_hierarchical_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_result_hierarchical_table_id();
  public:
  void unsafe_arena_set_allocated_result_hierarchical_table_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* result_hierarchical_table_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_result_hierarchical_table_id();

  // .io.deephaven.proto.backplane.grpc.Ticket input_hierarchical_table_id = 2;
  bool has_input_hierarchical_table_id() const;
  private:
  bool _internal_has_input_hierarchical_table_id() const;
  public:
  void clear_input_hierarchical_table_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& input_hierarchical_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_input_hierarchical_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_input_hierarchical_table_id();
  void set_allocated_input_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* input_hierarchical_table_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_input_hierarchical_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_input_hierarchical_table_id();
  public:
  void unsafe_arena_set_allocated_input_hierarchical_table_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* input_hierarchical_table_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_input_hierarchical_table_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::Condition > filters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::SortDescriptor > sorts_;
  ::io::deephaven::proto::backplane::grpc::Ticket* result_hierarchical_table_id_;
  ::io::deephaven::proto::backplane::grpc::Ticket* input_hierarchical_table_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class HierarchicalTableApplyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyResponse) */ {
 public:
  inline HierarchicalTableApplyResponse() : HierarchicalTableApplyResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR HierarchicalTableApplyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HierarchicalTableApplyResponse(const HierarchicalTableApplyResponse& from);
  HierarchicalTableApplyResponse(HierarchicalTableApplyResponse&& from) noexcept
    : HierarchicalTableApplyResponse() {
    *this = ::std::move(from);
  }

  inline HierarchicalTableApplyResponse& operator=(const HierarchicalTableApplyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HierarchicalTableApplyResponse& operator=(HierarchicalTableApplyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HierarchicalTableApplyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HierarchicalTableApplyResponse* internal_default_instance() {
    return reinterpret_cast<const HierarchicalTableApplyResponse*>(
               &_HierarchicalTableApplyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HierarchicalTableApplyResponse& a, HierarchicalTableApplyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HierarchicalTableApplyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HierarchicalTableApplyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HierarchicalTableApplyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HierarchicalTableApplyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HierarchicalTableApplyResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HierarchicalTableApplyResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.HierarchicalTableApplyResponse";
  }
  protected:
  explicit HierarchicalTableApplyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class HierarchicalTableDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor) */ {
 public:
  inline HierarchicalTableDescriptor() : HierarchicalTableDescriptor(nullptr) {}
  ~HierarchicalTableDescriptor() override;
  explicit PROTOBUF_CONSTEXPR HierarchicalTableDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HierarchicalTableDescriptor(const HierarchicalTableDescriptor& from);
  HierarchicalTableDescriptor(HierarchicalTableDescriptor&& from) noexcept
    : HierarchicalTableDescriptor() {
    *this = ::std::move(from);
  }

  inline HierarchicalTableDescriptor& operator=(const HierarchicalTableDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline HierarchicalTableDescriptor& operator=(HierarchicalTableDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HierarchicalTableDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const HierarchicalTableDescriptor* internal_default_instance() {
    return reinterpret_cast<const HierarchicalTableDescriptor*>(
               &_HierarchicalTableDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HierarchicalTableDescriptor& a, HierarchicalTableDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(HierarchicalTableDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HierarchicalTableDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HierarchicalTableDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HierarchicalTableDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HierarchicalTableDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HierarchicalTableDescriptor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HierarchicalTableDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor";
  }
  protected:
  explicit HierarchicalTableDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotSchemaFieldNumber = 1,
  };
  // bytes snapshot_schema = 1;
  void clear_snapshot_schema();
  const std::string& snapshot_schema() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshot_schema(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshot_schema();
  PROTOBUF_NODISCARD std::string* release_snapshot_schema();
  void set_allocated_snapshot_schema(std::string* snapshot_schema);
  private:
  const std::string& _internal_snapshot_schema() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshot_schema(const std::string& value);
  std::string* _internal_mutable_snapshot_schema();
  public:

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_schema_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class HierarchicalTableViewRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest) */ {
 public:
  inline HierarchicalTableViewRequest() : HierarchicalTableViewRequest(nullptr) {}
  ~HierarchicalTableViewRequest() override;
  explicit PROTOBUF_CONSTEXPR HierarchicalTableViewRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HierarchicalTableViewRequest(const HierarchicalTableViewRequest& from);
  HierarchicalTableViewRequest(HierarchicalTableViewRequest&& from) noexcept
    : HierarchicalTableViewRequest() {
    *this = ::std::move(from);
  }

  inline HierarchicalTableViewRequest& operator=(const HierarchicalTableViewRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HierarchicalTableViewRequest& operator=(HierarchicalTableViewRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HierarchicalTableViewRequest& default_instance() {
    return *internal_default_instance();
  }
  enum TargetCase {
    kHierarchicalTableId = 2,
    kExistingViewId = 3,
    TARGET_NOT_SET = 0,
  };

  static inline const HierarchicalTableViewRequest* internal_default_instance() {
    return reinterpret_cast<const HierarchicalTableViewRequest*>(
               &_HierarchicalTableViewRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HierarchicalTableViewRequest& a, HierarchicalTableViewRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HierarchicalTableViewRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HierarchicalTableViewRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HierarchicalTableViewRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HierarchicalTableViewRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HierarchicalTableViewRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HierarchicalTableViewRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HierarchicalTableViewRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest";
  }
  protected:
  explicit HierarchicalTableViewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultViewIdFieldNumber = 1,
    kExpansionsFieldNumber = 4,
    kHierarchicalTableIdFieldNumber = 2,
    kExistingViewIdFieldNumber = 3,
  };
  // .io.deephaven.proto.backplane.grpc.Ticket result_view_id = 1;
  bool has_result_view_id() const;
  private:
  bool _internal_has_result_view_id() const;
  public:
  void clear_result_view_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& result_view_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_result_view_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_result_view_id();
  void set_allocated_result_view_id(::io::deephaven::proto::backplane::grpc::Ticket* result_view_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_result_view_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_result_view_id();
  public:
  void unsafe_arena_set_allocated_result_view_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* result_view_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_result_view_id();

  // .io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor expansions = 4;
  bool has_expansions() const;
  private:
  bool _internal_has_expansions() const;
  public:
  void clear_expansions();
  const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor& expansions() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* release_expansions();
  ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* mutable_expansions();
  void set_allocated_expansions(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* expansions);
  private:
  const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor& _internal_expansions() const;
  ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* _internal_mutable_expansions();
  public:
  void unsafe_arena_set_allocated_expansions(
      ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* expansions);
  ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* unsafe_arena_release_expansions();

  // .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
  bool has_hierarchical_table_id() const;
  private:
  bool _internal_has_hierarchical_table_id() const;
  public:
  void clear_hierarchical_table_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& hierarchical_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_hierarchical_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_hierarchical_table_id();
  void set_allocated_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* hierarchical_table_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_hierarchical_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_hierarchical_table_id();
  public:
  void unsafe_arena_set_allocated_hierarchical_table_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* hierarchical_table_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_hierarchical_table_id();

  // .io.deephaven.proto.backplane.grpc.Ticket existing_view_id = 3;
  bool has_existing_view_id() const;
  private:
  bool _internal_has_existing_view_id() const;
  public:
  void clear_existing_view_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& existing_view_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_existing_view_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_existing_view_id();
  void set_allocated_existing_view_id(::io::deephaven::proto::backplane::grpc::Ticket* existing_view_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_existing_view_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_existing_view_id();
  public:
  void unsafe_arena_set_allocated_existing_view_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* existing_view_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_existing_view_id();

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest)
 private:
  class _Internal;
  void set_has_hierarchical_table_id();
  void set_has_existing_view_id();

  inline bool has_target() const;
  inline void clear_has_target();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::io::deephaven::proto::backplane::grpc::Ticket* result_view_id_;
  ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* expansions_;
  union TargetUnion {
    constexpr TargetUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::io::deephaven::proto::backplane::grpc::Ticket* hierarchical_table_id_;
    ::io::deephaven::proto::backplane::grpc::Ticket* existing_view_id_;
  } target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class HierarchicalTableViewKeyTableDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor) */ {
 public:
  inline HierarchicalTableViewKeyTableDescriptor() : HierarchicalTableViewKeyTableDescriptor(nullptr) {}
  ~HierarchicalTableViewKeyTableDescriptor() override;
  explicit PROTOBUF_CONSTEXPR HierarchicalTableViewKeyTableDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HierarchicalTableViewKeyTableDescriptor(const HierarchicalTableViewKeyTableDescriptor& from);
  HierarchicalTableViewKeyTableDescriptor(HierarchicalTableViewKeyTableDescriptor&& from) noexcept
    : HierarchicalTableViewKeyTableDescriptor() {
    *this = ::std::move(from);
  }

  inline HierarchicalTableViewKeyTableDescriptor& operator=(const HierarchicalTableViewKeyTableDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline HierarchicalTableViewKeyTableDescriptor& operator=(HierarchicalTableViewKeyTableDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HierarchicalTableViewKeyTableDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const HierarchicalTableViewKeyTableDescriptor* internal_default_instance() {
    return reinterpret_cast<const HierarchicalTableViewKeyTableDescriptor*>(
               &_HierarchicalTableViewKeyTableDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(HierarchicalTableViewKeyTableDescriptor& a, HierarchicalTableViewKeyTableDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(HierarchicalTableViewKeyTableDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HierarchicalTableViewKeyTableDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HierarchicalTableViewKeyTableDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HierarchicalTableViewKeyTableDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HierarchicalTableViewKeyTableDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HierarchicalTableViewKeyTableDescriptor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HierarchicalTableViewKeyTableDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor";
  }
  protected:
  explicit HierarchicalTableViewKeyTableDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyTableActionColumnFieldNumber = 2,
    kKeyTableIdFieldNumber = 1,
  };
  // optional string key_table_action_column = 2;
  bool has_key_table_action_column() const;
  private:
  bool _internal_has_key_table_action_column() const;
  public:
  void clear_key_table_action_column();
  const std::string& key_table_action_column() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_table_action_column(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_table_action_column();
  PROTOBUF_NODISCARD std::string* release_key_table_action_column();
  void set_allocated_key_table_action_column(std::string* key_table_action_column);
  private:
  const std::string& _internal_key_table_action_column() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_table_action_column(const std::string& value);
  std::string* _internal_mutable_key_table_action_column();
  public:

  // .io.deephaven.proto.backplane.grpc.Ticket key_table_id = 1;
  bool has_key_table_id() const;
  private:
  bool _internal_has_key_table_id() const;
  public:
  void clear_key_table_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& key_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_key_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_key_table_id();
  void set_allocated_key_table_id(::io::deephaven::proto::backplane::grpc::Ticket* key_table_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_key_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_key_table_id();
  public:
  void unsafe_arena_set_allocated_key_table_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* key_table_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_key_table_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_table_action_column_;
  ::io::deephaven::proto::backplane::grpc::Ticket* key_table_id_;
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class HierarchicalTableViewResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HierarchicalTableViewResponse) */ {
 public:
  inline HierarchicalTableViewResponse() : HierarchicalTableViewResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR HierarchicalTableViewResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HierarchicalTableViewResponse(const HierarchicalTableViewResponse& from);
  HierarchicalTableViewResponse(HierarchicalTableViewResponse&& from) noexcept
    : HierarchicalTableViewResponse() {
    *this = ::std::move(from);
  }

  inline HierarchicalTableViewResponse& operator=(const HierarchicalTableViewResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HierarchicalTableViewResponse& operator=(HierarchicalTableViewResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HierarchicalTableViewResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HierarchicalTableViewResponse* internal_default_instance() {
    return reinterpret_cast<const HierarchicalTableViewResponse*>(
               &_HierarchicalTableViewResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(HierarchicalTableViewResponse& a, HierarchicalTableViewResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HierarchicalTableViewResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HierarchicalTableViewResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HierarchicalTableViewResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HierarchicalTableViewResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HierarchicalTableViewResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HierarchicalTableViewResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.HierarchicalTableViewResponse";
  }
  protected:
  explicit HierarchicalTableViewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HierarchicalTableViewResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// -------------------------------------------------------------------

class HierarchicalTableSourceExportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest) */ {
 public:
  inline HierarchicalTableSourceExportRequest() : HierarchicalTableSourceExportRequest(nullptr) {}
  ~HierarchicalTableSourceExportRequest() override;
  explicit PROTOBUF_CONSTEXPR HierarchicalTableSourceExportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HierarchicalTableSourceExportRequest(const HierarchicalTableSourceExportRequest& from);
  HierarchicalTableSourceExportRequest(HierarchicalTableSourceExportRequest&& from) noexcept
    : HierarchicalTableSourceExportRequest() {
    *this = ::std::move(from);
  }

  inline HierarchicalTableSourceExportRequest& operator=(const HierarchicalTableSourceExportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HierarchicalTableSourceExportRequest& operator=(HierarchicalTableSourceExportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HierarchicalTableSourceExportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HierarchicalTableSourceExportRequest* internal_default_instance() {
    return reinterpret_cast<const HierarchicalTableSourceExportRequest*>(
               &_HierarchicalTableSourceExportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(HierarchicalTableSourceExportRequest& a, HierarchicalTableSourceExportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HierarchicalTableSourceExportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HierarchicalTableSourceExportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HierarchicalTableSourceExportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HierarchicalTableSourceExportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HierarchicalTableSourceExportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HierarchicalTableSourceExportRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HierarchicalTableSourceExportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest";
  }
  protected:
  explicit HierarchicalTableSourceExportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultTableIdFieldNumber = 1,
    kHierarchicalTableIdFieldNumber = 2,
  };
  // .io.deephaven.proto.backplane.grpc.Ticket result_table_id = 1;
  bool has_result_table_id() const;
  private:
  bool _internal_has_result_table_id() const;
  public:
  void clear_result_table_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& result_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_result_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_result_table_id();
  void set_allocated_result_table_id(::io::deephaven::proto::backplane::grpc::Ticket* result_table_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_result_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_result_table_id();
  public:
  void unsafe_arena_set_allocated_result_table_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* result_table_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_result_table_id();

  // .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
  bool has_hierarchical_table_id() const;
  private:
  bool _internal_has_hierarchical_table_id() const;
  public:
  void clear_hierarchical_table_id();
  const ::io::deephaven::proto::backplane::grpc::Ticket& hierarchical_table_id() const;
  PROTOBUF_NODISCARD ::io::deephaven::proto::backplane::grpc::Ticket* release_hierarchical_table_id();
  ::io::deephaven::proto::backplane::grpc::Ticket* mutable_hierarchical_table_id();
  void set_allocated_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* hierarchical_table_id);
  private:
  const ::io::deephaven::proto::backplane::grpc::Ticket& _internal_hierarchical_table_id() const;
  ::io::deephaven::proto::backplane::grpc::Ticket* _internal_mutable_hierarchical_table_id();
  public:
  void unsafe_arena_set_allocated_hierarchical_table_id(
      ::io::deephaven::proto::backplane::grpc::Ticket* hierarchical_table_id);
  ::io::deephaven::proto::backplane::grpc::Ticket* unsafe_arena_release_hierarchical_table_id();

  // @@protoc_insertion_point(class_scope:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::io::deephaven::proto::backplane::grpc::Ticket* result_table_id_;
  ::io::deephaven::proto::backplane::grpc::Ticket* hierarchical_table_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deephaven_2fproto_2fhierarchicaltable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RollupRequest

// .io.deephaven.proto.backplane.grpc.Ticket result_rollup_table_id = 1;
inline bool RollupRequest::_internal_has_result_rollup_table_id() const {
  return this != internal_default_instance() && result_rollup_table_id_ != nullptr;
}
inline bool RollupRequest::has_result_rollup_table_id() const {
  return _internal_has_result_rollup_table_id();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& RollupRequest::_internal_result_rollup_table_id() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = result_rollup_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& RollupRequest::result_rollup_table_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.RollupRequest.result_rollup_table_id)
  return _internal_result_rollup_table_id();
}
inline void RollupRequest::unsafe_arena_set_allocated_result_rollup_table_id(
    ::io::deephaven::proto::backplane::grpc::Ticket* result_rollup_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_rollup_table_id_);
  }
  result_rollup_table_id_ = result_rollup_table_id;
  if (result_rollup_table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.RollupRequest.result_rollup_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* RollupRequest::release_result_rollup_table_id() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_rollup_table_id_;
  result_rollup_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* RollupRequest::unsafe_arena_release_result_rollup_table_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.RollupRequest.result_rollup_table_id)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_rollup_table_id_;
  result_rollup_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* RollupRequest::_internal_mutable_result_rollup_table_id() {
  
  if (result_rollup_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    result_rollup_table_id_ = p;
  }
  return result_rollup_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* RollupRequest::mutable_result_rollup_table_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_result_rollup_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.RollupRequest.result_rollup_table_id)
  return _msg;
}
inline void RollupRequest::set_allocated_result_rollup_table_id(::io::deephaven::proto::backplane::grpc::Ticket* result_rollup_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_rollup_table_id_);
  }
  if (result_rollup_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_rollup_table_id));
    if (message_arena != submessage_arena) {
      result_rollup_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_rollup_table_id, submessage_arena);
    }
    
  } else {
    
  }
  result_rollup_table_id_ = result_rollup_table_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.RollupRequest.result_rollup_table_id)
}

// .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
inline bool RollupRequest::_internal_has_source_table_id() const {
  return this != internal_default_instance() && source_table_id_ != nullptr;
}
inline bool RollupRequest::has_source_table_id() const {
  return _internal_has_source_table_id();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& RollupRequest::_internal_source_table_id() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = source_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& RollupRequest::source_table_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.RollupRequest.source_table_id)
  return _internal_source_table_id();
}
inline void RollupRequest::unsafe_arena_set_allocated_source_table_id(
    ::io::deephaven::proto::backplane::grpc::Ticket* source_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_table_id_);
  }
  source_table_id_ = source_table_id;
  if (source_table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.RollupRequest.source_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* RollupRequest::release_source_table_id() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = source_table_id_;
  source_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* RollupRequest::unsafe_arena_release_source_table_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.RollupRequest.source_table_id)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = source_table_id_;
  source_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* RollupRequest::_internal_mutable_source_table_id() {
  
  if (source_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    source_table_id_ = p;
  }
  return source_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* RollupRequest::mutable_source_table_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_source_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.RollupRequest.source_table_id)
  return _msg;
}
inline void RollupRequest::set_allocated_source_table_id(::io::deephaven::proto::backplane::grpc::Ticket* source_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_table_id_);
  }
  if (source_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_table_id));
    if (message_arena != submessage_arena) {
      source_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_table_id, submessage_arena);
    }
    
  } else {
    
  }
  source_table_id_ = source_table_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.RollupRequest.source_table_id)
}

// repeated .io.deephaven.proto.backplane.grpc.Aggregation aggregations = 3;
inline int RollupRequest::_internal_aggregations_size() const {
  return aggregations_.size();
}
inline int RollupRequest::aggregations_size() const {
  return _internal_aggregations_size();
}
inline ::io::deephaven::proto::backplane::grpc::Aggregation* RollupRequest::mutable_aggregations(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.RollupRequest.aggregations)
  return aggregations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::Aggregation >*
RollupRequest::mutable_aggregations() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.RollupRequest.aggregations)
  return &aggregations_;
}
inline const ::io::deephaven::proto::backplane::grpc::Aggregation& RollupRequest::_internal_aggregations(int index) const {
  return aggregations_.Get(index);
}
inline const ::io::deephaven::proto::backplane::grpc::Aggregation& RollupRequest::aggregations(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.RollupRequest.aggregations)
  return _internal_aggregations(index);
}
inline ::io::deephaven::proto::backplane::grpc::Aggregation* RollupRequest::_internal_add_aggregations() {
  return aggregations_.Add();
}
inline ::io::deephaven::proto::backplane::grpc::Aggregation* RollupRequest::add_aggregations() {
  ::io::deephaven::proto::backplane::grpc::Aggregation* _add = _internal_add_aggregations();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.RollupRequest.aggregations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::Aggregation >&
RollupRequest::aggregations() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.RollupRequest.aggregations)
  return aggregations_;
}

// bool include_constituents = 4;
inline void RollupRequest::clear_include_constituents() {
  include_constituents_ = false;
}
inline bool RollupRequest::_internal_include_constituents() const {
  return include_constituents_;
}
inline bool RollupRequest::include_constituents() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.RollupRequest.include_constituents)
  return _internal_include_constituents();
}
inline void RollupRequest::_internal_set_include_constituents(bool value) {
  
  include_constituents_ = value;
}
inline void RollupRequest::set_include_constituents(bool value) {
  _internal_set_include_constituents(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.RollupRequest.include_constituents)
}

// repeated string group_by_columns = 5;
inline int RollupRequest::_internal_group_by_columns_size() const {
  return group_by_columns_.size();
}
inline int RollupRequest::group_by_columns_size() const {
  return _internal_group_by_columns_size();
}
inline void RollupRequest::clear_group_by_columns() {
  group_by_columns_.Clear();
}
inline std::string* RollupRequest::add_group_by_columns() {
  std::string* _s = _internal_add_group_by_columns();
  // @@protoc_insertion_point(field_add_mutable:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
  return _s;
}
inline const std::string& RollupRequest::_internal_group_by_columns(int index) const {
  return group_by_columns_.Get(index);
}
inline const std::string& RollupRequest::group_by_columns(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
  return _internal_group_by_columns(index);
}
inline std::string* RollupRequest::mutable_group_by_columns(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
  return group_by_columns_.Mutable(index);
}
inline void RollupRequest::set_group_by_columns(int index, const std::string& value) {
  group_by_columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
}
inline void RollupRequest::set_group_by_columns(int index, std::string&& value) {
  group_by_columns_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
}
inline void RollupRequest::set_group_by_columns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_by_columns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
}
inline void RollupRequest::set_group_by_columns(int index, const char* value, size_t size) {
  group_by_columns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
}
inline std::string* RollupRequest::_internal_add_group_by_columns() {
  return group_by_columns_.Add();
}
inline void RollupRequest::add_group_by_columns(const std::string& value) {
  group_by_columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
}
inline void RollupRequest::add_group_by_columns(std::string&& value) {
  group_by_columns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
}
inline void RollupRequest::add_group_by_columns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_by_columns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
}
inline void RollupRequest::add_group_by_columns(const char* value, size_t size) {
  group_by_columns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RollupRequest::group_by_columns() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
  return group_by_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RollupRequest::mutable_group_by_columns() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.RollupRequest.group_by_columns)
  return &group_by_columns_;
}

// -------------------------------------------------------------------

// RollupResponse

// -------------------------------------------------------------------

// TreeRequest

// .io.deephaven.proto.backplane.grpc.Ticket result_tree_table_id = 1;
inline bool TreeRequest::_internal_has_result_tree_table_id() const {
  return this != internal_default_instance() && result_tree_table_id_ != nullptr;
}
inline bool TreeRequest::has_result_tree_table_id() const {
  return _internal_has_result_tree_table_id();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& TreeRequest::_internal_result_tree_table_id() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = result_tree_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& TreeRequest::result_tree_table_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TreeRequest.result_tree_table_id)
  return _internal_result_tree_table_id();
}
inline void TreeRequest::unsafe_arena_set_allocated_result_tree_table_id(
    ::io::deephaven::proto::backplane::grpc::Ticket* result_tree_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_tree_table_id_);
  }
  result_tree_table_id_ = result_tree_table_id;
  if (result_tree_table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.TreeRequest.result_tree_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* TreeRequest::release_result_tree_table_id() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_tree_table_id_;
  result_tree_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* TreeRequest::unsafe_arena_release_result_tree_table_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.TreeRequest.result_tree_table_id)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_tree_table_id_;
  result_tree_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* TreeRequest::_internal_mutable_result_tree_table_id() {
  
  if (result_tree_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    result_tree_table_id_ = p;
  }
  return result_tree_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* TreeRequest::mutable_result_tree_table_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_result_tree_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TreeRequest.result_tree_table_id)
  return _msg;
}
inline void TreeRequest::set_allocated_result_tree_table_id(::io::deephaven::proto::backplane::grpc::Ticket* result_tree_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_tree_table_id_);
  }
  if (result_tree_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_tree_table_id));
    if (message_arena != submessage_arena) {
      result_tree_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_tree_table_id, submessage_arena);
    }
    
  } else {
    
  }
  result_tree_table_id_ = result_tree_table_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TreeRequest.result_tree_table_id)
}

// .io.deephaven.proto.backplane.grpc.Ticket source_table_id = 2;
inline bool TreeRequest::_internal_has_source_table_id() const {
  return this != internal_default_instance() && source_table_id_ != nullptr;
}
inline bool TreeRequest::has_source_table_id() const {
  return _internal_has_source_table_id();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& TreeRequest::_internal_source_table_id() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = source_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& TreeRequest::source_table_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TreeRequest.source_table_id)
  return _internal_source_table_id();
}
inline void TreeRequest::unsafe_arena_set_allocated_source_table_id(
    ::io::deephaven::proto::backplane::grpc::Ticket* source_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_table_id_);
  }
  source_table_id_ = source_table_id;
  if (source_table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.TreeRequest.source_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* TreeRequest::release_source_table_id() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = source_table_id_;
  source_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* TreeRequest::unsafe_arena_release_source_table_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.TreeRequest.source_table_id)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = source_table_id_;
  source_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* TreeRequest::_internal_mutable_source_table_id() {
  
  if (source_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    source_table_id_ = p;
  }
  return source_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* TreeRequest::mutable_source_table_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_source_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TreeRequest.source_table_id)
  return _msg;
}
inline void TreeRequest::set_allocated_source_table_id(::io::deephaven::proto::backplane::grpc::Ticket* source_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_table_id_);
  }
  if (source_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_table_id));
    if (message_arena != submessage_arena) {
      source_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_table_id, submessage_arena);
    }
    
  } else {
    
  }
  source_table_id_ = source_table_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TreeRequest.source_table_id)
}

// string identifier_column = 3;
inline void TreeRequest::clear_identifier_column() {
  identifier_column_.ClearToEmpty();
}
inline const std::string& TreeRequest::identifier_column() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TreeRequest.identifier_column)
  return _internal_identifier_column();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TreeRequest::set_identifier_column(ArgT0&& arg0, ArgT... args) {
 
 identifier_column_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TreeRequest.identifier_column)
}
inline std::string* TreeRequest::mutable_identifier_column() {
  std::string* _s = _internal_mutable_identifier_column();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TreeRequest.identifier_column)
  return _s;
}
inline const std::string& TreeRequest::_internal_identifier_column() const {
  return identifier_column_.Get();
}
inline void TreeRequest::_internal_set_identifier_column(const std::string& value) {
  
  identifier_column_.Set(value, GetArenaForAllocation());
}
inline std::string* TreeRequest::_internal_mutable_identifier_column() {
  
  return identifier_column_.Mutable(GetArenaForAllocation());
}
inline std::string* TreeRequest::release_identifier_column() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.TreeRequest.identifier_column)
  return identifier_column_.Release();
}
inline void TreeRequest::set_allocated_identifier_column(std::string* identifier_column) {
  if (identifier_column != nullptr) {
    
  } else {
    
  }
  identifier_column_.SetAllocated(identifier_column, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (identifier_column_.IsDefault()) {
    identifier_column_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TreeRequest.identifier_column)
}

// string parent_identifier_column = 4;
inline void TreeRequest::clear_parent_identifier_column() {
  parent_identifier_column_.ClearToEmpty();
}
inline const std::string& TreeRequest::parent_identifier_column() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TreeRequest.parent_identifier_column)
  return _internal_parent_identifier_column();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TreeRequest::set_parent_identifier_column(ArgT0&& arg0, ArgT... args) {
 
 parent_identifier_column_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TreeRequest.parent_identifier_column)
}
inline std::string* TreeRequest::mutable_parent_identifier_column() {
  std::string* _s = _internal_mutable_parent_identifier_column();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.TreeRequest.parent_identifier_column)
  return _s;
}
inline const std::string& TreeRequest::_internal_parent_identifier_column() const {
  return parent_identifier_column_.Get();
}
inline void TreeRequest::_internal_set_parent_identifier_column(const std::string& value) {
  
  parent_identifier_column_.Set(value, GetArenaForAllocation());
}
inline std::string* TreeRequest::_internal_mutable_parent_identifier_column() {
  
  return parent_identifier_column_.Mutable(GetArenaForAllocation());
}
inline std::string* TreeRequest::release_parent_identifier_column() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.TreeRequest.parent_identifier_column)
  return parent_identifier_column_.Release();
}
inline void TreeRequest::set_allocated_parent_identifier_column(std::string* parent_identifier_column) {
  if (parent_identifier_column != nullptr) {
    
  } else {
    
  }
  parent_identifier_column_.SetAllocated(parent_identifier_column, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_identifier_column_.IsDefault()) {
    parent_identifier_column_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.TreeRequest.parent_identifier_column)
}

// bool promote_orphans = 5;
inline void TreeRequest::clear_promote_orphans() {
  promote_orphans_ = false;
}
inline bool TreeRequest::_internal_promote_orphans() const {
  return promote_orphans_;
}
inline bool TreeRequest::promote_orphans() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.TreeRequest.promote_orphans)
  return _internal_promote_orphans();
}
inline void TreeRequest::_internal_set_promote_orphans(bool value) {
  
  promote_orphans_ = value;
}
inline void TreeRequest::set_promote_orphans(bool value) {
  _internal_set_promote_orphans(value);
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.TreeRequest.promote_orphans)
}

// -------------------------------------------------------------------

// TreeResponse

// -------------------------------------------------------------------

// HierarchicalTableApplyRequest

// .io.deephaven.proto.backplane.grpc.Ticket result_hierarchical_table_id = 1;
inline bool HierarchicalTableApplyRequest::_internal_has_result_hierarchical_table_id() const {
  return this != internal_default_instance() && result_hierarchical_table_id_ != nullptr;
}
inline bool HierarchicalTableApplyRequest::has_result_hierarchical_table_id() const {
  return _internal_has_result_hierarchical_table_id();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableApplyRequest::_internal_result_hierarchical_table_id() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = result_hierarchical_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableApplyRequest::result_hierarchical_table_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.result_hierarchical_table_id)
  return _internal_result_hierarchical_table_id();
}
inline void HierarchicalTableApplyRequest::unsafe_arena_set_allocated_result_hierarchical_table_id(
    ::io::deephaven::proto::backplane::grpc::Ticket* result_hierarchical_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_hierarchical_table_id_);
  }
  result_hierarchical_table_id_ = result_hierarchical_table_id;
  if (result_hierarchical_table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.result_hierarchical_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableApplyRequest::release_result_hierarchical_table_id() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_hierarchical_table_id_;
  result_hierarchical_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableApplyRequest::unsafe_arena_release_result_hierarchical_table_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.result_hierarchical_table_id)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_hierarchical_table_id_;
  result_hierarchical_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableApplyRequest::_internal_mutable_result_hierarchical_table_id() {
  
  if (result_hierarchical_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    result_hierarchical_table_id_ = p;
  }
  return result_hierarchical_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableApplyRequest::mutable_result_hierarchical_table_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_result_hierarchical_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.result_hierarchical_table_id)
  return _msg;
}
inline void HierarchicalTableApplyRequest::set_allocated_result_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* result_hierarchical_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_hierarchical_table_id_);
  }
  if (result_hierarchical_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_hierarchical_table_id));
    if (message_arena != submessage_arena) {
      result_hierarchical_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_hierarchical_table_id, submessage_arena);
    }
    
  } else {
    
  }
  result_hierarchical_table_id_ = result_hierarchical_table_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.result_hierarchical_table_id)
}

// .io.deephaven.proto.backplane.grpc.Ticket input_hierarchical_table_id = 2;
inline bool HierarchicalTableApplyRequest::_internal_has_input_hierarchical_table_id() const {
  return this != internal_default_instance() && input_hierarchical_table_id_ != nullptr;
}
inline bool HierarchicalTableApplyRequest::has_input_hierarchical_table_id() const {
  return _internal_has_input_hierarchical_table_id();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableApplyRequest::_internal_input_hierarchical_table_id() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = input_hierarchical_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableApplyRequest::input_hierarchical_table_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.input_hierarchical_table_id)
  return _internal_input_hierarchical_table_id();
}
inline void HierarchicalTableApplyRequest::unsafe_arena_set_allocated_input_hierarchical_table_id(
    ::io::deephaven::proto::backplane::grpc::Ticket* input_hierarchical_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_hierarchical_table_id_);
  }
  input_hierarchical_table_id_ = input_hierarchical_table_id;
  if (input_hierarchical_table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.input_hierarchical_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableApplyRequest::release_input_hierarchical_table_id() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = input_hierarchical_table_id_;
  input_hierarchical_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableApplyRequest::unsafe_arena_release_input_hierarchical_table_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.input_hierarchical_table_id)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = input_hierarchical_table_id_;
  input_hierarchical_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableApplyRequest::_internal_mutable_input_hierarchical_table_id() {
  
  if (input_hierarchical_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    input_hierarchical_table_id_ = p;
  }
  return input_hierarchical_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableApplyRequest::mutable_input_hierarchical_table_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_input_hierarchical_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.input_hierarchical_table_id)
  return _msg;
}
inline void HierarchicalTableApplyRequest::set_allocated_input_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* input_hierarchical_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_hierarchical_table_id_);
  }
  if (input_hierarchical_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_hierarchical_table_id));
    if (message_arena != submessage_arena) {
      input_hierarchical_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_hierarchical_table_id, submessage_arena);
    }
    
  } else {
    
  }
  input_hierarchical_table_id_ = input_hierarchical_table_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.input_hierarchical_table_id)
}

// repeated .io.deephaven.proto.backplane.grpc.Condition filters = 3;
inline int HierarchicalTableApplyRequest::_internal_filters_size() const {
  return filters_.size();
}
inline int HierarchicalTableApplyRequest::filters_size() const {
  return _internal_filters_size();
}
inline ::io::deephaven::proto::backplane::grpc::Condition* HierarchicalTableApplyRequest::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::Condition >*
HierarchicalTableApplyRequest::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.filters)
  return &filters_;
}
inline const ::io::deephaven::proto::backplane::grpc::Condition& HierarchicalTableApplyRequest::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const ::io::deephaven::proto::backplane::grpc::Condition& HierarchicalTableApplyRequest::filters(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.filters)
  return _internal_filters(index);
}
inline ::io::deephaven::proto::backplane::grpc::Condition* HierarchicalTableApplyRequest::_internal_add_filters() {
  return filters_.Add();
}
inline ::io::deephaven::proto::backplane::grpc::Condition* HierarchicalTableApplyRequest::add_filters() {
  ::io::deephaven::proto::backplane::grpc::Condition* _add = _internal_add_filters();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.filters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::Condition >&
HierarchicalTableApplyRequest::filters() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.filters)
  return filters_;
}

// repeated .io.deephaven.proto.backplane.grpc.SortDescriptor sorts = 4;
inline int HierarchicalTableApplyRequest::_internal_sorts_size() const {
  return sorts_.size();
}
inline int HierarchicalTableApplyRequest::sorts_size() const {
  return _internal_sorts_size();
}
inline ::io::deephaven::proto::backplane::grpc::SortDescriptor* HierarchicalTableApplyRequest::mutable_sorts(int index) {
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.sorts)
  return sorts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::SortDescriptor >*
HierarchicalTableApplyRequest::mutable_sorts() {
  // @@protoc_insertion_point(field_mutable_list:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.sorts)
  return &sorts_;
}
inline const ::io::deephaven::proto::backplane::grpc::SortDescriptor& HierarchicalTableApplyRequest::_internal_sorts(int index) const {
  return sorts_.Get(index);
}
inline const ::io::deephaven::proto::backplane::grpc::SortDescriptor& HierarchicalTableApplyRequest::sorts(int index) const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.sorts)
  return _internal_sorts(index);
}
inline ::io::deephaven::proto::backplane::grpc::SortDescriptor* HierarchicalTableApplyRequest::_internal_add_sorts() {
  return sorts_.Add();
}
inline ::io::deephaven::proto::backplane::grpc::SortDescriptor* HierarchicalTableApplyRequest::add_sorts() {
  ::io::deephaven::proto::backplane::grpc::SortDescriptor* _add = _internal_add_sorts();
  // @@protoc_insertion_point(field_add:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.sorts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::deephaven::proto::backplane::grpc::SortDescriptor >&
HierarchicalTableApplyRequest::sorts() const {
  // @@protoc_insertion_point(field_list:io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest.sorts)
  return sorts_;
}

// -------------------------------------------------------------------

// HierarchicalTableApplyResponse

// -------------------------------------------------------------------

// HierarchicalTableDescriptor

// bytes snapshot_schema = 1;
inline void HierarchicalTableDescriptor::clear_snapshot_schema() {
  snapshot_schema_.ClearToEmpty();
}
inline const std::string& HierarchicalTableDescriptor::snapshot_schema() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor.snapshot_schema)
  return _internal_snapshot_schema();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HierarchicalTableDescriptor::set_snapshot_schema(ArgT0&& arg0, ArgT... args) {
 
 snapshot_schema_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor.snapshot_schema)
}
inline std::string* HierarchicalTableDescriptor::mutable_snapshot_schema() {
  std::string* _s = _internal_mutable_snapshot_schema();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor.snapshot_schema)
  return _s;
}
inline const std::string& HierarchicalTableDescriptor::_internal_snapshot_schema() const {
  return snapshot_schema_.Get();
}
inline void HierarchicalTableDescriptor::_internal_set_snapshot_schema(const std::string& value) {
  
  snapshot_schema_.Set(value, GetArenaForAllocation());
}
inline std::string* HierarchicalTableDescriptor::_internal_mutable_snapshot_schema() {
  
  return snapshot_schema_.Mutable(GetArenaForAllocation());
}
inline std::string* HierarchicalTableDescriptor::release_snapshot_schema() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor.snapshot_schema)
  return snapshot_schema_.Release();
}
inline void HierarchicalTableDescriptor::set_allocated_snapshot_schema(std::string* snapshot_schema) {
  if (snapshot_schema != nullptr) {
    
  } else {
    
  }
  snapshot_schema_.SetAllocated(snapshot_schema, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (snapshot_schema_.IsDefault()) {
    snapshot_schema_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableDescriptor.snapshot_schema)
}

// -------------------------------------------------------------------

// HierarchicalTableViewRequest

// .io.deephaven.proto.backplane.grpc.Ticket result_view_id = 1;
inline bool HierarchicalTableViewRequest::_internal_has_result_view_id() const {
  return this != internal_default_instance() && result_view_id_ != nullptr;
}
inline bool HierarchicalTableViewRequest::has_result_view_id() const {
  return _internal_has_result_view_id();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewRequest::_internal_result_view_id() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = result_view_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewRequest::result_view_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.result_view_id)
  return _internal_result_view_id();
}
inline void HierarchicalTableViewRequest::unsafe_arena_set_allocated_result_view_id(
    ::io::deephaven::proto::backplane::grpc::Ticket* result_view_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_view_id_);
  }
  result_view_id_ = result_view_id;
  if (result_view_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.result_view_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::release_result_view_id() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_view_id_;
  result_view_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::unsafe_arena_release_result_view_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.result_view_id)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_view_id_;
  result_view_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::_internal_mutable_result_view_id() {
  
  if (result_view_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    result_view_id_ = p;
  }
  return result_view_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::mutable_result_view_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_result_view_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.result_view_id)
  return _msg;
}
inline void HierarchicalTableViewRequest::set_allocated_result_view_id(::io::deephaven::proto::backplane::grpc::Ticket* result_view_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_view_id_);
  }
  if (result_view_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_view_id));
    if (message_arena != submessage_arena) {
      result_view_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_view_id, submessage_arena);
    }
    
  } else {
    
  }
  result_view_id_ = result_view_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.result_view_id)
}

// .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
inline bool HierarchicalTableViewRequest::_internal_has_hierarchical_table_id() const {
  return target_case() == kHierarchicalTableId;
}
inline bool HierarchicalTableViewRequest::has_hierarchical_table_id() const {
  return _internal_has_hierarchical_table_id();
}
inline void HierarchicalTableViewRequest::set_has_hierarchical_table_id() {
  _oneof_case_[0] = kHierarchicalTableId;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::release_hierarchical_table_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.hierarchical_table_id)
  if (_internal_has_hierarchical_table_id()) {
    clear_has_target();
    ::io::deephaven::proto::backplane::grpc::Ticket* temp = target_.hierarchical_table_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.hierarchical_table_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewRequest::_internal_hierarchical_table_id() const {
  return _internal_has_hierarchical_table_id()
      ? *target_.hierarchical_table_id_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewRequest::hierarchical_table_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.hierarchical_table_id)
  return _internal_hierarchical_table_id();
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::unsafe_arena_release_hierarchical_table_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.hierarchical_table_id)
  if (_internal_has_hierarchical_table_id()) {
    clear_has_target();
    ::io::deephaven::proto::backplane::grpc::Ticket* temp = target_.hierarchical_table_id_;
    target_.hierarchical_table_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HierarchicalTableViewRequest::unsafe_arena_set_allocated_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* hierarchical_table_id) {
  clear_target();
  if (hierarchical_table_id) {
    set_has_hierarchical_table_id();
    target_.hierarchical_table_id_ = hierarchical_table_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.hierarchical_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::_internal_mutable_hierarchical_table_id() {
  if (!_internal_has_hierarchical_table_id()) {
    clear_target();
    set_has_hierarchical_table_id();
    target_.hierarchical_table_id_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::Ticket >(GetArenaForAllocation());
  }
  return target_.hierarchical_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::mutable_hierarchical_table_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_hierarchical_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.hierarchical_table_id)
  return _msg;
}

// .io.deephaven.proto.backplane.grpc.Ticket existing_view_id = 3;
inline bool HierarchicalTableViewRequest::_internal_has_existing_view_id() const {
  return target_case() == kExistingViewId;
}
inline bool HierarchicalTableViewRequest::has_existing_view_id() const {
  return _internal_has_existing_view_id();
}
inline void HierarchicalTableViewRequest::set_has_existing_view_id() {
  _oneof_case_[0] = kExistingViewId;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::release_existing_view_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.existing_view_id)
  if (_internal_has_existing_view_id()) {
    clear_has_target();
    ::io::deephaven::proto::backplane::grpc::Ticket* temp = target_.existing_view_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.existing_view_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewRequest::_internal_existing_view_id() const {
  return _internal_has_existing_view_id()
      ? *target_.existing_view_id_
      : reinterpret_cast< ::io::deephaven::proto::backplane::grpc::Ticket&>(::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewRequest::existing_view_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.existing_view_id)
  return _internal_existing_view_id();
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::unsafe_arena_release_existing_view_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.existing_view_id)
  if (_internal_has_existing_view_id()) {
    clear_has_target();
    ::io::deephaven::proto::backplane::grpc::Ticket* temp = target_.existing_view_id_;
    target_.existing_view_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HierarchicalTableViewRequest::unsafe_arena_set_allocated_existing_view_id(::io::deephaven::proto::backplane::grpc::Ticket* existing_view_id) {
  clear_target();
  if (existing_view_id) {
    set_has_existing_view_id();
    target_.existing_view_id_ = existing_view_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.existing_view_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::_internal_mutable_existing_view_id() {
  if (!_internal_has_existing_view_id()) {
    clear_target();
    set_has_existing_view_id();
    target_.existing_view_id_ = CreateMaybeMessage< ::io::deephaven::proto::backplane::grpc::Ticket >(GetArenaForAllocation());
  }
  return target_.existing_view_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewRequest::mutable_existing_view_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_existing_view_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.existing_view_id)
  return _msg;
}

// .io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor expansions = 4;
inline bool HierarchicalTableViewRequest::_internal_has_expansions() const {
  return this != internal_default_instance() && expansions_ != nullptr;
}
inline bool HierarchicalTableViewRequest::has_expansions() const {
  return _internal_has_expansions();
}
inline void HierarchicalTableViewRequest::clear_expansions() {
  if (GetArenaForAllocation() == nullptr && expansions_ != nullptr) {
    delete expansions_;
  }
  expansions_ = nullptr;
}
inline const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor& HierarchicalTableViewRequest::_internal_expansions() const {
  const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* p = expansions_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor&>(
      ::io::deephaven::proto::backplane::grpc::_HierarchicalTableViewKeyTableDescriptor_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor& HierarchicalTableViewRequest::expansions() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.expansions)
  return _internal_expansions();
}
inline void HierarchicalTableViewRequest::unsafe_arena_set_allocated_expansions(
    ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* expansions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expansions_);
  }
  expansions_ = expansions;
  if (expansions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.expansions)
}
inline ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* HierarchicalTableViewRequest::release_expansions() {
  
  ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* temp = expansions_;
  expansions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* HierarchicalTableViewRequest::unsafe_arena_release_expansions() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.expansions)
  
  ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* temp = expansions_;
  expansions_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* HierarchicalTableViewRequest::_internal_mutable_expansions() {
  
  if (expansions_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor>(GetArenaForAllocation());
    expansions_ = p;
  }
  return expansions_;
}
inline ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* HierarchicalTableViewRequest::mutable_expansions() {
  ::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* _msg = _internal_mutable_expansions();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.expansions)
  return _msg;
}
inline void HierarchicalTableViewRequest::set_allocated_expansions(::io::deephaven::proto::backplane::grpc::HierarchicalTableViewKeyTableDescriptor* expansions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete expansions_;
  }
  if (expansions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(expansions);
    if (message_arena != submessage_arena) {
      expansions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expansions, submessage_arena);
    }
    
  } else {
    
  }
  expansions_ = expansions;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest.expansions)
}

inline bool HierarchicalTableViewRequest::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void HierarchicalTableViewRequest::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline HierarchicalTableViewRequest::TargetCase HierarchicalTableViewRequest::target_case() const {
  return HierarchicalTableViewRequest::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// HierarchicalTableViewKeyTableDescriptor

// .io.deephaven.proto.backplane.grpc.Ticket key_table_id = 1;
inline bool HierarchicalTableViewKeyTableDescriptor::_internal_has_key_table_id() const {
  return this != internal_default_instance() && key_table_id_ != nullptr;
}
inline bool HierarchicalTableViewKeyTableDescriptor::has_key_table_id() const {
  return _internal_has_key_table_id();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewKeyTableDescriptor::_internal_key_table_id() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = key_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableViewKeyTableDescriptor::key_table_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_id)
  return _internal_key_table_id();
}
inline void HierarchicalTableViewKeyTableDescriptor::unsafe_arena_set_allocated_key_table_id(
    ::io::deephaven::proto::backplane::grpc::Ticket* key_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_table_id_);
  }
  key_table_id_ = key_table_id;
  if (key_table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewKeyTableDescriptor::release_key_table_id() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = key_table_id_;
  key_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewKeyTableDescriptor::unsafe_arena_release_key_table_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_id)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = key_table_id_;
  key_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewKeyTableDescriptor::_internal_mutable_key_table_id() {
  
  if (key_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    key_table_id_ = p;
  }
  return key_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableViewKeyTableDescriptor::mutable_key_table_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_key_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_id)
  return _msg;
}
inline void HierarchicalTableViewKeyTableDescriptor::set_allocated_key_table_id(::io::deephaven::proto::backplane::grpc::Ticket* key_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_table_id_);
  }
  if (key_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_table_id));
    if (message_arena != submessage_arena) {
      key_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_table_id, submessage_arena);
    }
    
  } else {
    
  }
  key_table_id_ = key_table_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_id)
}

// optional string key_table_action_column = 2;
inline bool HierarchicalTableViewKeyTableDescriptor::_internal_has_key_table_action_column() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HierarchicalTableViewKeyTableDescriptor::has_key_table_action_column() const {
  return _internal_has_key_table_action_column();
}
inline void HierarchicalTableViewKeyTableDescriptor::clear_key_table_action_column() {
  key_table_action_column_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HierarchicalTableViewKeyTableDescriptor::key_table_action_column() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_action_column)
  return _internal_key_table_action_column();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HierarchicalTableViewKeyTableDescriptor::set_key_table_action_column(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_table_action_column_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_action_column)
}
inline std::string* HierarchicalTableViewKeyTableDescriptor::mutable_key_table_action_column() {
  std::string* _s = _internal_mutable_key_table_action_column();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_action_column)
  return _s;
}
inline const std::string& HierarchicalTableViewKeyTableDescriptor::_internal_key_table_action_column() const {
  return key_table_action_column_.Get();
}
inline void HierarchicalTableViewKeyTableDescriptor::_internal_set_key_table_action_column(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_table_action_column_.Set(value, GetArenaForAllocation());
}
inline std::string* HierarchicalTableViewKeyTableDescriptor::_internal_mutable_key_table_action_column() {
  _has_bits_[0] |= 0x00000001u;
  return key_table_action_column_.Mutable(GetArenaForAllocation());
}
inline std::string* HierarchicalTableViewKeyTableDescriptor::release_key_table_action_column() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_action_column)
  if (!_internal_has_key_table_action_column()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_table_action_column_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_table_action_column_.IsDefault()) {
    key_table_action_column_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HierarchicalTableViewKeyTableDescriptor::set_allocated_key_table_action_column(std::string* key_table_action_column) {
  if (key_table_action_column != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_table_action_column_.SetAllocated(key_table_action_column, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_table_action_column_.IsDefault()) {
    key_table_action_column_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor.key_table_action_column)
}

// -------------------------------------------------------------------

// HierarchicalTableViewResponse

// -------------------------------------------------------------------

// HierarchicalTableSourceExportRequest

// .io.deephaven.proto.backplane.grpc.Ticket result_table_id = 1;
inline bool HierarchicalTableSourceExportRequest::_internal_has_result_table_id() const {
  return this != internal_default_instance() && result_table_id_ != nullptr;
}
inline bool HierarchicalTableSourceExportRequest::has_result_table_id() const {
  return _internal_has_result_table_id();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableSourceExportRequest::_internal_result_table_id() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = result_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableSourceExportRequest::result_table_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.result_table_id)
  return _internal_result_table_id();
}
inline void HierarchicalTableSourceExportRequest::unsafe_arena_set_allocated_result_table_id(
    ::io::deephaven::proto::backplane::grpc::Ticket* result_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_table_id_);
  }
  result_table_id_ = result_table_id;
  if (result_table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.result_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableSourceExportRequest::release_result_table_id() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_table_id_;
  result_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableSourceExportRequest::unsafe_arena_release_result_table_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.result_table_id)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = result_table_id_;
  result_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableSourceExportRequest::_internal_mutable_result_table_id() {
  
  if (result_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    result_table_id_ = p;
  }
  return result_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableSourceExportRequest::mutable_result_table_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_result_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.result_table_id)
  return _msg;
}
inline void HierarchicalTableSourceExportRequest::set_allocated_result_table_id(::io::deephaven::proto::backplane::grpc::Ticket* result_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_table_id_);
  }
  if (result_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_table_id));
    if (message_arena != submessage_arena) {
      result_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_table_id, submessage_arena);
    }
    
  } else {
    
  }
  result_table_id_ = result_table_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.result_table_id)
}

// .io.deephaven.proto.backplane.grpc.Ticket hierarchical_table_id = 2;
inline bool HierarchicalTableSourceExportRequest::_internal_has_hierarchical_table_id() const {
  return this != internal_default_instance() && hierarchical_table_id_ != nullptr;
}
inline bool HierarchicalTableSourceExportRequest::has_hierarchical_table_id() const {
  return _internal_has_hierarchical_table_id();
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableSourceExportRequest::_internal_hierarchical_table_id() const {
  const ::io::deephaven::proto::backplane::grpc::Ticket* p = hierarchical_table_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::io::deephaven::proto::backplane::grpc::Ticket&>(
      ::io::deephaven::proto::backplane::grpc::_Ticket_default_instance_);
}
inline const ::io::deephaven::proto::backplane::grpc::Ticket& HierarchicalTableSourceExportRequest::hierarchical_table_id() const {
  // @@protoc_insertion_point(field_get:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.hierarchical_table_id)
  return _internal_hierarchical_table_id();
}
inline void HierarchicalTableSourceExportRequest::unsafe_arena_set_allocated_hierarchical_table_id(
    ::io::deephaven::proto::backplane::grpc::Ticket* hierarchical_table_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hierarchical_table_id_);
  }
  hierarchical_table_id_ = hierarchical_table_id;
  if (hierarchical_table_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.hierarchical_table_id)
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableSourceExportRequest::release_hierarchical_table_id() {
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = hierarchical_table_id_;
  hierarchical_table_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableSourceExportRequest::unsafe_arena_release_hierarchical_table_id() {
  // @@protoc_insertion_point(field_release:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.hierarchical_table_id)
  
  ::io::deephaven::proto::backplane::grpc::Ticket* temp = hierarchical_table_id_;
  hierarchical_table_id_ = nullptr;
  return temp;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableSourceExportRequest::_internal_mutable_hierarchical_table_id() {
  
  if (hierarchical_table_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::deephaven::proto::backplane::grpc::Ticket>(GetArenaForAllocation());
    hierarchical_table_id_ = p;
  }
  return hierarchical_table_id_;
}
inline ::io::deephaven::proto::backplane::grpc::Ticket* HierarchicalTableSourceExportRequest::mutable_hierarchical_table_id() {
  ::io::deephaven::proto::backplane::grpc::Ticket* _msg = _internal_mutable_hierarchical_table_id();
  // @@protoc_insertion_point(field_mutable:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.hierarchical_table_id)
  return _msg;
}
inline void HierarchicalTableSourceExportRequest::set_allocated_hierarchical_table_id(::io::deephaven::proto::backplane::grpc::Ticket* hierarchical_table_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hierarchical_table_id_);
  }
  if (hierarchical_table_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hierarchical_table_id));
    if (message_arena != submessage_arena) {
      hierarchical_table_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hierarchical_table_id, submessage_arena);
    }
    
  } else {
    
  }
  hierarchical_table_id_ = hierarchical_table_id;
  // @@protoc_insertion_point(field_set_allocated:io.deephaven.proto.backplane.grpc.HierarchicalTableSourceExportRequest.hierarchical_table_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_deephaven_2fproto_2fhierarchicaltable_2eproto
