// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: deephaven/proto/partitionedtable.proto
// Protobuf C++ Version: 5.28.1

#include "deephaven/proto/partitionedtable.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {

inline constexpr PartitionedTableDescriptor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : key_column_names_{},
        constituent_definition_schema_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        constituent_column_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        unique_keys_{false},
        constituent_changes_permitted_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PartitionedTableDescriptor::PartitionedTableDescriptor(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PartitionedTableDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartitionedTableDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartitionedTableDescriptorDefaultTypeInternal() {}
  union {
    PartitionedTableDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartitionedTableDescriptorDefaultTypeInternal _PartitionedTableDescriptor_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR PartitionByResponse::PartitionByResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct PartitionByResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartitionByResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartitionByResponseDefaultTypeInternal() {}
  union {
    PartitionByResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartitionByResponseDefaultTypeInternal _PartitionByResponse_default_instance_;

inline constexpr PartitionByRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        key_column_names_{},
        table_id_{nullptr},
        result_id_{nullptr},
        drop_keys_{false} {}

template <typename>
PROTOBUF_CONSTEXPR PartitionByRequest::PartitionByRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PartitionByRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartitionByRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartitionByRequestDefaultTypeInternal() {}
  union {
    PartitionByRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartitionByRequestDefaultTypeInternal _PartitionByRequest_default_instance_;

inline constexpr MergeRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        partitioned_table_{nullptr},
        result_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MergeRequest::MergeRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MergeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MergeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MergeRequestDefaultTypeInternal() {}
  union {
    MergeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MergeRequestDefaultTypeInternal _MergeRequest_default_instance_;

inline constexpr GetTableRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        partitioned_table_{nullptr},
        key_table_ticket_{nullptr},
        result_id_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetTableRequest::GetTableRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTableRequestDefaultTypeInternal() {}
  union {
    GetTableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTableRequestDefaultTypeInternal _GetTableRequest_default_instance_;
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_deephaven_2fproto_2fpartitionedtable_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_deephaven_2fproto_2fpartitionedtable_2eproto = nullptr;
const ::uint32_t
    TableStruct_deephaven_2fproto_2fpartitionedtable_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::PartitionByRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::PartitionByRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::PartitionByRequest, _impl_.table_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::PartitionByRequest, _impl_.result_id_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::PartitionByRequest, _impl_.key_column_names_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::PartitionByRequest, _impl_.drop_keys_),
        0,
        1,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::PartitionByResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeRequest, _impl_.partitioned_table_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::MergeRequest, _impl_.result_id_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::GetTableRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::GetTableRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::GetTableRequest, _impl_.partitioned_table_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::GetTableRequest, _impl_.key_table_ticket_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::GetTableRequest, _impl_.result_id_),
        0,
        1,
        2,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::PartitionedTableDescriptor, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::PartitionedTableDescriptor, _impl_.key_column_names_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::PartitionedTableDescriptor, _impl_.constituent_column_name_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::PartitionedTableDescriptor, _impl_.unique_keys_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::PartitionedTableDescriptor, _impl_.constituent_definition_schema_),
        PROTOBUF_FIELD_OFFSET(::io::deephaven::proto::backplane::grpc::PartitionedTableDescriptor, _impl_.constituent_changes_permitted_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 12, -1, sizeof(::io::deephaven::proto::backplane::grpc::PartitionByRequest)},
        {16, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::PartitionByResponse)},
        {24, 34, -1, sizeof(::io::deephaven::proto::backplane::grpc::MergeRequest)},
        {36, 47, -1, sizeof(::io::deephaven::proto::backplane::grpc::GetTableRequest)},
        {50, -1, -1, sizeof(::io::deephaven::proto::backplane::grpc::PartitionedTableDescriptor)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::io::deephaven::proto::backplane::grpc::_PartitionByRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_PartitionByResponse_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_MergeRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_GetTableRequest_default_instance_._instance,
    &::io::deephaven::proto::backplane::grpc::_PartitionedTableDescriptor_default_instance_._instance,
};
const char descriptor_table_protodef_deephaven_2fproto_2fpartitionedtable_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n&deephaven/proto/partitionedtable.proto"
    "\022!io.deephaven.proto.backplane.grpc\032\033dee"
    "phaven/proto/table.proto\032\034deephaven/prot"
    "o/ticket.proto\"\274\001\n\022PartitionByRequest\022;\n"
    "\010table_id\030\001 \001(\0132).io.deephaven.proto.bac"
    "kplane.grpc.Ticket\022<\n\tresult_id\030\002 \001(\0132)."
    "io.deephaven.proto.backplane.grpc.Ticket"
    "\022\030\n\020key_column_names\030\003 \003(\t\022\021\n\tdrop_keys\030"
    "\004 \001(\010\"\025\n\023PartitionByResponse\"\222\001\n\014MergeRe"
    "quest\022D\n\021partitioned_table\030\001 \001(\0132).io.de"
    "ephaven.proto.backplane.grpc.Ticket\022<\n\tr"
    "esult_id\030\002 \001(\0132).io.deephaven.proto.back"
    "plane.grpc.Ticket\"\332\001\n\017GetTableRequest\022D\n"
    "\021partitioned_table\030\001 \001(\0132).io.deephaven."
    "proto.backplane.grpc.Ticket\022C\n\020key_table"
    "_ticket\030\002 \001(\0132).io.deephaven.proto.backp"
    "lane.grpc.Ticket\022<\n\tresult_id\030\004 \001(\0132).io"
    ".deephaven.proto.backplane.grpc.Ticket\"\272"
    "\001\n\032PartitionedTableDescriptor\022\030\n\020key_col"
    "umn_names\030\001 \003(\t\022\037\n\027constituent_column_na"
    "me\030\004 \001(\t\022\023\n\013unique_keys\030\002 \001(\010\022%\n\035constit"
    "uent_definition_schema\030\003 \001(\014\022%\n\035constitu"
    "ent_changes_permitted\030\005 \001(\0102\226\003\n\027Partitio"
    "nedTableService\022|\n\013PartitionBy\0225.io.deep"
    "haven.proto.backplane.grpc.PartitionByRe"
    "quest\0326.io.deephaven.proto.backplane.grp"
    "c.PartitionByResponse\022z\n\005Merge\022/.io.deep"
    "haven.proto.backplane.grpc.MergeRequest\032"
    "@.io.deephaven.proto.backplane.grpc.Expo"
    "rtedTableCreationResponse\022\200\001\n\010GetTable\0222"
    ".io.deephaven.proto.backplane.grpc.GetTa"
    "bleRequest\032@.io.deephaven.proto.backplan"
    "e.grpc.ExportedTableCreationResponseBLH\001"
    "P\001ZFgithub.com/deephaven/deephaven-core/"
    "go/internal/proto/partitionedtableb\006prot"
    "o3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_deephaven_2fproto_2fpartitionedtable_2eproto_deps[2] =
    {
        &::descriptor_table_deephaven_2fproto_2ftable_2eproto,
        &::descriptor_table_deephaven_2fproto_2fticket_2eproto,
};
static ::absl::once_flag descriptor_table_deephaven_2fproto_2fpartitionedtable_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_deephaven_2fproto_2fpartitionedtable_2eproto = {
    false,
    false,
    1402,
    descriptor_table_protodef_deephaven_2fproto_2fpartitionedtable_2eproto,
    "deephaven/proto/partitionedtable.proto",
    &descriptor_table_deephaven_2fproto_2fpartitionedtable_2eproto_once,
    descriptor_table_deephaven_2fproto_2fpartitionedtable_2eproto_deps,
    2,
    5,
    schemas,
    file_default_instances,
    TableStruct_deephaven_2fproto_2fpartitionedtable_2eproto::offsets,
    file_level_enum_descriptors_deephaven_2fproto_2fpartitionedtable_2eproto,
    file_level_service_descriptors_deephaven_2fproto_2fpartitionedtable_2eproto,
};
namespace io {
namespace deephaven {
namespace proto {
namespace backplane {
namespace grpc {
// ===================================================================

class PartitionByRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PartitionByRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PartitionByRequest, _impl_._has_bits_);
};

void PartitionByRequest::clear_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PartitionByRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PartitionByRequest::PartitionByRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.PartitionByRequest)
}
inline PROTOBUF_NDEBUG_INLINE PartitionByRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::PartitionByRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        key_column_names_{visibility, arena, from.key_column_names_} {}

PartitionByRequest::PartitionByRequest(
    ::google::protobuf::Arena* arena,
    const PartitionByRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PartitionByRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.table_id_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.table_id_)
                        : nullptr;
  _impl_.result_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;
  _impl_.drop_keys_ = from._impl_.drop_keys_;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.PartitionByRequest)
}
inline PROTOBUF_NDEBUG_INLINE PartitionByRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        key_column_names_{visibility, arena} {}

inline void PartitionByRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, table_id_),
           0,
           offsetof(Impl_, drop_keys_) -
               offsetof(Impl_, table_id_) +
               sizeof(Impl_::drop_keys_));
}
PartitionByRequest::~PartitionByRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.PartitionByRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PartitionByRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.table_id_;
  delete _impl_.result_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    PartitionByRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_PartitionByRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &PartitionByRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<PartitionByRequest>(),
            ::google::protobuf::Message::GetNewImpl<PartitionByRequest>(),
            ::google::protobuf::Message::GetClearImpl<PartitionByRequest>(), &PartitionByRequest::ByteSizeLong,
                &PartitionByRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(PartitionByRequest, _impl_._cached_size_),
            false,
        },
        &PartitionByRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2fpartitionedtable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* PartitionByRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 77, 2> PartitionByRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PartitionByRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::PartitionByRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool drop_keys = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PartitionByRequest, _impl_.drop_keys_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(PartitionByRequest, _impl_.drop_keys_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket table_id = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PartitionByRequest, _impl_.table_id_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PartitionByRequest, _impl_.result_id_)}},
    // repeated string key_column_names = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PartitionByRequest, _impl_.key_column_names_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket table_id = 1;
    {PROTOBUF_FIELD_OFFSET(PartitionByRequest, _impl_.table_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
    {PROTOBUF_FIELD_OFFSET(PartitionByRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string key_column_names = 3;
    {PROTOBUF_FIELD_OFFSET(PartitionByRequest, _impl_.key_column_names_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool drop_keys = 4;
    {PROTOBUF_FIELD_OFFSET(PartitionByRequest, _impl_.drop_keys_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
    "\64\0\0\20\0\0\0\0"
    "io.deephaven.proto.backplane.grpc.PartitionByRequest"
    "key_column_names"
  }},
};

PROTOBUF_NOINLINE void PartitionByRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.PartitionByRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_column_names_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.table_id_ != nullptr);
      _impl_.table_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
  }
  _impl_.drop_keys_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PartitionByRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PartitionByRequest& this_ = static_cast<const PartitionByRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PartitionByRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PartitionByRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.PartitionByRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket table_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.table_id_, this_._impl_.table_id_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          // repeated string key_column_names = 3;
          for (int i = 0, n = this_._internal_key_column_names_size(); i < n; ++i) {
            const auto& s = this_._internal_key_column_names().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.PartitionByRequest.key_column_names");
            target = stream->WriteString(3, s, target);
          }

          // bool drop_keys = 4;
          if (this_._internal_drop_keys() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_drop_keys(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.PartitionByRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PartitionByRequest::ByteSizeLong(const MessageLite& base) {
          const PartitionByRequest& this_ = static_cast<const PartitionByRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PartitionByRequest::ByteSizeLong() const {
          const PartitionByRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.PartitionByRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string key_column_names = 3;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_key_column_names().size());
              for (int i = 0, n = this_._internal_key_column_names().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_key_column_names().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket table_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.table_id_);
            }
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
          }
           {
            // bool drop_keys = 4;
            if (this_._internal_drop_keys() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PartitionByRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PartitionByRequest*>(&to_msg);
  auto& from = static_cast<const PartitionByRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.PartitionByRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_key_column_names()->MergeFrom(from._internal_key_column_names());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.table_id_ != nullptr);
      if (_this->_impl_.table_id_ == nullptr) {
        _this->_impl_.table_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.table_id_);
      } else {
        _this->_impl_.table_id_->MergeFrom(*from._impl_.table_id_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
  }
  if (from._internal_drop_keys() != 0) {
    _this->_impl_.drop_keys_ = from._impl_.drop_keys_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PartitionByRequest::CopyFrom(const PartitionByRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.PartitionByRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PartitionByRequest::InternalSwap(PartitionByRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.key_column_names_.InternalSwap(&other->_impl_.key_column_names_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartitionByRequest, _impl_.drop_keys_)
      + sizeof(PartitionByRequest::_impl_.drop_keys_)
      - PROTOBUF_FIELD_OFFSET(PartitionByRequest, _impl_.table_id_)>(
          reinterpret_cast<char*>(&_impl_.table_id_),
          reinterpret_cast<char*>(&other->_impl_.table_id_));
}

::google::protobuf::Metadata PartitionByRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PartitionByResponse::_Internal {
 public:
};

PartitionByResponse::PartitionByResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.PartitionByResponse)
}
PartitionByResponse::PartitionByResponse(
    ::google::protobuf::Arena* arena,
    const PartitionByResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PartitionByResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.PartitionByResponse)
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    PartitionByResponse::_class_data_ = {
        ::google::protobuf::internal::ZeroFieldsBase::ClassData{
            &_PartitionByResponse_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &PartitionByResponse::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::internal::ZeroFieldsBase::GetDeleteImpl<PartitionByResponse>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<PartitionByResponse>(),
            ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<PartitionByResponse>(), &PartitionByResponse::ByteSizeLong,
                &PartitionByResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(PartitionByResponse, _impl_._cached_size_),
            false,
        },
        &PartitionByResponse::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2fpartitionedtable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* PartitionByResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> PartitionByResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::PartitionByResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata PartitionByResponse::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MergeRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MergeRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MergeRequest, _impl_._has_bits_);
};

void MergeRequest::clear_partitioned_table() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.partitioned_table_ != nullptr) _impl_.partitioned_table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MergeRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MergeRequest::MergeRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.MergeRequest)
}
inline PROTOBUF_NDEBUG_INLINE MergeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::MergeRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MergeRequest::MergeRequest(
    ::google::protobuf::Arena* arena,
    const MergeRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MergeRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.partitioned_table_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.partitioned_table_)
                        : nullptr;
  _impl_.result_id_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.MergeRequest)
}
inline PROTOBUF_NDEBUG_INLINE MergeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MergeRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, partitioned_table_),
           0,
           offsetof(Impl_, result_id_) -
               offsetof(Impl_, partitioned_table_) +
               sizeof(Impl_::result_id_));
}
MergeRequest::~MergeRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.MergeRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MergeRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.partitioned_table_;
  delete _impl_.result_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    MergeRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_MergeRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &MergeRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<MergeRequest>(),
            ::google::protobuf::Message::GetNewImpl<MergeRequest>(),
            ::google::protobuf::Message::GetClearImpl<MergeRequest>(), &MergeRequest::ByteSizeLong,
                &MergeRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(MergeRequest, _impl_._cached_size_),
            false,
        },
        &MergeRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2fpartitionedtable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* MergeRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> MergeRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MergeRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::MergeRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MergeRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket partitioned_table = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MergeRequest, _impl_.partitioned_table_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket partitioned_table = 1;
    {PROTOBUF_FIELD_OFFSET(MergeRequest, _impl_.partitioned_table_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
    {PROTOBUF_FIELD_OFFSET(MergeRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MergeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.MergeRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.partitioned_table_ != nullptr);
      _impl_.partitioned_table_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MergeRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MergeRequest& this_ = static_cast<const MergeRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MergeRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MergeRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.MergeRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket partitioned_table = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.partitioned_table_, this_._impl_.partitioned_table_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.MergeRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MergeRequest::ByteSizeLong(const MessageLite& base) {
          const MergeRequest& this_ = static_cast<const MergeRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MergeRequest::ByteSizeLong() const {
          const MergeRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.MergeRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .io.deephaven.proto.backplane.grpc.Ticket partitioned_table = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.partitioned_table_);
            }
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MergeRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MergeRequest*>(&to_msg);
  auto& from = static_cast<const MergeRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.MergeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.partitioned_table_ != nullptr);
      if (_this->_impl_.partitioned_table_ == nullptr) {
        _this->_impl_.partitioned_table_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.partitioned_table_);
      } else {
        _this->_impl_.partitioned_table_->MergeFrom(*from._impl_.partitioned_table_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MergeRequest::CopyFrom(const MergeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.MergeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MergeRequest::InternalSwap(MergeRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MergeRequest, _impl_.result_id_)
      + sizeof(MergeRequest::_impl_.result_id_)
      - PROTOBUF_FIELD_OFFSET(MergeRequest, _impl_.partitioned_table_)>(
          reinterpret_cast<char*>(&_impl_.partitioned_table_),
          reinterpret_cast<char*>(&other->_impl_.partitioned_table_));
}

::google::protobuf::Metadata MergeRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetTableRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetTableRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetTableRequest, _impl_._has_bits_);
};

void GetTableRequest::clear_partitioned_table() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.partitioned_table_ != nullptr) _impl_.partitioned_table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetTableRequest::clear_key_table_ticket() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.key_table_ticket_ != nullptr) _impl_.key_table_ticket_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GetTableRequest::clear_result_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_id_ != nullptr) _impl_.result_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
GetTableRequest::GetTableRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.GetTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::GetTableRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetTableRequest::GetTableRequest(
    ::google::protobuf::Arena* arena,
    const GetTableRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetTableRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.partitioned_table_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.partitioned_table_)
                        : nullptr;
  _impl_.key_table_ticket_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.key_table_ticket_)
                        : nullptr;
  _impl_.result_id_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(
                              arena, *from._impl_.result_id_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.GetTableRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetTableRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetTableRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, partitioned_table_),
           0,
           offsetof(Impl_, result_id_) -
               offsetof(Impl_, partitioned_table_) +
               sizeof(Impl_::result_id_));
}
GetTableRequest::~GetTableRequest() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.GetTableRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetTableRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.partitioned_table_;
  delete _impl_.key_table_ticket_;
  delete _impl_.result_id_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GetTableRequest::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GetTableRequest_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &GetTableRequest::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GetTableRequest>(),
            ::google::protobuf::Message::GetNewImpl<GetTableRequest>(),
            ::google::protobuf::Message::GetClearImpl<GetTableRequest>(), &GetTableRequest::ByteSizeLong,
                &GetTableRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GetTableRequest, _impl_._cached_size_),
            false,
        },
        &GetTableRequest::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2fpartitionedtable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GetTableRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> GetTableRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetTableRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967284,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::GetTableRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(GetTableRequest, _impl_.result_id_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket partitioned_table = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetTableRequest, _impl_.partitioned_table_)}},
    // .io.deephaven.proto.backplane.grpc.Ticket key_table_ticket = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(GetTableRequest, _impl_.key_table_ticket_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .io.deephaven.proto.backplane.grpc.Ticket partitioned_table = 1;
    {PROTOBUF_FIELD_OFFSET(GetTableRequest, _impl_.partitioned_table_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Ticket key_table_ticket = 2;
    {PROTOBUF_FIELD_OFFSET(GetTableRequest, _impl_.key_table_ticket_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .io.deephaven.proto.backplane.grpc.Ticket result_id = 4;
    {PROTOBUF_FIELD_OFFSET(GetTableRequest, _impl_.result_id_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
    {::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::Ticket>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.GetTableRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.partitioned_table_ != nullptr);
      _impl_.partitioned_table_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.key_table_ticket_ != nullptr);
      _impl_.key_table_ticket_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.result_id_ != nullptr);
      _impl_.result_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetTableRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetTableRequest& this_ = static_cast<const GetTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetTableRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.GetTableRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .io.deephaven.proto.backplane.grpc.Ticket partitioned_table = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.partitioned_table_, this_._impl_.partitioned_table_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.Ticket key_table_ticket = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.key_table_ticket_, this_._impl_.key_table_ticket_->GetCachedSize(), target,
                stream);
          }

          // .io.deephaven.proto.backplane.grpc.Ticket result_id = 4;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.result_id_, this_._impl_.result_id_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.GetTableRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetTableRequest::ByteSizeLong(const MessageLite& base) {
          const GetTableRequest& this_ = static_cast<const GetTableRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetTableRequest::ByteSizeLong() const {
          const GetTableRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.GetTableRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .io.deephaven.proto.backplane.grpc.Ticket partitioned_table = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.partitioned_table_);
            }
            // .io.deephaven.proto.backplane.grpc.Ticket key_table_ticket = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.key_table_ticket_);
            }
            // .io.deephaven.proto.backplane.grpc.Ticket result_id = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_id_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetTableRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetTableRequest*>(&to_msg);
  auto& from = static_cast<const GetTableRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.GetTableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.partitioned_table_ != nullptr);
      if (_this->_impl_.partitioned_table_ == nullptr) {
        _this->_impl_.partitioned_table_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.partitioned_table_);
      } else {
        _this->_impl_.partitioned_table_->MergeFrom(*from._impl_.partitioned_table_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.key_table_ticket_ != nullptr);
      if (_this->_impl_.key_table_ticket_ == nullptr) {
        _this->_impl_.key_table_ticket_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.key_table_ticket_);
      } else {
        _this->_impl_.key_table_ticket_->MergeFrom(*from._impl_.key_table_ticket_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.result_id_ != nullptr);
      if (_this->_impl_.result_id_ == nullptr) {
        _this->_impl_.result_id_ =
            ::google::protobuf::Message::CopyConstruct<::io::deephaven::proto::backplane::grpc::Ticket>(arena, *from._impl_.result_id_);
      } else {
        _this->_impl_.result_id_->MergeFrom(*from._impl_.result_id_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetTableRequest::CopyFrom(const GetTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.GetTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetTableRequest::InternalSwap(GetTableRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTableRequest, _impl_.result_id_)
      + sizeof(GetTableRequest::_impl_.result_id_)
      - PROTOBUF_FIELD_OFFSET(GetTableRequest, _impl_.partitioned_table_)>(
          reinterpret_cast<char*>(&_impl_.partitioned_table_),
          reinterpret_cast<char*>(&other->_impl_.partitioned_table_));
}

::google::protobuf::Metadata GetTableRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PartitionedTableDescriptor::_Internal {
 public:
};

PartitionedTableDescriptor::PartitionedTableDescriptor(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE PartitionedTableDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::io::deephaven::proto::backplane::grpc::PartitionedTableDescriptor& from_msg)
      : key_column_names_{visibility, arena, from.key_column_names_},
        constituent_definition_schema_(arena, from.constituent_definition_schema_),
        constituent_column_name_(arena, from.constituent_column_name_),
        _cached_size_{0} {}

PartitionedTableDescriptor::PartitionedTableDescriptor(
    ::google::protobuf::Arena* arena,
    const PartitionedTableDescriptor& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PartitionedTableDescriptor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, unique_keys_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, unique_keys_),
           offsetof(Impl_, constituent_changes_permitted_) -
               offsetof(Impl_, unique_keys_) +
               sizeof(Impl_::constituent_changes_permitted_));

  // @@protoc_insertion_point(copy_constructor:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor)
}
inline PROTOBUF_NDEBUG_INLINE PartitionedTableDescriptor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : key_column_names_{visibility, arena},
        constituent_definition_schema_(arena),
        constituent_column_name_(arena),
        _cached_size_{0} {}

inline void PartitionedTableDescriptor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, unique_keys_),
           0,
           offsetof(Impl_, constituent_changes_permitted_) -
               offsetof(Impl_, unique_keys_) +
               sizeof(Impl_::constituent_changes_permitted_));
}
PartitionedTableDescriptor::~PartitionedTableDescriptor() {
  // @@protoc_insertion_point(destructor:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PartitionedTableDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.constituent_definition_schema_.Destroy();
  _impl_.constituent_column_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    PartitionedTableDescriptor::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_PartitionedTableDescriptor_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &PartitionedTableDescriptor::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<PartitionedTableDescriptor>(),
            ::google::protobuf::Message::GetNewImpl<PartitionedTableDescriptor>(),
            ::google::protobuf::Message::GetClearImpl<PartitionedTableDescriptor>(), &PartitionedTableDescriptor::ByteSizeLong,
                &PartitionedTableDescriptor::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(PartitionedTableDescriptor, _impl_._cached_size_),
            false,
        },
        &PartitionedTableDescriptor::kDescriptorMethods,
        &descriptor_table_deephaven_2fproto_2fpartitionedtable_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* PartitionedTableDescriptor::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 108, 2> PartitionedTableDescriptor::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::io::deephaven::proto::backplane::grpc::PartitionedTableDescriptor>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string key_column_names = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PartitionedTableDescriptor, _impl_.key_column_names_)}},
    // bool unique_keys = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PartitionedTableDescriptor, _impl_.unique_keys_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PartitionedTableDescriptor, _impl_.unique_keys_)}},
    // bytes constituent_definition_schema = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PartitionedTableDescriptor, _impl_.constituent_definition_schema_)}},
    // string constituent_column_name = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(PartitionedTableDescriptor, _impl_.constituent_column_name_)}},
    // bool constituent_changes_permitted = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PartitionedTableDescriptor, _impl_.constituent_changes_permitted_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(PartitionedTableDescriptor, _impl_.constituent_changes_permitted_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string key_column_names = 1;
    {PROTOBUF_FIELD_OFFSET(PartitionedTableDescriptor, _impl_.key_column_names_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool unique_keys = 2;
    {PROTOBUF_FIELD_OFFSET(PartitionedTableDescriptor, _impl_.unique_keys_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bytes constituent_definition_schema = 3;
    {PROTOBUF_FIELD_OFFSET(PartitionedTableDescriptor, _impl_.constituent_definition_schema_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // string constituent_column_name = 4;
    {PROTOBUF_FIELD_OFFSET(PartitionedTableDescriptor, _impl_.constituent_column_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool constituent_changes_permitted = 5;
    {PROTOBUF_FIELD_OFFSET(PartitionedTableDescriptor, _impl_.constituent_changes_permitted_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\74\20\0\0\27\0\0\0"
    "io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor"
    "key_column_names"
    "constituent_column_name"
  }},
};

PROTOBUF_NOINLINE void PartitionedTableDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_column_names_.Clear();
  _impl_.constituent_definition_schema_.ClearToEmpty();
  _impl_.constituent_column_name_.ClearToEmpty();
  ::memset(&_impl_.unique_keys_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.constituent_changes_permitted_) -
      reinterpret_cast<char*>(&_impl_.unique_keys_)) + sizeof(_impl_.constituent_changes_permitted_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PartitionedTableDescriptor::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PartitionedTableDescriptor& this_ = static_cast<const PartitionedTableDescriptor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PartitionedTableDescriptor::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PartitionedTableDescriptor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated string key_column_names = 1;
          for (int i = 0, n = this_._internal_key_column_names_size(); i < n; ++i) {
            const auto& s = this_._internal_key_column_names().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.key_column_names");
            target = stream->WriteString(1, s, target);
          }

          // bool unique_keys = 2;
          if (this_._internal_unique_keys() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_unique_keys(), target);
          }

          // bytes constituent_definition_schema = 3;
          if (!this_._internal_constituent_definition_schema().empty()) {
            const std::string& _s = this_._internal_constituent_definition_schema();
            target = stream->WriteBytesMaybeAliased(3, _s, target);
          }

          // string constituent_column_name = 4;
          if (!this_._internal_constituent_column_name().empty()) {
            const std::string& _s = this_._internal_constituent_column_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor.constituent_column_name");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // bool constituent_changes_permitted = 5;
          if (this_._internal_constituent_changes_permitted() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_constituent_changes_permitted(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PartitionedTableDescriptor::ByteSizeLong(const MessageLite& base) {
          const PartitionedTableDescriptor& this_ = static_cast<const PartitionedTableDescriptor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PartitionedTableDescriptor::ByteSizeLong() const {
          const PartitionedTableDescriptor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string key_column_names = 1;
             {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_key_column_names().size());
              for (int i = 0, n = this_._internal_key_column_names().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_key_column_names().Get(i));
              }
            }
          }
           {
            // bytes constituent_definition_schema = 3;
            if (!this_._internal_constituent_definition_schema().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_constituent_definition_schema());
            }
            // string constituent_column_name = 4;
            if (!this_._internal_constituent_column_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_constituent_column_name());
            }
            // bool unique_keys = 2;
            if (this_._internal_unique_keys() != 0) {
              total_size += 2;
            }
            // bool constituent_changes_permitted = 5;
            if (this_._internal_constituent_changes_permitted() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PartitionedTableDescriptor::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PartitionedTableDescriptor*>(&to_msg);
  auto& from = static_cast<const PartitionedTableDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_key_column_names()->MergeFrom(from._internal_key_column_names());
  if (!from._internal_constituent_definition_schema().empty()) {
    _this->_internal_set_constituent_definition_schema(from._internal_constituent_definition_schema());
  }
  if (!from._internal_constituent_column_name().empty()) {
    _this->_internal_set_constituent_column_name(from._internal_constituent_column_name());
  }
  if (from._internal_unique_keys() != 0) {
    _this->_impl_.unique_keys_ = from._impl_.unique_keys_;
  }
  if (from._internal_constituent_changes_permitted() != 0) {
    _this->_impl_.constituent_changes_permitted_ = from._impl_.constituent_changes_permitted_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PartitionedTableDescriptor::CopyFrom(const PartitionedTableDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.deephaven.proto.backplane.grpc.PartitionedTableDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PartitionedTableDescriptor::InternalSwap(PartitionedTableDescriptor* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.key_column_names_.InternalSwap(&other->_impl_.key_column_names_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.constituent_definition_schema_, &other->_impl_.constituent_definition_schema_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.constituent_column_name_, &other->_impl_.constituent_column_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartitionedTableDescriptor, _impl_.constituent_changes_permitted_)
      + sizeof(PartitionedTableDescriptor::_impl_.constituent_changes_permitted_)
      - PROTOBUF_FIELD_OFFSET(PartitionedTableDescriptor, _impl_.unique_keys_)>(
          reinterpret_cast<char*>(&_impl_.unique_keys_),
          reinterpret_cast<char*>(&other->_impl_.unique_keys_));
}

::google::protobuf::Metadata PartitionedTableDescriptor::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace backplane
}  // namespace proto
}  // namespace deephaven
}  // namespace io
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_deephaven_2fproto_2fpartitionedtable_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
