import io.deephaven.tools.docker.DiffTask

plugins {
    id 'com.bmuschko.docker-remote-api'
    id 'io.deephaven.project.register'
    id 'io.deephaven.deephaven-in-docker'
    id 'license'
}

// We use the cpp-clients-fat-base image instead of the cpp-client-base,
// so that the test tasks in py/client-ticking and R can in turn use the
// image we will generate here as a base.
// See https://github.com/deephaven/deephaven-base-images/tree/main/cpp-clients-fat
evaluationDependsOn Docker.registryProject('cpp-clients-fat-base')

configurations {
    cpp {}
}
dependencies {
    cpp project(path: ':proto:proto-backplane-grpc', configuration: 'cpp')
}
def protoSourceDir = layout.projectDirectory.dir('deephaven/dhclient/proto')
def compare = tasks.register('compareProtobuf', DiffTask) {
    expectedContents.set configurations.cpp
    actualContents.set protoSourceDir
    generateTask.set ':cpp-client:updateProtobuf'
}
// fail a "check" build if these are out of date
tasks.getByName('quick').dependsOn(compare)

tasks.register('updateProtobuf', Sync) {
    finalizedBy compare
    from configurations.cpp
    into protoSourceDir
}

license {
    header rootProject.file('license-header')
    include '**/*.h'
    include '**/*.cc'
    strictCheck true
    useDefaultMappings true
    ignoreFailures true
}
tasks.getByName('license').dependsOn(tasks.create("licensePy", com.hierynomus.gradle.license.tasks.LicenseCheck) {
    source = ['deephaven']
})
tasks.getByName('licenseFormat').dependsOn(tasks.create("licenseFormatPy", com.hierynomus.gradle.license.tasks.LicenseFormat) {
    source = ['deephaven']
})

project.tasks.getByName('quick').dependsOn project.tasks.getByName('license')

// start a grpc-api server
String randomSuffix = UUID.randomUUID().toString();
deephavenDocker {
    envVars.set([
            'START_OPTS':'-Xmx512m -DAuthHandlers=io.deephaven.auth.AnonymousAuthenticationHandler'
    ])
    containerName.set "dh-server-for-cpp-${randomSuffix}"
    networkName.set "cpp-test-network-${randomSuffix}"
}

def prefix = '/opt/deephaven'

def buildCppClientImage = Docker.registerDockerTask(project, 'cppClient') {
    // Only tested on x86-64, and we only build dependencies for x86-64
    platform = 'linux/amd64'
    copyIn {
        from(layout.projectDirectory) {
            include 'cpp-tests-to-junit.sh'
            include 'deephaven/CMakeLists.txt'
            include 'deephaven/dhcore/**'
            include 'deephaven/dhclient/**'
            include 'deephaven/examples/**'
            include 'deephaven/tests/**'
        }
    }

    dockerfile {
        // See comment at the beginning of this file for why we use this base image.
        from('deephaven/cpp-clients-fat-base:local-build')
        //
        // Build and install client.
        //
        runCommand("""mkdir -p \\
                        /out \\
                        ${prefix}/bin/dhcpp \\
                        ${prefix}/log \\
                        ${prefix}/src/deephaven/{dhcore,dhclient,examples,tests}
                   """)
        copyFile('deephaven/CMakeLists.txt',  "${prefix}/src/deephaven/")
        copyFile('deephaven/dhcore/',  "${prefix}/src/deephaven/dhcore/")
        copyFile('deephaven/dhclient/', "${prefix}/src/deephaven/dhclient/")
        copyFile('deephaven/examples/', "${prefix}/src/deephaven/examples/")
        copyFile('deephaven/tests/', "${prefix}/src/deephaven/tests/")
        copyFile('cpp-tests-to-junit.sh', "${prefix}/bin/dhcpp")
        runCommand("PREFIX=${prefix}; " +
                   '''set -eux; \\
                      rm -fr ${PREFIX}/src/deephaven/build; \\
                      mkdir -p ${PREFIX}/src/deephaven/build; \\
                      cd ${PREFIX}/src/deephaven/build; \\
                      . ${PREFIX}/env.sh; \\
                      cmake \\
                        -DCMAKE_INSTALL_PREFIX=${PREFIX} \\
                        -DCMAKE_BUILD_TYPE=Release \\
                        -DBUILD_SHARED_LIBS=ON \\
                        .. ; \\
                      make -j${NCPUS} install 2>&1 | gzip > ${PREFIX}/log/make-install.log.gz; \\
                      cp -f ${PREFIX}/src/deephaven/build/tests/tests ${PREFIX}/bin/dhcpp/tests; \\
                      cd ..; \\
                      rm -fr ${PREFIX}/src/deephaven/build
                   ''')
        // Note environment variables defined here are inherited by other images
        // using this image as a base.
        environmentVariable 'DH_PREFIX', prefix
        environmentVariable 'LD_LIBRARY_PATH', "${prefix}/lib"
    }
    parentContainers = [ Docker.registryTask(project, 'cpp-clients-fat-base') ]
}

def testCppClient = Docker.registerDockerTask(project, 'testCppClient') {
    // Only tested on x86-64, and we only build dependencies for x86-64
    platform = 'linux/amd64'
    copyIn {}
    copyOut {
        into layout.buildDirectory.dir('test-results')
    }
    dockerfile {
        from('deephaven/cpp-client:local-build')
        //
        // Setup for test run.
        //
        environmentVariable 'DH_HOST', deephavenDocker.containerName.get()
        environmentVariable 'DH_PORT', '10000'
    }
    containerDependencies.dependsOn = [deephavenDocker.healthyTask]
    containerDependencies.finalizedBy = deephavenDocker.endTask
    network = deephavenDocker.networkName.get()
    parentContainers = [ project.tasks.getByName('cppClient') ]
    entrypoint = ["${prefix}/bin/dhcpp/cpp-tests-to-junit.sh", '/out/cpp-test.xml', '/out/cpp-test.log']
}

deephavenDocker.shouldLogIfTaskFails testCppClient
tasks.check.dependsOn(testCppClient)
