plugins {
    id 'java-library'
}

apply plugin: 'base'
apply plugin: 'java'

sourceSets {
    main {
        java {
            srcDir 'java'
        }
    }

    test {
        java {
            srcDir 'test'
        }
    }
}

configurations {
    compile.extendsFrom dhKafka
}

dependencies {
    api('org.apache.httpcomponents:httpclient:4.5.13')

    // Alternative to confluent; requires source code changes for
    // different avro serializer class names.
    //   api('io.apicurio:apicurio-registry-utils-serde:1.3.2.Final')

    // Using io.confluent dependencies requires code in the toplevel build.gradle
    // to add their maven repository.
    api('io.confluent:kafka-avro-serializer:6.2.0')

    compile project(':DB')
    testCompile 'junit:junit:4.13.2'
    testCompile project(path: ':DB', configuration: 'testOutput')
    testRuntime project(path: ':configs'), project(path: ':test-configs')

    testRuntimeOnly project(':log-to-slf4j')
    testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.30'
}

def createMainExecTask = {
    taskName, mainClass -> tasks.create(taskName, JavaExec, { JavaExec task ->
        task.workingDir "$rootDir"
        task.classpath = sourceSets.main.runtimeClasspath
        task.main = mainClass
        return
    })
}

createMainExecTask('replicateKafka', 'io.deephaven.kafka.ingest.ReplicateKafka')

spotless {
    java {
        targetExclude(
                '**/**FieldCopier.java',
        )
    }
}