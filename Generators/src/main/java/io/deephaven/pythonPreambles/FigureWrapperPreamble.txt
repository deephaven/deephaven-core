
"""
A figure for creating plots.
"""

#
# Copyright (c) 2016-2021 Deephaven Data Labs and Patent Pending
#

######################################################################################################################
#               This code is auto generated. DO NOT EDIT FILE!
# Run generatePythonFigureWrapper or "./gradlew :Generators:generatePythonFigureWrapper" to generate
######################################################################################################################


import sys
import logging
import jpy
import numpy
import pandas
import wrapt

from ..conversion_utils import _isJavaType, _isStr, makeJavaArray, _ensureBoxedArray, getJavaClassObject


_plotting_convenience_ = None  # this module will be useless with no jvm
_figure_widget_ = None


def _defineSymbols():
    """
    Defines appropriate java symbols, which requires that the jvm has been initialized through the :class:`jpy` module,
    for use throughout the module AT RUNTIME. This is versus static definition upon first import, which would lead to an
    exception if the jvm wasn't initialized BEFORE importing the module.
    """

    if not jpy.has_jvm():
        raise SystemError("No java functionality can be used until the JVM has been initialized through the jpy module")

    global _plotting_convenience_, _figure_widget_
    if _plotting_convenience_ is None:
        # an exception will be raised if not in the jvm classpath
        _plotting_convenience_ = jpy.get_type("io.deephaven.plot.PlottingConvenience")
        _figure_widget_ = jpy.get_type('io.deephaven.plot.FigureWidget')


if sys.version_info[0] > 2:
    def _is_basic_type_(obj):
        return isinstance(obj, bool) or isinstance(obj, int) or isinstance(obj, float) or isinstance(obj, str)
else:
    def _is_basic_type_(obj):
        return isinstance(obj, bool) or isinstance(obj, int) or isinstance(obj, long) \
               or isinstance(obj, float) or isinstance(obj, basestring)


def _is_widget_(obj):
    if obj is None:
        return False
    cond = False
    try:
        cond = getJavaClassObject('io.deephaven.plot.FigureWidget').isAssignableFrom(obj)
    except Exception:
        pass
    return cond


def _create_java_object_(obj):
    if obj is None:
        return None
    elif isinstance(obj, FigureWrapper) or _isJavaType(obj):
        # nothing to be done
        return obj
    elif _is_basic_type_(obj):
        # jpy will (*should*) convert this properly
        return obj
    elif isinstance(obj, numpy.ndarray) or isinstance(obj, pandas.Series) or isinstance(obj, pandas.Categorical):
        return makeJavaArray(obj, 'unknown', False)
    elif isinstance(obj, dict):
        return obj  # what would we do?
    elif isinstance(obj, list) or isinstance(obj, tuple):
        return _create_java_object_(numpy.array(obj))  # maybe it's better to pass it straight through?
    elif hasattr(obj, '__iter__'):
        # return _create_java_object_(numpy.array(list(obj))) # this is suspect
        return obj
    else:
        # I have no idea what it is - just pass it straight through
        return obj


def _convert_arguments_(args):
    return [_create_java_object_(el) for el in args]


@wrapt.decorator
def _convertArguments(wrapped, instance, args, kwargs):
    """
    For decoration of FigureWrapper class methods, to convert arguments as necessary

    :param wrapped: the method to be decorated
    :param instance: the object to which the wrapped function was bound when it was called
    :param args: the argument list for `wrapped`
    :param kwargs: the keyword argument dictionary for `wrapped`
    :return: the decorated version of the method
    """

    return wrapped(*_convert_arguments_(args))


@wrapt.decorator
def _convertCatPlotArguments(wrapped, instance, args, kwargs):
    """
    For decoration of FigureWrapper catPlot, catErrorBar, piePlot method, to convert arguments

    :param wrapped: the method to be decorated
    :param instance: the object to which the wrapped function was bound when it was called
    :param args: the argument list for `wrapped`
    :param kwargs: the keyword argument dictionary for `wrapped`
    :return: the decorated version of the method
    """

    cargs = _convert_arguments_(args)
    cargs[1] = _ensureBoxedArray(cargs[1])  # the category field must extend Number (i.e. be boxed)
    return wrapped(*cargs)


class FigureWrapper(object):
    """
    Class which assembles a variety of plotting convenience methods into a single usable package
    """

    def __init__(self, *args, **kwargs):
        _defineSymbols()
        figure = kwargs.get('figure', None)
        if figure is None:
            figure = _plotting_convenience_.figure(*_convert_arguments_(args))
        self._figure = figure
        self._valid_groups = None

    @property
    def figure(self):
        """The underlying java Figure object"""
        return self._figure

    @property
    def widget(self):
        """The FigureWidget, if applicable. It will be `None` if .show() has NOT been called."""

        if _is_widget_(self.figure.getClass()):
            return self.figure
        return None

    @property
    def validGroups(self):
        """The collection, (actually java array), of valid users"""
        return _create_java_object_(self._valid_groups)

    @validGroups.setter
    def validGroups(self, groups):
        if groups is None:
            self._valid_groups = None
        elif _isStr(groups):
            self._valid_groups = [groups, ]
        else:
            try:
                self._valid_groups = list(groups)  # any other iterable will become a list
            except Exception as e:
                logging.error("Failed to set validGroups using input {} with exception {}".format(groups, e))

    def show(self):
        """
        Wraps the figure in a figure widget for display
        :return: FigureWrapper with figure attribute set to applicable widget
        """

        return FigureWrapper(figure=self._figure.show())

    def getWidget(self):
        """
        Get figure widget, if applicable. It will be `None` if .show() has NOT been called.
        :return: None or the widget reference
        """

        return self.widget

    def getValidGroups(self):
        """
        Get the collection of valid users
        :return: java array of user id strings
        """

        return self.validGroups

    def setValidGroups(self, groups):
        """
        Set the list of user ids which should have access to this figure wrapper object
        :param groups: None, single user id string, or list of user id strings
        """

        self.validGroups = groups

