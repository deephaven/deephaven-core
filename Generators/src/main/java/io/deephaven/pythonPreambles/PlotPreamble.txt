
"""
Utilities for creating plots.
"""

#
# Copyright (c) 2016-2021 Deephaven Data Labs and Patent Pending
#

####################################################################################
#               This code is auto generated. DO NOT EDIT FILE!
# Run generatePythonFigureWrapper or
# "./gradlew :Generators:generatePythonFigureWrapper" to generate
####################################################################################


import jpy
import wrapt
from .figure_wrapper import FigureWrapper, _convert_arguments_


_plotting_convenience_ = None  # this module will be useless with no jvm


def _defineSymbols():
    """
    Defines appropriate java symbol, which requires that the jvm has been initialized through the :class:`jpy` module,
    for use throughout the module AT RUNTIME. This is versus static definition upon first import, which would lead to an
    exception if the jvm wasn't initialized BEFORE importing the module.
    """

    if not jpy.has_jvm():
        raise SystemError("No java functionality can be used until the JVM has been initialized through the jpy module")

    global _plotting_convenience_
    if _plotting_convenience_ is None:
        # an exception will be raised if not in the jvm classpath
        _plotting_convenience_ = jpy.get_type("io.deephaven.plot.PlottingConvenience")


@wrapt.decorator
def _convertArguments(wrapped, instance, args, kwargs):
    """
    For decoration of FigureWrapper class methods, to convert arguments as necessary

    :param wrapped: the method to be decorated
    :param instance: the object to which the wrapped function was bound when it was called
    :param args: the argument list for `wrapped`
    :param kwargs: the keyword argument dictionary for `wrapped`
    :return: the decorated version of the method
    """

    _defineSymbols()
    return wrapped(*_convert_arguments_(args))


# Define all of our functionality, if currently possible
try:
    _defineSymbols()
except Exception as e:
    pass

def colorTable():
    """
    Returns a table which visualizes all of the named colors.

    :return: table which visualizes all of the named colors.
    """

    from deephaven.TableTools import emptyTable
    return emptyTable(1) \
            .updateView("Colors = colorNames()") \
            .ungroup() \
            .updateView("Paint = io.deephaven.gui.color.Color.color(Colors).javaColor()") \
            .formatColumns("Colors = io.deephaven.engine.util.ColorUtil.bgfga(Paint.getRed(), Paint.getGreen(), Paint.getBlue())") \
            .dropColumns("Paint")

