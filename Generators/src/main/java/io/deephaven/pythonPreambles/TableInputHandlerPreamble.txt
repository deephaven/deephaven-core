#
# Copyright (c) 2016-2021 Deephaven Data Labs and Patent Pending
#

##############################################################################
# This code is auto generated. DO NOT EDIT FILE!
# Run "./gradlew :Generators:generatePythonIntegrationStaticMethods" to generate
##############################################################################
"""
TableInputHandler methods for assisting in LiveInputTable construction.

Note that methods `c` and `cKey` take one or more optional attributes arguments. Each attribute
is constructed to limit allowable values for the column. Providing more than one attribute
limits the allowable values for the column to the union of the attributes.

An attribute is constructed by:
    >>> attribute = TableInputHandler.ColumnConfigAttribute(value1, value2, value3)
or
    >>> attribute = TableInputHandler.ColumnConfigAttribute(values)
where `values` is a list, tuple, numpy.ndarray, or boxed java array of allowable values.

Note that in calling
    >>> TableInputHandler.c(name, type, *attributes)
The type of the entries in attributes MUST be compatible with `type` and the boxed version.
To ensure this compatibility for primitive values, provide the values for the attribute by converting
a numpy array of appropriate type in the following way:

* `type`='double', values = deephaven.convertToJavaArray(<numpy array of dtype=float64>, boxed=True)

* `type`='float', values = deephaven.convertToJavaArray(<numpy array of dtype=float32>, boxed=True)

* `type`='long', values = deephaven.convertToJavaArray(<numpy array of dtype=int64>, boxed=True)

* `type`='int', values = deephaven.convertToJavaArray(<numpy array of dtype=int32>, boxed=True)

* `type`='short', values = deephaven.convertToJavaArray(<numpy array of dtype=int16>, boxed=True)

* `type`='byte', values = deephaven.convertToJavaArray(<numpy array of dtype=int8>, boxed=True)
"""

import jpy
import wrapt
from ..conversion_utils import _isStr, getJavaClassObject


_java_type_ = None  # None until the first _defineSymbols() call
_Enum_Values_ = None


def _defineSymbols():
    """
    Defines appropriate java symbol, which requires that the jvm has been initialized through the :class:`jpy` module,
    for use throughout the module AT RUNTIME. This is versus static definition upon first import, which would lead to an
    exception if the jvm wasn't initialized BEFORE importing the module.
    """

    if not jpy.has_jvm():
        raise SystemError("No java functionality can be used until the JVM has been initialized through the jpy module")

    global _java_type_, _Enum_Values_
    if _java_type_ is None:
        # This will raise an exception if the desired object is not the classpath
        _java_type_ = jpy.get_type("io.deephaven.engine.util.config.TableInputHandler")
        _Enum_Values_ = jpy.get_type("io.deephaven.engine.util.config.TableInputHandler$EnumValues")


# every module method should be decorated with @_passThrough
@wrapt.decorator
def _passThrough(wrapped, instance, args, kwargs):
    """
    For decoration of module methods, to define necessary symbols at runtime

    :param wrapped: the method to be decorated
    :param instance: the object to which the wrapped function was bound when it was called
    :param args: the argument list for `wrapped`
    :param kwargs: the keyword argument dictionary for `wrapped`
    :return: the decorated version of the method
    """

    _defineSymbols()
    return wrapped(*args, **kwargs)


@_passThrough
def ColumnConfigAttribute(*args):
    """Create an allowable set of items to select from for the particular column."""
    # NB: we may need to try with typing here, but it must be
    #     consistent with type in `c` or `cKey` call.
    return _Enum_Values_.EnumValues(*args)


def _custom_c(name, type, *attributes):
    if _isStr(type):
        type = getJavaClassObject(type)
    return _java_type_.c(name, type, *attributes)


def _custom_cKey(name, type, *attributes):
    if _isStr(type):
        type = getJavaClassObject(type)
    return _java_type_.cKey(name, type, *attributes)


def _custom_getRestrictedColumnNames():
    return list(_java_type_.getRestrictedColumnNames().toArray())


# Define all of our functionality, if currently possible
try:
    _defineSymbols()
except Exception as e:
    pass


