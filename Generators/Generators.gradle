plugins {
    id 'com.bmuschko.docker-remote-api'
    id 'io.deephaven.project.register'
}

evaluationDependsOn Docker.registryProject('python')

configurations {
    implementation.extendsFrom jdom
    testImplementation.extendsFrom fishBaseTest
    combinedJavadoc
}

dependencies {
    implementation project(':engine-table')
    implementation project(':Plot')
    implementation project(':extensions-csv')
    implementation project(':extensions-kafka')
    implementation project(':extensions-parquet-table')
    implementation depTrove3

    Classpaths.inheritGroovy(project, 'groovy', 'implementation')
    Classpaths.inheritGroovy(project, 'groovy-json', 'implementation')

    runtimeOnly project(path: ':configs')
    runtimeOnly project(path: ':test-configs')
    runtimeOnly project(':extensions-kafka')

    runtimeOnly project(':log-to-slf4j')
    Classpaths.inheritLogbackClassic(project)

    testRuntimeOnly project(path: ':configs')
    testRuntimeOnly project(path: ':test-configs')

    combinedJavadoc project(path: ':combined-javadoc', targetConfiguration: 'combinedJavadoc')
}

def dataDir = "$rootDir/tmp/workspace"
def workDir = "$rootDir/.."
String devRoot = rootDir.absolutePath

task groovyStaticImportGenerator(type: JavaExec, dependsOn: 'classes') {
    description 'Run GroovyStaticImportGenerator'

    main = 'io.deephaven.libs.GroovyStaticImportGenerator'
    args devRoot, 'false'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
}

task groovyStaticImportGeneratorAssert(type: JavaExec, dependsOn: 'classes') {
    description 'Run GroovyStaticImportGenerator to assert that the generated code has not changed'

    main = 'io.deephaven.libs.GroovyStaticImportGenerator'
    args devRoot, 'true'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    onlyIf { System.getenv('NO_ASSERT') != 'true' }

}

task generateAxesPlotMethods(type: JavaExec, dependsOn: 'classes') {
    description 'Run GenerateAxesPlotMethods'

    main = 'io.deephaven.plot.util.GenerateAxesPlotMethods'
    args devRoot, 'false'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'deephaven.dataDir', dataDir
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
}

task generateAxesPlotMethodsAssert(type: JavaExec, dependsOn: 'classes') {
    description 'Run GenerateAxesPlotMethods to assert that the generated code has not changed'

    main = 'io.deephaven.plot.util.GenerateAxesPlotMethods'
    args devRoot, 'true'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'deephaven.dataDir', dataDir
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
    onlyIf { System.getenv('NO_ASSERT') != 'true' }
}

task generateMultiSeries(type: JavaExec, dependsOn: 'classes') {
    description 'Run GenerateMultiSeries'

    main = 'io.deephaven.plot.util.GenerateMultiSeries'
    args devRoot, 'false'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'deephaven.dataDir', dataDir
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
}

task generateMultiSeriesAssert(type: JavaExec, dependsOn: 'classes') {
    description 'Run GenerateMultiSeries to assert that the generated code has not changed'

    main = 'io.deephaven.plot.util.GenerateMultiSeries'
    args devRoot, 'true'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'deephaven.dataDir', dataDir
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
    onlyIf { System.getenv('NO_ASSERT') != 'true' }
}

task generateFigureImmutable(type: JavaExec, dependsOn: 'classes') {
    description 'Run GenerateFigureImmutable'
    dependsOn generateAxesPlotMethods, generateMultiSeries

    main = 'io.deephaven.plot.util.GenerateFigureImmutable'
    args devRoot, 'false'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'deephaven.dataDir', dataDir
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
}

task generateFigureImmutableAssert(type: JavaExec, dependsOn: 'classes') {
    description 'Run GenerateFigureImmutable to assert that the generated code has not changed'
    dependsOn generateAxesPlotMethodsAssert, generateMultiSeriesAssert

    main = 'io.deephaven.plot.util.GenerateFigureImmutable'
    args devRoot, 'true'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'deephaven.dataDir', dataDir
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
    onlyIf { System.getenv('NO_ASSERT') != 'true' }
}

task generatePlottingConvenience(type: JavaExec, dependsOn: 'classes') {
    description 'Run GeneratePlottingConvenience'
    dependsOn generateFigureImmutable

    main = 'io.deephaven.plot.util.GeneratePlottingConvenience'
    args devRoot
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'deephaven.dataDir', dataDir
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
}

task generatePlottingConvenienceAssert(type: JavaExec, dependsOn: 'classes') {
    description 'Run GeneratePlottingConvenience to assert that the generated code has not changed'
    dependsOn generateFigureImmutableAssert

    main = 'io.deephaven.plot.util.GeneratePlottingConvenience'
    args devRoot, 'true'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'deephaven.dataDir', dataDir
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
}

task generatePythonFigureWrapper(type: JavaExec, dependsOn: 'classes') {
    description 'Run GeneratePythonFigureWrapper'
    dependsOn generatePlottingConvenience

    main = 'io.deephaven.plot.util.GeneratePyV2FigureAPI'
    args devRoot, 'false'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'deephaven.dataDir', dataDir
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
    dependsOn ':Generators:generateFigureImmutable'
}

task generatePythonFigureWrapperAssert(type: JavaExec, dependsOn: 'classes') {
    description 'Run GeneratePythonFigureWrapper'
    dependsOn generatePlottingConvenienceAssert

    main = 'io.deephaven.plot.util.GeneratePyV2FigureAPI'
    args devRoot, 'true'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'deephaven.dataDir', dataDir
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
}

tasks.register 'generateAllPython', {
    Task t -> t.dependsOn ':Generators:generatePythonFigureWrapper'
}


tasks.register 'generateAllPythonAssert', {
    Task t -> t.dependsOn ':Generators:generatePythonFigureWrapperAssert'
}

tasks.register 'generateAll', {
    Task t -> t.dependsOn  ':Generators:groovyStaticImportGenerator',
                           ':Generators:generateAxesPlotMethods',
                           ':Generators:generateMultiSeries',
                           ':Generators:generateFigureImmutable',
                           ':Generators:generatePlottingConvenience',
                           ':Generators:generateAllPython'

    t.group = '~Deephaven'
    t.description = 'Runs all code generators'
}

project.tasks.getByName('quick').dependsOn groovyStaticImportGeneratorAssert,
        generateAxesPlotMethodsAssert,
        generateMultiSeriesAssert,
        generateFigureImmutableAssert,
        generatePlottingConvenienceAssert,
        generateAllPythonAssert,
        generatePythonFigureWrapperAssert
