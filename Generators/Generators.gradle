plugins {
    id 'com.bmuschko.docker-remote-api'
    id 'io.deephaven.project.register'
}

evaluationDependsOn Docker.registryProject('python')

configurations {
    compile.extendsFrom fishConfig, jdom
    testCompile.extendsFrom fishBaseTest
    combinedJavadoc
}

dependencies {
    compile project(':engine-table'),
            project(':Plot'),
            project(':extensions-csv'),
            project(':extensions-kafka'),
            project(':extensions-parquet-table')

    Classpaths.inheritGroovy(project, 'groovy', 'implementation')
    Classpaths.inheritGroovy(project, 'groovy-json', 'implementation')

    runtime project(path: ':configs'),
            project(path: ':test-configs'),
            project(':extensions-kafka')

    runtimeOnly project(':log-to-slf4j')
    Classpaths.inheritLogbackClassic(project)

    testRuntime project(path: ':configs'),
            project(path: ':test-configs')

    combinedJavadoc project(path: ':combined-javadoc', targetConfiguration: 'combinedJavadoc')
}

def workspace = "$rootDir/tmp/workspace"
def workDir = "$rootDir/.."
String devRoot = rootDir.absolutePath

def groovyStaticImportGenerator = project.tasks.register('groovyStaticImportGenerator', JavaExec) {
    description 'Run GroovyStaticImportGenerator'
    dependsOn project.tasks.named('classes')

    main = 'io.deephaven.libs.GroovyStaticImportGenerator'
    args devRoot, 'false'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
}

def groovyStaticImportGeneratorAssert = project.tasks.register('groovyStaticImportGeneratorAssert', JavaExec) {
    description 'Run GroovyStaticImportGenerator to assert that the generated code has not changed'
    dependsOn project.tasks.named('classes')

    main = 'io.deephaven.libs.GroovyStaticImportGenerator'
    args devRoot, 'true'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    onlyIf { System.getenv('NO_ASSERT') != 'true' }
}

def generateAxesPlotMethods = project.tasks.register('generateAxesPlotMethods', JavaExec) {
    description 'Run GenerateAxesPlotMethods'
    dependsOn project.tasks.named('classes')

    main = 'io.deephaven.plot.util.GenerateAxesPlotMethods'
    args devRoot, 'false'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'workspace', workspace
    systemProperty 'devroot', devRoot
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
}

def generateAxesPlotMethodsAssert = project.tasks.register('generateAxesPlotMethodsAssert', JavaExec) {
    description 'Run GenerateAxesPlotMethods to assert that the generated code has not changed'
    dependsOn project.tasks.named('classes')

    main = 'io.deephaven.plot.util.GenerateAxesPlotMethods'
    args devRoot, 'true'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'workspace', workspace
    systemProperty 'devroot', devRoot
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
    onlyIf { System.getenv('NO_ASSERT') != 'true' }
}

def generateMultiSeries = project.tasks.register('generateMultiSeries', JavaExec) {
    description 'Run GenerateMultiSeries'
    dependsOn project.tasks.named('classes')

    main = 'io.deephaven.plot.util.GenerateMultiSeries'
    args devRoot, 'false'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'workspace', workspace
    systemProperty 'devroot', devRoot
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
}

def generateMultiSeriesAssert = project.tasks.register('generateMultiSeriesAssert', JavaExec) {
    description 'Run GenerateMultiSeries to assert that the generated code has not changed'
    dependsOn project.tasks.named('classes')

    main = 'io.deephaven.plot.util.GenerateMultiSeries'
    args devRoot, 'true'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'workspace', workspace
    systemProperty 'devroot', devRoot
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
    onlyIf { System.getenv('NO_ASSERT') != 'true' }
}

def generateFigureImmutable = project.tasks.register('generateFigureImmutable', JavaExec) {
    description 'Run GenerateFigureImmutable'
    dependsOn generateAxesPlotMethods, generateMultiSeries, project.tasks.named('classes')

    main = 'io.deephaven.plot.util.GenerateFigureImmutable'
    args devRoot, 'false'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'workspace', workspace
    systemProperty 'devroot', devRoot
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
}

def generateFigureImmutableAssert = project.tasks.register('generateFigureImmutableAssert', JavaExec) {
    description 'Run GenerateFigureImmutable to assert that the generated code has not changed'
    dependsOn generateAxesPlotMethodsAssert, generateMultiSeriesAssert, project.tasks.named('classes')

    main = 'io.deephaven.plot.util.GenerateFigureImmutable'
    args devRoot, 'true'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'workspace', workspace
    systemProperty 'devroot', devRoot
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
    onlyIf { System.getenv('NO_ASSERT') != 'true' }
}

def generatePlottingConvenience = project.tasks.register('generatePlottingConvenience', JavaExec) {
    description 'Run GeneratePlottingConvenience'
    dependsOn generateFigureImmutable, project.tasks.named('classes')

    main = 'io.deephaven.plot.util.GeneratePlottingConvenience'
    args devRoot
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'workspace', workspace
    systemProperty 'devroot', devRoot
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
}

def generatePlottingConvenienceAssert = project.tasks.register('generatePlottingConvenienceAssert', JavaExec) {
    description 'Run GeneratePlottingConvenience to assert that the generated code has not changed'
    dependsOn generateFigureImmutableAssert, project.tasks.named('classes')

    main = 'io.deephaven.plot.util.GeneratePlottingConvenience'
    args devRoot, 'true'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'workspace', workspace
    systemProperty 'devroot', devRoot
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
}

def generatePythonFigureWrapper = project.tasks.register('generatePythonFigureWrapper', JavaExec) {
    description 'Run GeneratePythonFigureWrapper'
    dependsOn generatePlottingConvenience, generateFigureImmutable, project.tasks.named('classes')

    main = 'io.deephaven.plot.util.GeneratePyV2FigureAPI'
    args devRoot, 'false'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'workspace', workspace
    systemProperty 'devroot', devRoot
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
}

def generatePythonFigureWrapperAssert = project.tasks.register('generatePythonFigureWrapperAssert', JavaExec) {
    description 'Run GeneratePythonFigureWrapper'
    dependsOn generatePlottingConvenienceAssert, project.tasks.named('classes')

    main = 'io.deephaven.plot.util.GeneratePyV2FigureAPI'
    args devRoot, 'true'
    classpath = sourceSets.main.runtimeClasspath
    workingDir = workDir
    systemProperty 'workspace', workspace
    systemProperty 'devroot', devRoot
    systemProperty 'Configuration.rootFile', 'dh-defaults.prop'
}

tasks.register('generateAllPython') {
    dependsOn generatePythonFigureWrapper
}

tasks.register('generateAllPythonAssert') {
    dependsOn generatePythonFigureWrapperAssert
}

tasks.register('generateAll') {
    dependsOn groovyStaticImportGenerator,
            generateAxesPlotMethods,
            generateMultiSeries,
            generateFigureImmutable,
            generatePlottingConvenience,
            generateAllPython

    group = '~Deephaven'
    description = 'Runs all code generators'
}

project.tasks.named('quick').configure {
    dependsOn groovyStaticImportGeneratorAssert,
            generateAxesPlotMethodsAssert,
            generateMultiSeriesAssert,
            generateFigureImmutableAssert,
            generatePlottingConvenienceAssert,
            generateAllPythonAssert,
            generatePythonFigureWrapperAssert
}
