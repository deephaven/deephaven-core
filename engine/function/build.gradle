plugins {
    id 'java-library'
    id 'io.deephaven.project.register'
}

description 'Engine Functions: Libraries for use in query expressions'

configurations {
    primitiveCodegen
    testCompile.extendsFrom junit
}

dependencies {
    primitiveCodegen project(":codegen")

    api 'net.sf.trove4j:trove4j:3.0.3',
            project(':Util'),
            project(':engine-vector')

    testImplementation TestTools.projectDependency(project, 'Base')
}

ext {
    //todo fix excludes
    spotlessExcludes = [
            '**/*Boolean*Primitives.java',
            '**/*Byte*Primitives.java',
            '**/*Char*Primitives.java',
            '**/*Short*Primitives.java',
            '**/*Int*Primitives.java',
            '**/*Long*Primitives.java',
            '**/*Float*Primitives.java',
            '**/*Double*Primitives.java',
            '**/*Object*Primitives.java',
    ]
}

spotless {
    java {
        targetExclude spotlessExcludes
    }
}


//////////////// Code Generation ////////////////

// task to clean up generated files
task cleanGen(type:Delete)

def gencode(name, template, output) {

    task(name, type: JavaExec) {
        main = 'io.deephaven.generator.primitivetemplate.CodeGenerator'
        classpath = configurations.primitiveCodegen
        args = [template, output]
        inputs.file template
        outputs.file output
    }

    compileJava.dependsOn(name)
    spotlessExcludes.add output

    cleanGen {
        delete output
    }
}

gencode "GenPrimitivesBasic", 'src/templates/Basic.ftl', 'src/main/java/io/deephaven/querylibrary/Basic.java'
gencode "GenPrimitivesBasicTest", 'src/templates/TestBasic.ftl', 'src/test/java/io/deephaven/querylibrary/TestBasic.java'
gencode "GenPrimitivesCast", 'src/templates/Cast.ftl', 'src/main/java/io/deephaven/querylibrary/Cast.java'
gencode "GenPrimitivesCastTest", 'src/templates/TestCast.ftl', 'src/test/java/io/deephaven/querylibrary/TestCast.java'
gencode "GenPrimitivesBinSearch", 'src/templates/BinSearch.ftl', 'src/main/java/io/deephaven/querylibrary/BinSearch.java'
gencode "GenPrimitivesBinSearchTest", 'src/templates/TestBinSearch.ftl', 'src/test/java/io/deephaven/querylibrary/TestBinSearch.java'
gencode "GenPrimitivesSort", 'src/templates/Sort.ftl', 'src/main/java/io/deephaven/querylibrary/Sort.java'
gencode "GenPrimitivesSortTest", 'src/templates/TestSort.ftl', 'src/test/java/io/deephaven/querylibrary/TestSort.java'
gencode "GenPrimitivesNumeric", 'src/templates/Numeric.ftl', 'src/main/java/io/deephaven/querylibrary/Numeric.java'
gencode "GenPrimitivesNumericTest", 'src/templates/TestNumeric.ftl', 'src/test/java/io/deephaven/querylibrary/TestNumeric.java'


task printSourceSetInformation(){
    doLast{
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            print "-->Excludes: " + srcSet.allJava.excludes + "\n"
            println ""
        }
    }
}
