// DO NOT EDIT THIS CLASS, AUTOMATICALLY GENERATED BY io.deephaven.replicators.ReplicateTypedHashers
// Copyright (c) 2016-2022 Deephaven Data Labs and Patent Pending
//
package io.deephaven.engine.table.impl.by.typed.staticagg.gen;

import io.deephaven.chunk.ChunkType;
import io.deephaven.engine.table.ColumnSource;
import io.deephaven.engine.table.impl.by.StaticChunkedOperatorAggregationStateManagerTypedBase;
import java.util.Arrays;

/**
 * The TypedHashDispatcher returns a pre-generated and precompiled hasher instance suitable for the provided column sources, or null if there is not a precompiled hasher suitable for the specified sources. */
public class TypedHashDispatcher {
    private TypedHashDispatcher() {
        // static use only
    }

    public static StaticChunkedOperatorAggregationStateManagerTypedBase dispatch(ColumnSource[] tableKeySources,
            int tableSize, double maximumLoadFactor, double targetLoadFactor) {
        final ChunkType[] chunkTypes = Arrays.stream(tableKeySources).map(ColumnSource::getChunkType).toArray(ChunkType[]::new);;
        if (chunkTypes.length == 1) {
            return dispatchSingle(chunkTypes[0], tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
        }
        if (chunkTypes.length == 2) {
            return dispatchDouble(chunkTypes[0], chunkTypes[1], tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
        }
        return null;
    }

    private static StaticChunkedOperatorAggregationStateManagerTypedBase dispatchSingle(ChunkType chunkType,
            ColumnSource[] tableKeySources, int tableSize, double maximumLoadFactor,
            double targetLoadFactor) {
        switch (chunkType) {
            default: throw new UnsupportedOperationException("Invalid chunk type for typed hashers: " + chunkType);
            case Char: return new StaticAggHasherChar(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
            case Byte: return new StaticAggHasherByte(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
            case Short: return new StaticAggHasherShort(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
            case Int: return new StaticAggHasherInt(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
            case Long: return new StaticAggHasherLong(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
            case Float: return new StaticAggHasherFloat(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
            case Double: return new StaticAggHasherDouble(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
            case Object: return new StaticAggHasherObject(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
        }
    }

    private static StaticChunkedOperatorAggregationStateManagerTypedBase dispatchDouble(ChunkType chunkType0,
            ChunkType chunkType1, ColumnSource[] tableKeySources, int tableSize,
            double maximumLoadFactor, double targetLoadFactor) {
        switch (chunkType0) {
            default: throw new UnsupportedOperationException("Invalid chunk type for typed hashers: " + chunkType0);
            case Char:switch (chunkType1) {
                default: throw new UnsupportedOperationException("Invalid chunk type for typed hashers: " + chunkType1);
                case Char: return new StaticAggHasherCharChar(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Byte: return new StaticAggHasherCharByte(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Short: return new StaticAggHasherCharShort(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Int: return new StaticAggHasherCharInt(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Long: return new StaticAggHasherCharLong(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Float: return new StaticAggHasherCharFloat(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Double: return new StaticAggHasherCharDouble(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Object: return new StaticAggHasherCharObject(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
            }
            case Byte:switch (chunkType1) {
                default: throw new UnsupportedOperationException("Invalid chunk type for typed hashers: " + chunkType1);
                case Char: return new StaticAggHasherByteChar(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Byte: return new StaticAggHasherByteByte(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Short: return new StaticAggHasherByteShort(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Int: return new StaticAggHasherByteInt(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Long: return new StaticAggHasherByteLong(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Float: return new StaticAggHasherByteFloat(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Double: return new StaticAggHasherByteDouble(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Object: return new StaticAggHasherByteObject(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
            }
            case Short:switch (chunkType1) {
                default: throw new UnsupportedOperationException("Invalid chunk type for typed hashers: " + chunkType1);
                case Char: return new StaticAggHasherShortChar(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Byte: return new StaticAggHasherShortByte(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Short: return new StaticAggHasherShortShort(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Int: return new StaticAggHasherShortInt(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Long: return new StaticAggHasherShortLong(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Float: return new StaticAggHasherShortFloat(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Double: return new StaticAggHasherShortDouble(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Object: return new StaticAggHasherShortObject(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
            }
            case Int:switch (chunkType1) {
                default: throw new UnsupportedOperationException("Invalid chunk type for typed hashers: " + chunkType1);
                case Char: return new StaticAggHasherIntChar(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Byte: return new StaticAggHasherIntByte(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Short: return new StaticAggHasherIntShort(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Int: return new StaticAggHasherIntInt(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Long: return new StaticAggHasherIntLong(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Float: return new StaticAggHasherIntFloat(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Double: return new StaticAggHasherIntDouble(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Object: return new StaticAggHasherIntObject(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
            }
            case Long:switch (chunkType1) {
                default: throw new UnsupportedOperationException("Invalid chunk type for typed hashers: " + chunkType1);
                case Char: return new StaticAggHasherLongChar(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Byte: return new StaticAggHasherLongByte(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Short: return new StaticAggHasherLongShort(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Int: return new StaticAggHasherLongInt(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Long: return new StaticAggHasherLongLong(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Float: return new StaticAggHasherLongFloat(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Double: return new StaticAggHasherLongDouble(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Object: return new StaticAggHasherLongObject(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
            }
            case Float:switch (chunkType1) {
                default: throw new UnsupportedOperationException("Invalid chunk type for typed hashers: " + chunkType1);
                case Char: return new StaticAggHasherFloatChar(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Byte: return new StaticAggHasherFloatByte(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Short: return new StaticAggHasherFloatShort(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Int: return new StaticAggHasherFloatInt(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Long: return new StaticAggHasherFloatLong(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Float: return new StaticAggHasherFloatFloat(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Double: return new StaticAggHasherFloatDouble(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Object: return new StaticAggHasherFloatObject(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
            }
            case Double:switch (chunkType1) {
                default: throw new UnsupportedOperationException("Invalid chunk type for typed hashers: " + chunkType1);
                case Char: return new StaticAggHasherDoubleChar(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Byte: return new StaticAggHasherDoubleByte(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Short: return new StaticAggHasherDoubleShort(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Int: return new StaticAggHasherDoubleInt(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Long: return new StaticAggHasherDoubleLong(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Float: return new StaticAggHasherDoubleFloat(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Double: return new StaticAggHasherDoubleDouble(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Object: return new StaticAggHasherDoubleObject(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
            }
            case Object:switch (chunkType1) {
                default: throw new UnsupportedOperationException("Invalid chunk type for typed hashers: " + chunkType1);
                case Char: return new StaticAggHasherObjectChar(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Byte: return new StaticAggHasherObjectByte(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Short: return new StaticAggHasherObjectShort(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Int: return new StaticAggHasherObjectInt(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Long: return new StaticAggHasherObjectLong(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Float: return new StaticAggHasherObjectFloat(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Double: return new StaticAggHasherObjectDouble(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
                case Object: return new StaticAggHasherObjectObject(tableKeySources, tableSize, maximumLoadFactor, targetLoadFactor);
            }
        }
    }
}
