/*
 * Copyright (c) 2016-2021 * Deephaven Data Labs and Patent Pending GENERATED CODE - DO NOT MODIFY DIRECTLY This class
 * generated by io.deephaven.engine.table.impl.lang.QueryLanguageFunctionGenerator
 */

package io.deephaven.engine.table.impl.lang;

import io.deephaven.util.QueryConstants;

import junit.framework.TestCase;

import static io.deephaven.engine.table.impl.lang.QueryLanguageFunctionUtils.*;

import java.math.BigDecimal;
import java.math.BigInteger;

@SuppressWarnings({"unused", "WeakerAccess", "NumericOverflow"})
public final class TestQueryLanguageFunctionUtils extends TestCase {

    public static void test_plus_int_int() {
        final int value1 = 42;
        final int value2 = 42;
        final int zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_int_double() {
        final int value1 = 42;
        final double value2 = 42d;
        final int zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_int_long() {
        final int value1 = 42;
        final long value2 = 42L;
        final int zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_int_float() {
        final int value1 = 42;
        final float value2 = 42f;
        final int zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_int_char() {
        final int value1 = 42;
        final char value2 = '0';
        final int zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_int_byte() {
        final int value1 = 42;
        final byte value2 = (byte) 42;
        final int zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_int_short() {
        final int value1 = 42;
        final short value2 = (short) 42;
        final int zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_double_int() {
        final double value1 = 42d;
        final int value2 = 42;
        final double zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_double_double() {
        final double value1 = 42d;
        final double value2 = 42d;
        final double zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_double_long() {
        final double value1 = 42d;
        final long value2 = 42L;
        final double zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_double_float() {
        final double value1 = 42d;
        final float value2 = 42f;
        final double zero1 = 0;
        final float zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_double_char() {
        final double value1 = 42d;
        final char value2 = '0';
        final double zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_double_byte() {
        final double value1 = 42d;
        final byte value2 = (byte) 42;
        final double zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_double_short() {
        final double value1 = 42d;
        final short value2 = (short) 42;
        final double zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_long_int() {
        final long value1 = 42L;
        final int value2 = 42;
        final long zero1 = 0;
        final int zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_INT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, QueryConstants.NULL_INT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_long_double() {
        final long value1 = 42L;
        final double value2 = 42d;
        final long zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_long_long() {
        final long value1 = 42L;
        final long value2 = 42L;
        final long zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_long_float() {
        final long value1 = 42L;
        final float value2 = 42f;
        final long zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_long_char() {
        final long value1 = 42L;
        final char value2 = '0';
        final long zero1 = 0;
        final char zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_long_byte() {
        final long value1 = 42L;
        final byte value2 = (byte) 42;
        final long zero1 = 0;
        final byte zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_long_short() {
        final long value1 = 42L;
        final short value2 = (short) 42;
        final long zero1 = 0;
        final short zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_float_int() {
        final float value1 = 42f;
        final int value2 = 42;
        final float zero1 = 0;
        final int zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_INT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_float_double() {
        final float value1 = 42f;
        final double value2 = 42d;
        final float zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_float_long() {
        final float value1 = 42f;
        final long value2 = 42L;
        final float zero1 = 0;
        final long zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_float_float() {
        final float value1 = 42f;
        final float value2 = 42f;
        final float zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_float_char() {
        final float value1 = 42f;
        final char value2 = '0';
        final float zero1 = 0;
        final char zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_float_byte() {
        final float value1 = 42f;
        final byte value2 = (byte) 42;
        final float zero1 = 0;
        final byte zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_float_short() {
        final float value1 = 42f;
        final short value2 = (short) 42;
        final float zero1 = 0;
        final short zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_char_int() {
        final char value1 = '0';
        final int value2 = 42;
        final char zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_char_double() {
        final char value1 = '0';
        final double value2 = 42d;
        final char zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_char_long() {
        final char value1 = '0';
        final long value2 = 42L;
        final char zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_char_float() {
        final char value1 = '0';
        final float value2 = 42f;
        final char zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_char_char() {
        final char value1 = '0';
        final char value2 = '0';
        final char zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_char_byte() {
        final char value1 = '0';
        final byte value2 = (byte) 42;
        final char zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_char_short() {
        final char value1 = '0';
        final short value2 = (short) 42;
        final char zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_byte_int() {
        final byte value1 = (byte) 42;
        final int value2 = 42;
        final byte zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_byte_double() {
        final byte value1 = (byte) 42;
        final double value2 = 42d;
        final byte zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_byte_long() {
        final byte value1 = (byte) 42;
        final long value2 = 42L;
        final byte zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_byte_float() {
        final byte value1 = (byte) 42;
        final float value2 = 42f;
        final byte zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_byte_char() {
        final byte value1 = (byte) 42;
        final char value2 = '0';
        final byte zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_byte_byte() {
        final byte value1 = (byte) 42;
        final byte value2 = (byte) 42;
        final byte zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_byte_short() {
        final byte value1 = (byte) 42;
        final short value2 = (short) 42;
        final byte zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_short_int() {
        final short value1 = (short) 42;
        final int value2 = 42;
        final short zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_short_double() {
        final short value1 = (short) 42;
        final double value2 = 42d;
        final short zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_short_long() {
        final short value1 = (short) 42;
        final long value2 = 42L;
        final short zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_short_float() {
        final short value1 = (short) 42;
        final float value2 = 42f;
        final short zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_short_char() {
        final short value1 = (short) 42;
        final char value2 = '0';
        final short zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_short_byte() {
        final short value1 = (short) 42;
        final byte value2 = (byte) 42;
        final short zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_plus_short_short() {
        final short value1 = (short) 42;
        final short value2 = (short) 42;
        final short zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.plus(value1, value2);
            expectedResult = value1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(zero1, value2);
            expectedResult = zero1 + value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.plus(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.plus(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_int_int() {
        final int value1 = 42;
        final int value2 = 42;
        final int zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_int_double() {
        final int value1 = 42;
        final double value2 = 42d;
        final int zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_int_long() {
        final int value1 = 42;
        final long value2 = 42L;
        final int zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_int_float() {
        final int value1 = 42;
        final float value2 = 42f;
        final int zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_int_char() {
        final int value1 = 42;
        final char value2 = '0';
        final int zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_int_byte() {
        final int value1 = 42;
        final byte value2 = (byte) 42;
        final int zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_int_short() {
        final int value1 = 42;
        final short value2 = (short) 42;
        final int zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_double_int() {
        final double value1 = 42d;
        final int value2 = 42;
        final double zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_double_double() {
        final double value1 = 42d;
        final double value2 = 42d;
        final double zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_double_long() {
        final double value1 = 42d;
        final long value2 = 42L;
        final double zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_double_float() {
        final double value1 = 42d;
        final float value2 = 42f;
        final double zero1 = 0;
        final float zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_double_char() {
        final double value1 = 42d;
        final char value2 = '0';
        final double zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_double_byte() {
        final double value1 = 42d;
        final byte value2 = (byte) 42;
        final double zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_double_short() {
        final double value1 = 42d;
        final short value2 = (short) 42;
        final double zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_long_int() {
        final long value1 = 42L;
        final int value2 = 42;
        final long zero1 = 0;
        final int zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_INT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, QueryConstants.NULL_INT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_long_double() {
        final long value1 = 42L;
        final double value2 = 42d;
        final long zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_long_long() {
        final long value1 = 42L;
        final long value2 = 42L;
        final long zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_long_float() {
        final long value1 = 42L;
        final float value2 = 42f;
        final long zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_long_char() {
        final long value1 = 42L;
        final char value2 = '0';
        final long zero1 = 0;
        final char zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_long_byte() {
        final long value1 = 42L;
        final byte value2 = (byte) 42;
        final long zero1 = 0;
        final byte zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_long_short() {
        final long value1 = 42L;
        final short value2 = (short) 42;
        final long zero1 = 0;
        final short zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_float_int() {
        final float value1 = 42f;
        final int value2 = 42;
        final float zero1 = 0;
        final int zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_INT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_float_double() {
        final float value1 = 42f;
        final double value2 = 42d;
        final float zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_float_long() {
        final float value1 = 42f;
        final long value2 = 42L;
        final float zero1 = 0;
        final long zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_float_float() {
        final float value1 = 42f;
        final float value2 = 42f;
        final float zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_float_char() {
        final float value1 = 42f;
        final char value2 = '0';
        final float zero1 = 0;
        final char zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_float_byte() {
        final float value1 = 42f;
        final byte value2 = (byte) 42;
        final float zero1 = 0;
        final byte zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_float_short() {
        final float value1 = 42f;
        final short value2 = (short) 42;
        final float zero1 = 0;
        final short zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_char_int() {
        final char value1 = '0';
        final int value2 = 42;
        final char zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_char_double() {
        final char value1 = '0';
        final double value2 = 42d;
        final char zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_char_long() {
        final char value1 = '0';
        final long value2 = 42L;
        final char zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_char_float() {
        final char value1 = '0';
        final float value2 = 42f;
        final char zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_char_char() {
        final char value1 = '0';
        final char value2 = '0';
        final char zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_char_byte() {
        final char value1 = '0';
        final byte value2 = (byte) 42;
        final char zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_char_short() {
        final char value1 = '0';
        final short value2 = (short) 42;
        final char zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_byte_int() {
        final byte value1 = (byte) 42;
        final int value2 = 42;
        final byte zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_byte_double() {
        final byte value1 = (byte) 42;
        final double value2 = 42d;
        final byte zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_byte_long() {
        final byte value1 = (byte) 42;
        final long value2 = 42L;
        final byte zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_byte_float() {
        final byte value1 = (byte) 42;
        final float value2 = 42f;
        final byte zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_byte_char() {
        final byte value1 = (byte) 42;
        final char value2 = '0';
        final byte zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_byte_byte() {
        final byte value1 = (byte) 42;
        final byte value2 = (byte) 42;
        final byte zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_byte_short() {
        final byte value1 = (byte) 42;
        final short value2 = (short) 42;
        final byte zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_short_int() {
        final short value1 = (short) 42;
        final int value2 = 42;
        final short zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_short_double() {
        final short value1 = (short) 42;
        final double value2 = 42d;
        final short zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_short_long() {
        final short value1 = (short) 42;
        final long value2 = 42L;
        final short zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_short_float() {
        final short value1 = (short) 42;
        final float value2 = 42f;
        final short zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_short_char() {
        final short value1 = (short) 42;
        final char value2 = '0';
        final short zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_short_byte() {
        final short value1 = (short) 42;
        final byte value2 = (byte) 42;
        final short zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_minus_short_short() {
        final short value1 = (short) 42;
        final short value2 = (short) 42;
        final short zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.minus(value1, value2);
            expectedResult = value1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(zero1, value2);
            expectedResult = zero1 - value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.minus(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.minus(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_int_int() {
        final int value1 = 42;
        final int value2 = 42;
        final int zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_int_double() {
        final int value1 = 42;
        final double value2 = 42d;
        final int zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_int_long() {
        final int value1 = 42;
        final long value2 = 42L;
        final int zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_int_float() {
        final int value1 = 42;
        final float value2 = 42f;
        final int zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_int_char() {
        final int value1 = 42;
        final char value2 = '0';
        final int zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_int_byte() {
        final int value1 = 42;
        final byte value2 = (byte) 42;
        final int zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_int_short() {
        final int value1 = 42;
        final short value2 = (short) 42;
        final int zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_double_int() {
        final double value1 = 42d;
        final int value2 = 42;
        final double zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_double_double() {
        final double value1 = 42d;
        final double value2 = 42d;
        final double zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_double_long() {
        final double value1 = 42d;
        final long value2 = 42L;
        final double zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_double_float() {
        final double value1 = 42d;
        final float value2 = 42f;
        final double zero1 = 0;
        final float zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_double_char() {
        final double value1 = 42d;
        final char value2 = '0';
        final double zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_double_byte() {
        final double value1 = 42d;
        final byte value2 = (byte) 42;
        final double zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_double_short() {
        final double value1 = 42d;
        final short value2 = (short) 42;
        final double zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_long_int() {
        final long value1 = 42L;
        final int value2 = 42;
        final long zero1 = 0;
        final int zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_INT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, QueryConstants.NULL_INT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_long_double() {
        final long value1 = 42L;
        final double value2 = 42d;
        final long zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_long_long() {
        final long value1 = 42L;
        final long value2 = 42L;
        final long zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_long_float() {
        final long value1 = 42L;
        final float value2 = 42f;
        final long zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_long_char() {
        final long value1 = 42L;
        final char value2 = '0';
        final long zero1 = 0;
        final char zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_long_byte() {
        final long value1 = 42L;
        final byte value2 = (byte) 42;
        final long zero1 = 0;
        final byte zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_long_short() {
        final long value1 = 42L;
        final short value2 = (short) 42;
        final long zero1 = 0;
        final short zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_float_int() {
        final float value1 = 42f;
        final int value2 = 42;
        final float zero1 = 0;
        final int zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_INT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_float_double() {
        final float value1 = 42f;
        final double value2 = 42d;
        final float zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_float_long() {
        final float value1 = 42f;
        final long value2 = 42L;
        final float zero1 = 0;
        final long zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_float_float() {
        final float value1 = 42f;
        final float value2 = 42f;
        final float zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_float_char() {
        final float value1 = 42f;
        final char value2 = '0';
        final float zero1 = 0;
        final char zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_float_byte() {
        final float value1 = 42f;
        final byte value2 = (byte) 42;
        final float zero1 = 0;
        final byte zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_float_short() {
        final float value1 = 42f;
        final short value2 = (short) 42;
        final float zero1 = 0;
        final short zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_char_int() {
        final char value1 = '0';
        final int value2 = 42;
        final char zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_char_double() {
        final char value1 = '0';
        final double value2 = 42d;
        final char zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_char_long() {
        final char value1 = '0';
        final long value2 = 42L;
        final char zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_char_float() {
        final char value1 = '0';
        final float value2 = 42f;
        final char zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_char_char() {
        final char value1 = '0';
        final char value2 = '0';
        final char zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_char_byte() {
        final char value1 = '0';
        final byte value2 = (byte) 42;
        final char zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_char_short() {
        final char value1 = '0';
        final short value2 = (short) 42;
        final char zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_byte_int() {
        final byte value1 = (byte) 42;
        final int value2 = 42;
        final byte zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_byte_double() {
        final byte value1 = (byte) 42;
        final double value2 = 42d;
        final byte zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_byte_long() {
        final byte value1 = (byte) 42;
        final long value2 = 42L;
        final byte zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_byte_float() {
        final byte value1 = (byte) 42;
        final float value2 = 42f;
        final byte zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_byte_char() {
        final byte value1 = (byte) 42;
        final char value2 = '0';
        final byte zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_byte_byte() {
        final byte value1 = (byte) 42;
        final byte value2 = (byte) 42;
        final byte zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_byte_short() {
        final byte value1 = (byte) 42;
        final short value2 = (short) 42;
        final byte zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_short_int() {
        final short value1 = (short) 42;
        final int value2 = 42;
        final short zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_short_double() {
        final short value1 = (short) 42;
        final double value2 = 42d;
        final short zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_short_long() {
        final short value1 = (short) 42;
        final long value2 = 42L;
        final short zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_short_float() {
        final short value1 = (short) 42;
        final float value2 = 42f;
        final short zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_short_char() {
        final short value1 = (short) 42;
        final char value2 = '0';
        final short zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_short_byte() {
        final short value1 = (short) 42;
        final byte value2 = (byte) 42;
        final short zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_multiply_short_short() {
        final short value1 = (short) 42;
        final short value2 = (short) 42;
        final short zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.multiply(value1, value2);
            expectedResult = value1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(zero1, value2);
            expectedResult = zero1 * value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.multiply(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.multiply(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_int_int() {
        final int value1 = 42;
        final int value2 = 42;
        final int zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_int_double() {
        final int value1 = 42;
        final double value2 = 42d;
        final int zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_int_long() {
        final int value1 = 42;
        final long value2 = 42L;
        final int zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_int_float() {
        final int value1 = 42;
        final float value2 = 42f;
        final int zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_int_char() {
        final int value1 = 42;
        final char value2 = '0';
        final int zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_int_byte() {
        final int value1 = 42;
        final byte value2 = (byte) 42;
        final int zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_int_short() {
        final int value1 = 42;
        final short value2 = (short) 42;
        final int zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_double_int() {
        final double value1 = 42d;
        final int value2 = 42;
        final double zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_double_double() {
        final double value1 = 42d;
        final double value2 = 42d;
        final double zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_double_long() {
        final double value1 = 42d;
        final long value2 = 42L;
        final double zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_double_float() {
        final double value1 = 42d;
        final float value2 = 42f;
        final double zero1 = 0;
        final float zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_double_char() {
        final double value1 = 42d;
        final char value2 = '0';
        final double zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_double_byte() {
        final double value1 = 42d;
        final byte value2 = (byte) 42;
        final double zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_double_short() {
        final double value1 = 42d;
        final short value2 = (short) 42;
        final double zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_long_int() {
        final long value1 = 42L;
        final int value2 = 42;
        final long zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_long_double() {
        final long value1 = 42L;
        final double value2 = 42d;
        final long zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_long_long() {
        final long value1 = 42L;
        final long value2 = 42L;
        final long zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_long_float() {
        final long value1 = 42L;
        final float value2 = 42f;
        final long zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_long_char() {
        final long value1 = 42L;
        final char value2 = '0';
        final long zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_long_byte() {
        final long value1 = 42L;
        final byte value2 = (byte) 42;
        final long zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_long_short() {
        final long value1 = 42L;
        final short value2 = (short) 42;
        final long zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_float_int() {
        final float value1 = 42f;
        final int value2 = 42;
        final float zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_float_double() {
        final float value1 = 42f;
        final double value2 = 42d;
        final float zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_float_long() {
        final float value1 = 42f;
        final long value2 = 42L;
        final float zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_float_float() {
        final float value1 = 42f;
        final float value2 = 42f;
        final float zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_float_char() {
        final float value1 = 42f;
        final char value2 = '0';
        final float zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_float_byte() {
        final float value1 = 42f;
        final byte value2 = (byte) 42;
        final float zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_float_short() {
        final float value1 = 42f;
        final short value2 = (short) 42;
        final float zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_char_int() {
        final char value1 = '0';
        final int value2 = 42;
        final char zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_char_double() {
        final char value1 = '0';
        final double value2 = 42d;
        final char zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_char_long() {
        final char value1 = '0';
        final long value2 = 42L;
        final char zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_char_float() {
        final char value1 = '0';
        final float value2 = 42f;
        final char zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_char_char() {
        final char value1 = '0';
        final char value2 = '0';
        final char zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_char_byte() {
        final char value1 = '0';
        final byte value2 = (byte) 42;
        final char zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_char_short() {
        final char value1 = '0';
        final short value2 = (short) 42;
        final char zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_byte_int() {
        final byte value1 = (byte) 42;
        final int value2 = 42;
        final byte zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_byte_double() {
        final byte value1 = (byte) 42;
        final double value2 = 42d;
        final byte zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_byte_long() {
        final byte value1 = (byte) 42;
        final long value2 = 42L;
        final byte zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_byte_float() {
        final byte value1 = (byte) 42;
        final float value2 = 42f;
        final byte zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_byte_char() {
        final byte value1 = (byte) 42;
        final char value2 = '0';
        final byte zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_byte_byte() {
        final byte value1 = (byte) 42;
        final byte value2 = (byte) 42;
        final byte zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_byte_short() {
        final byte value1 = (byte) 42;
        final short value2 = (short) 42;
        final byte zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_short_int() {
        final short value1 = (short) 42;
        final int value2 = 42;
        final short zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_short_double() {
        final short value1 = (short) 42;
        final double value2 = 42d;
        final short zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_short_long() {
        final short value1 = (short) 42;
        final long value2 = 42L;
        final short zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_short_float() {
        final short value1 = (short) 42;
        final float value2 = 42f;
        final short zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_short_char() {
        final short value1 = (short) 42;
        final char value2 = '0';
        final short zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_short_byte() {
        final short value1 = (short) 42;
        final byte value2 = (byte) 42;
        final short zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_divide_short_short() {
        final short value1 = (short) 42;
        final short value2 = (short) 42;
        final short zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.divide(value1, value2);
            expectedResult = value1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(zero1, value2);
            expectedResult = zero1 / (double) value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.divide(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.divide(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_int_int() {
        final int value1 = 42;
        final int value2 = 42;
        final int zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_int_double() {
        final int value1 = 42;
        final double value2 = 42d;
        final int zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_int_long() {
        final int value1 = 42;
        final long value2 = 42L;
        final int zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_int_float() {
        final int value1 = 42;
        final float value2 = 42f;
        final int zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_int_char() {
        final int value1 = 42;
        final char value2 = '0';
        final int zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_int_byte() {
        final int value1 = 42;
        final byte value2 = (byte) 42;
        final int zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_int_short() {
        final int value1 = 42;
        final short value2 = (short) 42;
        final int zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_double_int() {
        final double value1 = 42d;
        final int value2 = 42;
        final double zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_double_double() {
        final double value1 = 42d;
        final double value2 = 42d;
        final double zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_double_long() {
        final double value1 = 42d;
        final long value2 = 42L;
        final double zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_double_float() {
        final double value1 = 42d;
        final float value2 = 42f;
        final double zero1 = 0;
        final float zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_double_char() {
        final double value1 = 42d;
        final char value2 = '0';
        final double zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_double_byte() {
        final double value1 = 42d;
        final byte value2 = (byte) 42;
        final double zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_double_short() {
        final double value1 = 42d;
        final short value2 = (short) 42;
        final double zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_long_int() {
        final long value1 = 42L;
        final int value2 = 42;
        final long zero1 = 0;
        final int zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_INT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, QueryConstants.NULL_INT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_long_double() {
        final long value1 = 42L;
        final double value2 = 42d;
        final long zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_long_long() {
        final long value1 = 42L;
        final long value2 = 42L;
        final long zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_long_float() {
        final long value1 = 42L;
        final float value2 = 42f;
        final long zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_long_char() {
        final long value1 = 42L;
        final char value2 = '0';
        final long zero1 = 0;
        final char zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_long_byte() {
        final long value1 = 42L;
        final byte value2 = (byte) 42;
        final long zero1 = 0;
        final byte zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_long_short() {
        final long value1 = 42L;
        final short value2 = (short) 42;
        final long zero1 = 0;
        final short zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_float_int() {
        final float value1 = 42f;
        final int value2 = 42;
        final float zero1 = 0;
        final int zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_INT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_float_double() {
        final float value1 = 42f;
        final double value2 = 42d;
        final float zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_float_long() {
        final float value1 = 42f;
        final long value2 = 42L;
        final float zero1 = 0;
        final long zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_float_float() {
        final float value1 = 42f;
        final float value2 = 42f;
        final float zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_float_char() {
        final float value1 = 42f;
        final char value2 = '0';
        final float zero1 = 0;
        final char zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_float_byte() {
        final float value1 = 42f;
        final byte value2 = (byte) 42;
        final float zero1 = 0;
        final byte zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_float_short() {
        final float value1 = 42f;
        final short value2 = (short) 42;
        final float zero1 = 0;
        final short zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_char_int() {
        final char value1 = '0';
        final int value2 = 42;
        final char zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_char_double() {
        final char value1 = '0';
        final double value2 = 42d;
        final char zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_char_long() {
        final char value1 = '0';
        final long value2 = 42L;
        final char zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_char_float() {
        final char value1 = '0';
        final float value2 = 42f;
        final char zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_char_char() {
        final char value1 = '0';
        final char value2 = '0';
        final char zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_char_byte() {
        final char value1 = '0';
        final byte value2 = (byte) 42;
        final char zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_char_short() {
        final char value1 = '0';
        final short value2 = (short) 42;
        final char zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_byte_int() {
        final byte value1 = (byte) 42;
        final int value2 = 42;
        final byte zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_byte_double() {
        final byte value1 = (byte) 42;
        final double value2 = 42d;
        final byte zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_byte_long() {
        final byte value1 = (byte) 42;
        final long value2 = 42L;
        final byte zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_byte_float() {
        final byte value1 = (byte) 42;
        final float value2 = 42f;
        final byte zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_byte_char() {
        final byte value1 = (byte) 42;
        final char value2 = '0';
        final byte zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_byte_byte() {
        final byte value1 = (byte) 42;
        final byte value2 = (byte) 42;
        final byte zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_byte_short() {
        final byte value1 = (byte) 42;
        final short value2 = (short) 42;
        final byte zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_short_int() {
        final short value1 = (short) 42;
        final int value2 = 42;
        final short zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_short_double() {
        final short value1 = (short) 42;
        final double value2 = 42d;
        final short zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description =
                    "Double.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_short_long() {
        final short value1 = (short) 42;
        final long value2 = 42L;
        final short zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description =
                    "Long.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_short_float() {
        final short value1 = (short) 42;
        final float value2 = 42f;
        final short zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description =
                    "Float.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_short_char() {
        final short value1 = (short) 42;
        final char value2 = '0';
        final short zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_short_byte() {
        final short value1 = (short) 42;
        final byte value2 = (byte) 42;
        final short zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_remainder_short_short() {
        final short value1 = (short) 42;
        final short value2 = (short) 42;
        final short zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = QueryLanguageFunctionUtils.remainder(value1, value2);
            expectedResult = value1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(zero1, value2);
            expectedResult = zero1 % value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(QueryLanguageFunctionUtils.remainder(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description =
                    "Integer.compare(QueryLanguageFunctionUtils.remainder(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException(
                    "Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_compare_int_int_compare() {
        final int value1 = 1;
        final int value2 = 42;
        final int zero1 = 0;
        final int zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_INT, QueryConstants.NULL_INT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_int_double_compare() {
        final int value1 = 1;
        final double value2 = 42.0d;
        final int zero1 = 0;
        final double zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_int_long_compare() {
        final int value1 = 1;
        final long value2 = 42L;
        final int zero1 = 0;
        final long zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_INT, QueryConstants.NULL_LONG));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_int_float_compare() {
        final int value1 = 1;
        final float value2 = 42.0f;
        final int zero1 = 0;
        final float zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_int_char_compare() {
        final int value1 = 1;
        final char value2 = '1';
        final int zero1 = 0;
        final char zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_int_byte_compare() {
        final int value1 = 1;
        final byte value2 = (byte) 42;
        final int zero1 = 0;
        final byte zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_int_short_compare() {
        final int value1 = 1;
        final short value2 = (short) 42;
        final int zero1 = 0;
        final short zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_double_int_compare() {
        final double value1 = 0.01d;
        final int value2 = 42;
        final double zero1 = 0;
        final int zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_double_double_compare() {
        final double value1 = 0.01d;
        final double value2 = 42.0d;
        final double zero1 = 0;
        final double zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_double_long_compare() {
        final double value1 = 0.01d;
        final long value2 = 42L;
        final double zero1 = 0;
        final long zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_double_float_compare() {
        final double value1 = 0.01d;
        final float value2 = 42.0f;
        final double zero1 = 0;
        final float zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_double_char_compare() {
        final double value1 = 0.01d;
        final char value2 = '1';
        final double zero1 = 0;
        final char zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_double_byte_compare() {
        final double value1 = 0.01d;
        final byte value2 = (byte) 42;
        final double zero1 = 0;
        final byte zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_double_short_compare() {
        final double value1 = 0.01d;
        final short value2 = (short) 42;
        final double zero1 = 0;
        final short zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_long_int_compare() {
        final long value1 = 1L;
        final int value2 = 42;
        final long zero1 = 0;
        final int zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_LONG, QueryConstants.NULL_INT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_long_double_compare() {
        final long value1 = 1L;
        final double value2 = 42.0d;
        final long zero1 = 0;
        final double zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_long_long_compare() {
        final long value1 = 1L;
        final long value2 = 42L;
        final long zero1 = 0;
        final long zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_long_float_compare() {
        final long value1 = 1L;
        final float value2 = 42.0f;
        final long zero1 = 0;
        final float zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_long_char_compare() {
        final long value1 = 1L;
        final char value2 = '1';
        final long zero1 = 0;
        final char zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_long_byte_compare() {
        final long value1 = 1L;
        final byte value2 = (byte) 42;
        final long zero1 = 0;
        final byte zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_long_short_compare() {
        final long value1 = 1L;
        final short value2 = (short) 42;
        final long zero1 = 0;
        final short zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_float_int_compare() {
        final float value1 = 0.01f;
        final int value2 = 42;
        final float zero1 = 0;
        final int zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_float_double_compare() {
        final float value1 = 0.01f;
        final double value2 = 42.0d;
        final float zero1 = 0;
        final double zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_float_long_compare() {
        final float value1 = 0.01f;
        final long value2 = 42L;
        final float zero1 = 0;
        final long zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_float_float_compare() {
        final float value1 = 0.01f;
        final float value2 = 42.0f;
        final float zero1 = 0;
        final float zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_float_char_compare() {
        final float value1 = 0.01f;
        final char value2 = '1';
        final float zero1 = 0;
        final char zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_float_byte_compare() {
        final float value1 = 0.01f;
        final byte value2 = (byte) 42;
        final float zero1 = 0;
        final byte zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_float_short_compare() {
        final float value1 = 0.01f;
        final short value2 = (short) 42;
        final float zero1 = 0;
        final short zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_char_int_compare() {
        final char value1 = (char) 1;
        final int value2 = 42;
        final char zero1 = 0;
        final int zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_char_double_compare() {
        final char value1 = (char) 1;
        final double value2 = 42.0d;
        final char zero1 = 0;
        final double zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_char_long_compare() {
        final char value1 = (char) 1;
        final long value2 = 42L;
        final char zero1 = 0;
        final long zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_char_float_compare() {
        final char value1 = (char) 1;
        final float value2 = 42.0f;
        final char zero1 = 0;
        final float zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_char_char_compare() {
        final char value1 = (char) 1;
        final char value2 = '1';
        final char zero1 = 0;
        final char zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_char_byte_compare() {
        final char value1 = (char) 1;
        final byte value2 = (byte) 42;
        final char zero1 = 0;
        final byte zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_char_short_compare() {
        final char value1 = (char) 1;
        final short value2 = (short) 42;
        final char zero1 = 0;
        final short zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_byte_int_compare() {
        final byte value1 = (byte) 1;
        final int value2 = 42;
        final byte zero1 = 0;
        final int zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_byte_double_compare() {
        final byte value1 = (byte) 1;
        final double value2 = 42.0d;
        final byte zero1 = 0;
        final double zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_byte_long_compare() {
        final byte value1 = (byte) 1;
        final long value2 = 42L;
        final byte zero1 = 0;
        final long zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_byte_float_compare() {
        final byte value1 = (byte) 1;
        final float value2 = 42.0f;
        final byte zero1 = 0;
        final float zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_byte_char_compare() {
        final byte value1 = (byte) 1;
        final char value2 = '1';
        final byte zero1 = 0;
        final char zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_byte_byte_compare() {
        final byte value1 = (byte) 1;
        final byte value2 = (byte) 42;
        final byte zero1 = 0;
        final byte zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_byte_short_compare() {
        final byte value1 = (byte) 1;
        final short value2 = (short) 42;
        final byte zero1 = 0;
        final short zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_short_int_compare() {
        final short value1 = (short) 1;
        final int value2 = 42;
        final short zero1 = 0;
        final int zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_short_double_compare() {
        final short value1 = (short) 1;
        final double value2 = 42.0d;
        final short zero1 = 0;
        final double zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_short_long_compare() {
        final short value1 = (short) 1;
        final long value2 = 42L;
        final short zero1 = 0;
        final long zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_short_float_compare() {
        final short value1 = (short) 1;
        final float value2 = 42.0f;
        final short zero1 = 0;
        final float zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_short_char_compare() {
        final short value1 = (short) 1;
        final char value2 = '1';
        final short zero1 = 0;
        final char zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_short_byte_compare() {
        final short value1 = (short) 1;
        final byte value2 = (byte) 42;
        final short zero1 = 0;
        final byte zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }

    public static void test_compare_short_short_compare() {
        final short value1 = (short) 1;
        final short value2 = (short) 42;
        final short zero1 = 0;
        final short zero2 = 0;

        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(Double.NaN, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero1, zero2));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(zero2, zero1));
        TestCase.assertEquals(0,
                QueryLanguageFunctionUtils.compareTo(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value1, value1));
        TestCase.assertEquals(0, QueryLanguageFunctionUtils.compareTo(value2, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(value1, value2));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(value2, value1));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value1, value2));
        TestCase.assertEquals(-1, QueryLanguageFunctionUtils.compareTo(-value2, value1));
        TestCase.assertEquals(1, QueryLanguageFunctionUtils.compareTo(-value1, -value2));
    }


    public static void test_bigdecimal_plus() {
        final BigDecimal bv1 = new BigDecimal(BigInteger.valueOf(10005), 3);
        final int iv1 = 10;
        final long lv1 = 10;
        final float fv1 = 0.5F;
        final double dv1 = 0.5;
        final BigDecimal[] results = new BigDecimal[] {
                plus(plus(bv1, iv1), fv1),
                plus(plus(iv1, bv1), fv1),
                plus(plus(bv1, fv1), iv1),
                plus(plus(fv1, bv1), iv1),
                plus(plus(bv1, lv1), dv1),
                plus(plus(lv1, bv1), dv1),
                plus(plus(bv1, dv1), lv1),
                plus(plus(dv1, bv1), lv1),
        };
        final BigDecimal expected = new BigDecimal(BigInteger.valueOf(20505), 3);
        for (BigDecimal r : results) {
            TestCase.assertEquals(0, expected.compareTo(r));
        }
    }

    public static void test_bigdecimal_minus() {
        final BigDecimal bv1Left = new BigDecimal(BigInteger.valueOf(10005), 0);
        final BigDecimal bv1Right = new BigDecimal(BigInteger.valueOf(10), 0);
        final BigDecimal[] results = new BigDecimal[] {
                minus(bv1Left, 10),
                minus(10005, bv1Right),
                minus(bv1Left, 10L),
                minus(10005L, bv1Right),
                minus(bv1Left, 10.0F),
                minus(10005.0F, bv1Right),
                minus(bv1Left, 10.0),
                minus(10005.0, bv1Right),
        };
        final BigDecimal expected = new BigDecimal(BigInteger.valueOf(9995), 0);
        for (BigDecimal r : results) {
            TestCase.assertEquals(0, expected.compareTo(r));
        }
    }

    public static void test_bigdecimal_multiply() {
        final BigDecimal bv1 = new BigDecimal(BigInteger.valueOf(10005), 3);
        final int iv1 = 2;
        final long lv1 = 2;
        final float fv1 = 2.0F;
        final double dv1 = 2.0;
        final BigDecimal[] results = new BigDecimal[] {
                multiply(bv1, iv1),
                multiply(iv1, bv1),
                multiply(bv1, fv1),
                multiply(fv1, bv1),
                multiply(bv1, lv1),
                multiply(lv1, bv1),
                multiply(bv1, dv1),
                multiply(dv1, bv1),
        };
        final BigDecimal expected = new BigDecimal(BigInteger.valueOf(2001), 2);
        for (BigDecimal r : results) {
            TestCase.assertEquals(0, expected.compareTo(r));
        }
    }

    public static void test_bigdecimal_divide() {
        final BigDecimal bv1Left = new BigDecimal(BigInteger.valueOf(10005), 0);
        final BigDecimal bv1Right = new BigDecimal(BigInteger.valueOf(2), 0);
        final BigDecimal[] results = new BigDecimal[] {
                divide(bv1Left, 2),
                divide(10005, bv1Right),
                divide(bv1Left, 2L),
                divide(10005L, bv1Right),
                divide(bv1Left, 2.0F),
                divide(10005.0F, bv1Right),
                divide(bv1Left, 2.0),
                divide(10005.0, bv1Right),
        };
        final BigDecimal expected = new BigDecimal(BigInteger.valueOf(50025), 1);
        for (BigDecimal r : results) {
            TestCase.assertEquals(0, expected.compareTo(r));
        }
    }

    public static void test_bigdecimal_primitives_null() {
        final BigDecimal bv1 = new BigDecimal(BigInteger.valueOf(10005), 3);
        final int iv1 = QueryConstants.NULL_INT;
        final long lv1 = QueryConstants.NULL_LONG;
        final float fv1 = QueryConstants.NULL_FLOAT;
        final double dv1 = QueryConstants.NULL_DOUBLE;
        final BigDecimal[] results = new BigDecimal[] {
                plus(bv1, iv1),
                plus(iv1, bv1),
                plus(bv1, fv1),
                plus(fv1, bv1),
                plus(bv1, lv1),
                plus(lv1, bv1),
                plus(bv1, dv1),
                plus(dv1, bv1),
                minus(bv1, iv1),
                minus(iv1, bv1),
                minus(bv1, fv1),
                minus(fv1, bv1),
                minus(bv1, lv1),
                minus(lv1, bv1),
                minus(bv1, dv1),
                minus(dv1, bv1),
                multiply(bv1, iv1),
                multiply(iv1, bv1),
                multiply(bv1, fv1),
                multiply(fv1, bv1),
                multiply(bv1, lv1),
                multiply(lv1, bv1),
                multiply(bv1, dv1),
                multiply(dv1, bv1),
                divide(bv1, iv1),
                divide(iv1, bv1),
                divide(bv1, fv1),
                divide(fv1, bv1),
                divide(bv1, lv1),
                divide(lv1, bv1),
                divide(bv1, dv1),
                divide(dv1, bv1),
        };
        for (BigDecimal r : results) {
            TestCase.assertNull(r);
        }
    }

    public static void test_bigdecimal_bigdecimal_null() {
        final BigDecimal bv1 = null;
        final int iv1 = 10;
        final long lv1 = 10L;
        final float fv1 = 0.5F;
        final double dv1 = 0.5;
        final BigDecimal[] results = new BigDecimal[] {
                plus(bv1, iv1),
                plus(iv1, bv1),
                plus(bv1, fv1),
                plus(fv1, bv1),
                plus(bv1, lv1),
                plus(lv1, bv1),
                plus(bv1, dv1),
                plus(dv1, bv1),
                minus(bv1, iv1),
                minus(iv1, bv1),
                minus(bv1, fv1),
                minus(fv1, bv1),
                minus(bv1, lv1),
                minus(lv1, bv1),
                minus(bv1, dv1),
                minus(dv1, bv1),
                multiply(bv1, iv1),
                multiply(iv1, bv1),
                multiply(bv1, fv1),
                multiply(fv1, bv1),
                multiply(bv1, lv1),
                multiply(lv1, bv1),
                multiply(bv1, dv1),
                multiply(dv1, bv1),
                divide(bv1, iv1),
                divide(iv1, bv1),
                divide(bv1, fv1),
                divide(fv1, bv1),
                divide(bv1, lv1),
                divide(lv1, bv1),
                divide(bv1, dv1),
                divide(dv1, bv1),
        };
        for (BigDecimal r : results) {
            TestCase.assertNull(r);
        }
    }

    public static void test_bigdecimal_nans() {
        final BigDecimal bv1 = new BigDecimal(BigInteger.valueOf(10005), 2);
        final BigDecimal bvnull = null;
        final float vfnan = Float.NaN;
        final double vdnan = Double.NaN;

        TestCase.assertEquals(-1, compareTo(bv1, vfnan));  // rhs NaN
        TestCase.assertEquals(1, compareTo(vfnan, bv1));   // lhs NaN
        TestCase.assertEquals(-1, compareTo(bvnull, vfnan));  // lhs null and rhs NaN
        TestCase.assertEquals(1, compareTo(vfnan, bvnull));   // lhs NaN and rhs null

        TestCase.assertEquals(-1, compareTo(bv1, vdnan));  // rhs NaN
        TestCase.assertEquals(1, compareTo(vdnan, bv1));   // lhs NaN
        TestCase.assertEquals(-1, compareTo(bvnull, vdnan));  // lhs null and rhs NaN
        TestCase.assertEquals(1, compareTo(vdnan, bvnull));   // lhs NaN and rhs null

        TestCase.assertFalse(eq(bv1, vfnan));
        TestCase.assertFalse(eq(vfnan, bv1));
        TestCase.assertFalse(eq(bvnull, vfnan));
        TestCase.assertFalse(eq(vfnan, bvnull));
        TestCase.assertFalse(eq(bv1, vdnan));
        TestCase.assertFalse(eq(vdnan, bv1));
        TestCase.assertFalse(eq(bvnull, vdnan));
        TestCase.assertFalse(eq(vdnan, bvnull));
    }
}
