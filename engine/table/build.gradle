plugins {
    id 'java-library'
    id 'io.deephaven.project.register'
    id 'me.champeau.jmh' version '0.7.2'
}

description 'Engine Table: Implementation and closely-coupled utilities'

configurations {
    // Ensure jmh picks up the same dependencies as tests
    jmhImplementation.extendsFrom testImplementation
    jmhRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    api project(':Util')
    api project(':TableLogger')
    api project(':engine-stringset')
    api project(':engine-base')
    api project(':engine-context')
    api project(':deephaven-jpy-ext')
    api project(':hotspot')
    api project(':IO')

    implementation project(':DHProcess')
    implementation project(':engine-function')
    implementation project(':engine-tuple')
    implementation project(':Configuration')
    implementation project(':log-factory')
    implementation project(':Stats')

    implementation libs.f4b6a3.uuid.creator
    // TODO(deephaven-core#3204): t-digest 3.3 appears to have higher errors than 3.2
    implementation libs.tdunning.t.digest
    implementation libs.squareup.javapoet
    implementation libs.classgraph
    implementation libs.dsi.fastutil

    implementation project(':plugin')
    implementation libs.commons.lang3
    implementation libs.commons.text
    implementation libs.commons.compress

    implementation libs.groovy
    implementation libs.groovy.json
    implementation libs.javaparser.core
    compileOnly libs.autoservice
    annotationProcessor libs.autoservice.compiler

    compileOnly project(':util-immutables')
    annotationProcessor libs.immutables.value

    compileOnly libs.google.findbugs.jsr305

    runtimeOnly project(':engine-tuplesource')

    implementation libs.guava

    testImplementation TestTools.projectDependency(project, 'engine-chunk')
    testImplementation TestTools.projectDependency(project, 'engine-vector')
    testImplementation TestTools.projectDependency(project, 'Numerics')
    testImplementation TestTools.projectDependency(project, 'engine-time')
    testImplementation project(':base-test-utils')
    testImplementation project(':engine-rowset-test-utils')
    testImplementation project(':engine-test-utils')
    testImplementation project(':Base')
    testImplementation project(':BenchmarkSupport')
    testImplementation project(':extensions-csv')
    testImplementation project(':extensions-parquet-table')
    testImplementation project(':extensions-parquet-base')
    testImplementation project(':extensions-source-support')
    testImplementation project(':Numerics')
    testImplementation project(':extensions-suanshu')

    testImplementation libs.junit4

    testImplementation platform(libs.junit.bom)
    testImplementation libs.assertj

    testRuntimeOnly project(':log-to-slf4j')
    testRuntimeOnly project(':configs')
    testRuntimeOnly project(':test-configs')
    testRuntimeOnly libs.slf4j.simple
}

spotless {
    java {
        // Exclude these codegen sample files from here so we don't even need a comment to disable formatting
        targetExclude 'src/test/java/io/deephaven/engine/table/impl/select/FilterKernel*Sample.java',
                'src/test/java/io/deephaven/engine/table/impl/select/Formula*Sample.java'
    }
}

test {
    //  For now, if you apply @Category(ParallelTest.class) to tests which are not huge CPU/RAM hogs, you can get parallelism
    //  If you have CPU/RAM-heavy tasks that you don't want gumming up :engine-table:test runs, apply @Category(SerialTest.class) instead
    //  (note that the above only works for junit 4 tests; see the documentation on SerialTest class and others for porting instructions)

    def props = project.properties.subMap(["jpy.pythonLib", "jpy.jpyLib", "jpy.jdlLib"])
    systemProperties props
    systemProperty 'ModelFileGenerator.testSource', layout.projectDirectory.dir('src/test/java/').toString()
}

// Adds a custom testParallel task which is allowed to run tests in parallel.
// Add @Category(ParallelTest.class) to have your tests run in parallel
// Note: Supports JUnit4 or greater only (you use @Test annotations to mark test methods).

TestTools.addEngineParallelTest(project)
TestTools.addEngineSerialTest(project)
TestTools.addEngineOutOfBandTest(project)

// If changing, be sure to update .github/scripts/print-gradle-workers-max.sh
def maxHeapSize = findProperty('maxHeapSize') as String ?: '6g'

tasks.testParallel.maxHeapSize = maxHeapSize
tasks.testSerial.maxHeapSize = maxHeapSize
tasks.testOutOfBand.maxHeapSize = maxHeapSize
tasks.test.maxHeapSize = maxHeapSize

jmh {
    jmhVersion = libs.versions.jmh.get()
}

// No need to assemble the jar by default on build
// assemble.dependsOn(jmhJar)
check.dependsOn(jmhClasses)
