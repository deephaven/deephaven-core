// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace io.deephaven.barrage.flatbuf
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Describes the subscription the client would like to acquire.
public struct BarrageSubscriptionRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static BarrageSubscriptionRequest GetRootAsBarrageSubscriptionRequest(ByteBuffer _bb) { return GetRootAsBarrageSubscriptionRequest(_bb, new BarrageSubscriptionRequest()); }
  public static BarrageSubscriptionRequest GetRootAsBarrageSubscriptionRequest(ByteBuffer _bb, BarrageSubscriptionRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BarrageSubscriptionRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Ticket for the source data set.
  public sbyte Ticket(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int TicketLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<sbyte> GetTicketBytes() { return __p.__vector_as_span<sbyte>(4, 1); }
#else
  public ArraySegment<byte>? GetTicketBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public sbyte[] GetTicketArray() { return __p.__vector_as_array<sbyte>(4); }
  /// The bitset of columns to subscribe. If not provided then all columns are subscribed.
  public sbyte Columns(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int ColumnsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<sbyte> GetColumnsBytes() { return __p.__vector_as_span<sbyte>(6, 1); }
#else
  public ArraySegment<byte>? GetColumnsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public sbyte[] GetColumnsArray() { return __p.__vector_as_array<sbyte>(6); }
  /// This is an encoded and compressed RowSet in position-space to subscribe to. If not provided then the entire
  /// table is requested.
  public sbyte Viewport(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int ViewportLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<sbyte> GetViewportBytes() { return __p.__vector_as_span<sbyte>(8, 1); }
#else
  public ArraySegment<byte>? GetViewportBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public sbyte[] GetViewportArray() { return __p.__vector_as_array<sbyte>(8); }
  /// Options to configure your subscription.
  public io.deephaven.barrage.flatbuf.BarrageSubscriptionOptions? SubscriptionOptions { get { int o = __p.__offset(10); return o != 0 ? (io.deephaven.barrage.flatbuf.BarrageSubscriptionOptions?)(new io.deephaven.barrage.flatbuf.BarrageSubscriptionOptions()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  /// When this is set the viewport RowSet will be inverted against the length of the table. That is to say
  /// every position value is converted from `i` to `n - i - 1` if the table has `n` rows.
  public bool ReverseViewport { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<io.deephaven.barrage.flatbuf.BarrageSubscriptionRequest> CreateBarrageSubscriptionRequest(FlatBufferBuilder builder,
      VectorOffset ticketOffset = default(VectorOffset),
      VectorOffset columnsOffset = default(VectorOffset),
      VectorOffset viewportOffset = default(VectorOffset),
      Offset<io.deephaven.barrage.flatbuf.BarrageSubscriptionOptions> subscription_optionsOffset = default(Offset<io.deephaven.barrage.flatbuf.BarrageSubscriptionOptions>),
      bool reverse_viewport = false) {
    builder.StartTable(5);
    BarrageSubscriptionRequest.AddSubscriptionOptions(builder, subscription_optionsOffset);
    BarrageSubscriptionRequest.AddViewport(builder, viewportOffset);
    BarrageSubscriptionRequest.AddColumns(builder, columnsOffset);
    BarrageSubscriptionRequest.AddTicket(builder, ticketOffset);
    BarrageSubscriptionRequest.AddReverseViewport(builder, reverse_viewport);
    return BarrageSubscriptionRequest.EndBarrageSubscriptionRequest(builder);
  }

  public static void StartBarrageSubscriptionRequest(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTicket(FlatBufferBuilder builder, VectorOffset ticketOffset) { builder.AddOffset(0, ticketOffset.Value, 0); }
  public static VectorOffset CreateTicketVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTicketVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTicketVectorBlock(FlatBufferBuilder builder, ArraySegment<sbyte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTicketVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<sbyte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTicketVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddColumns(FlatBufferBuilder builder, VectorOffset columnsOffset) { builder.AddOffset(1, columnsOffset.Value, 0); }
  public static VectorOffset CreateColumnsVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateColumnsVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateColumnsVectorBlock(FlatBufferBuilder builder, ArraySegment<sbyte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateColumnsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<sbyte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartColumnsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddViewport(FlatBufferBuilder builder, VectorOffset viewportOffset) { builder.AddOffset(2, viewportOffset.Value, 0); }
  public static VectorOffset CreateViewportVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateViewportVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateViewportVectorBlock(FlatBufferBuilder builder, ArraySegment<sbyte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateViewportVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<sbyte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartViewportVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddSubscriptionOptions(FlatBufferBuilder builder, Offset<io.deephaven.barrage.flatbuf.BarrageSubscriptionOptions> subscriptionOptionsOffset) { builder.AddOffset(3, subscriptionOptionsOffset.Value, 0); }
  public static void AddReverseViewport(FlatBufferBuilder builder, bool reverseViewport) { builder.AddBool(4, reverseViewport, false); }
  public static Offset<io.deephaven.barrage.flatbuf.BarrageSubscriptionRequest> EndBarrageSubscriptionRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<io.deephaven.barrage.flatbuf.BarrageSubscriptionRequest>(o);
  }
}


static public class BarrageSubscriptionRequestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Ticket*/, 1 /*sbyte*/, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Columns*/, 1 /*sbyte*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*Viewport*/, 1 /*sbyte*/, false)
      && verifier.VerifyTable(tablePos, 10 /*SubscriptionOptions*/, io.deephaven.barrage.flatbuf.BarrageSubscriptionOptionsVerify.Verify, false)
      && verifier.VerifyField(tablePos, 12 /*ReverseViewport*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
