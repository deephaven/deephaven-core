// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace io.deephaven.barrage.flatbuf
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Information about the current session state.
public struct SessionInfoResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static SessionInfoResponse GetRootAsSessionInfoResponse(ByteBuffer _bb) { return GetRootAsSessionInfoResponse(_bb, new SessionInfoResponse()); }
  public static SessionInfoResponse GetRootAsSessionInfoResponse(ByteBuffer _bb, SessionInfoResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SessionInfoResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// this is the metadata header to identify this session with future requests; it must be lower-case and remain static for the life of the session
  public sbyte MetadataHeader(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int MetadataHeaderLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<sbyte> GetMetadataHeaderBytes() { return __p.__vector_as_span<sbyte>(4, 1); }
#else
  public ArraySegment<byte>? GetMetadataHeaderBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public sbyte[] GetMetadataHeaderArray() { return __p.__vector_as_array<sbyte>(4); }
  /// this is the session_token; note that it may rotate
  public sbyte SessionToken(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int SessionTokenLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<sbyte> GetSessionTokenBytes() { return __p.__vector_as_span<sbyte>(6, 1); }
#else
  public ArraySegment<byte>? GetSessionTokenBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public sbyte[] GetSessionTokenArray() { return __p.__vector_as_array<sbyte>(6); }
  /// a suggested time for the user to refresh the session if they do not do so earlier; value is denoted in milliseconds since epoch
  public long TokenRefreshDeadlineMs { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<io.deephaven.barrage.flatbuf.SessionInfoResponse> CreateSessionInfoResponse(FlatBufferBuilder builder,
      VectorOffset metadata_headerOffset = default(VectorOffset),
      VectorOffset session_tokenOffset = default(VectorOffset),
      long token_refresh_deadline_ms = 0) {
    builder.StartTable(3);
    SessionInfoResponse.AddTokenRefreshDeadlineMs(builder, token_refresh_deadline_ms);
    SessionInfoResponse.AddSessionToken(builder, session_tokenOffset);
    SessionInfoResponse.AddMetadataHeader(builder, metadata_headerOffset);
    return SessionInfoResponse.EndSessionInfoResponse(builder);
  }

  public static void StartSessionInfoResponse(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddMetadataHeader(FlatBufferBuilder builder, VectorOffset metadataHeaderOffset) { builder.AddOffset(0, metadataHeaderOffset.Value, 0); }
  public static VectorOffset CreateMetadataHeaderVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMetadataHeaderVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMetadataHeaderVectorBlock(FlatBufferBuilder builder, ArraySegment<sbyte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMetadataHeaderVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<sbyte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMetadataHeaderVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddSessionToken(FlatBufferBuilder builder, VectorOffset sessionTokenOffset) { builder.AddOffset(1, sessionTokenOffset.Value, 0); }
  public static VectorOffset CreateSessionTokenVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSessionTokenVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSessionTokenVectorBlock(FlatBufferBuilder builder, ArraySegment<sbyte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSessionTokenVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<sbyte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSessionTokenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddTokenRefreshDeadlineMs(FlatBufferBuilder builder, long tokenRefreshDeadlineMs) { builder.AddLong(2, tokenRefreshDeadlineMs, 0); }
  public static Offset<io.deephaven.barrage.flatbuf.SessionInfoResponse> EndSessionInfoResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<io.deephaven.barrage.flatbuf.SessionInfoResponse>(o);
  }
}


static public class SessionInfoResponseVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*MetadataHeader*/, 1 /*sbyte*/, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*SessionToken*/, 1 /*sbyte*/, false)
      && verifier.VerifyField(tablePos, 8 /*TokenRefreshDeadlineMs*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
