// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace io.deephaven.barrage.flatbuf
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BarrageSnapshotOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static BarrageSnapshotOptions GetRootAsBarrageSnapshotOptions(ByteBuffer _bb) { return GetRootAsBarrageSnapshotOptions(_bb, new BarrageSnapshotOptions()); }
  public static BarrageSnapshotOptions GetRootAsBarrageSnapshotOptions(ByteBuffer _bb, BarrageSnapshotOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BarrageSnapshotOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// see enum for details
  public io.deephaven.barrage.flatbuf.ColumnConversionMode ColumnConversionMode { get { int o = __p.__offset(4); return o != 0 ? (io.deephaven.barrage.flatbuf.ColumnConversionMode)__p.bb.GetSbyte(o + __p.bb_pos) : io.deephaven.barrage.flatbuf.ColumnConversionMode.Stringify; } }
  /// Deephaven reserves a value in the range of primitives as a custom NULL value. This enables more efficient transmission
  /// by eliminating the additional complexity of the validity buffer.
  public bool UseDeephavenNulls { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Specify a preferred batch size. Server is allowed to be configured to restrict possible values. Too small of a
  /// batch size may be dominated with header costs as each batch is wrapped into a separate RecordBatch. Too large of
  /// a payload and it may not fit within the maximum payload size. A good default might be 4096.
  public int BatchSize { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Specify a maximum allowed message size. Server will enforce this limit by reducing batch size (to a lower limit
  /// of one row per batch). If the message size limit cannot be met due to large row sizes, the server will throw a
  /// `Status.RESOURCE_EXHAUSTED` exception
  public int MaxMessageSize { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<io.deephaven.barrage.flatbuf.BarrageSnapshotOptions> CreateBarrageSnapshotOptions(FlatBufferBuilder builder,
      io.deephaven.barrage.flatbuf.ColumnConversionMode column_conversion_mode = io.deephaven.barrage.flatbuf.ColumnConversionMode.Stringify,
      bool use_deephaven_nulls = false,
      int batch_size = 0,
      int max_message_size = 0) {
    builder.StartTable(4);
    BarrageSnapshotOptions.AddMaxMessageSize(builder, max_message_size);
    BarrageSnapshotOptions.AddBatchSize(builder, batch_size);
    BarrageSnapshotOptions.AddUseDeephavenNulls(builder, use_deephaven_nulls);
    BarrageSnapshotOptions.AddColumnConversionMode(builder, column_conversion_mode);
    return BarrageSnapshotOptions.EndBarrageSnapshotOptions(builder);
  }

  public static void StartBarrageSnapshotOptions(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddColumnConversionMode(FlatBufferBuilder builder, io.deephaven.barrage.flatbuf.ColumnConversionMode columnConversionMode) { builder.AddSbyte(0, (sbyte)columnConversionMode, 1); }
  public static void AddUseDeephavenNulls(FlatBufferBuilder builder, bool useDeephavenNulls) { builder.AddBool(1, useDeephavenNulls, false); }
  public static void AddBatchSize(FlatBufferBuilder builder, int batchSize) { builder.AddInt(2, batchSize, 0); }
  public static void AddMaxMessageSize(FlatBufferBuilder builder, int maxMessageSize) { builder.AddInt(3, maxMessageSize, 0); }
  public static Offset<io.deephaven.barrage.flatbuf.BarrageSnapshotOptions> EndBarrageSnapshotOptions(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<io.deephaven.barrage.flatbuf.BarrageSnapshotOptions>(o);
  }
}


static public class BarrageSnapshotOptionsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ColumnConversionMode*/, 1 /*io.deephaven.barrage.flatbuf.ColumnConversionMode*/, 1, false)
      && verifier.VerifyField(tablePos, 6 /*UseDeephavenNulls*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*BatchSize*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*MaxMessageSize*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
