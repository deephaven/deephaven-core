// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace io.deephaven.barrage.flatbuf
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Describes the table update stream the client would like to push to. This is similar to a DoPut but the client
/// will send BarrageUpdateMetadata to explicitly describe the row key space. The updates sent adhere to the table
/// update model semantics; thus BarragePublication enables the client to upload a ticking table.
public struct BarragePublicationRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static BarragePublicationRequest GetRootAsBarragePublicationRequest(ByteBuffer _bb) { return GetRootAsBarragePublicationRequest(_bb, new BarragePublicationRequest()); }
  public static BarragePublicationRequest GetRootAsBarragePublicationRequest(ByteBuffer _bb, BarragePublicationRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BarragePublicationRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The destination Ticket.
  public sbyte Ticket(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int TicketLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<sbyte> GetTicketBytes() { return __p.__vector_as_span<sbyte>(4, 1); }
#else
  public ArraySegment<byte>? GetTicketBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public sbyte[] GetTicketArray() { return __p.__vector_as_array<sbyte>(4); }
  /// Options to configure your request.
  public io.deephaven.barrage.flatbuf.BarragePublicationOptions? PublishOptions { get { int o = __p.__offset(6); return o != 0 ? (io.deephaven.barrage.flatbuf.BarragePublicationOptions?)(new io.deephaven.barrage.flatbuf.BarragePublicationOptions()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<io.deephaven.barrage.flatbuf.BarragePublicationRequest> CreateBarragePublicationRequest(FlatBufferBuilder builder,
      VectorOffset ticketOffset = default(VectorOffset),
      Offset<io.deephaven.barrage.flatbuf.BarragePublicationOptions> publish_optionsOffset = default(Offset<io.deephaven.barrage.flatbuf.BarragePublicationOptions>)) {
    builder.StartTable(2);
    BarragePublicationRequest.AddPublishOptions(builder, publish_optionsOffset);
    BarragePublicationRequest.AddTicket(builder, ticketOffset);
    return BarragePublicationRequest.EndBarragePublicationRequest(builder);
  }

  public static void StartBarragePublicationRequest(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTicket(FlatBufferBuilder builder, VectorOffset ticketOffset) { builder.AddOffset(0, ticketOffset.Value, 0); }
  public static VectorOffset CreateTicketVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTicketVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTicketVectorBlock(FlatBufferBuilder builder, ArraySegment<sbyte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTicketVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<sbyte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTicketVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddPublishOptions(FlatBufferBuilder builder, Offset<io.deephaven.barrage.flatbuf.BarragePublicationOptions> publishOptionsOffset) { builder.AddOffset(1, publishOptionsOffset.Value, 0); }
  public static Offset<io.deephaven.barrage.flatbuf.BarragePublicationRequest> EndBarragePublicationRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<io.deephaven.barrage.flatbuf.BarragePublicationRequest>(o);
  }
}


static public class BarragePublicationRequestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Ticket*/, 1 /*sbyte*/, false)
      && verifier.VerifyTable(tablePos, 6 /*PublishOptions*/, io.deephaven.barrage.flatbuf.BarragePublicationOptionsVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
