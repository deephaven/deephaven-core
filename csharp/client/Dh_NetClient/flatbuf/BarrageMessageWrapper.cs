// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace io.deephaven.barrage.flatbuf
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// The message wrapper used for all barrage app_metadata fields.
public struct BarrageMessageWrapper : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static BarrageMessageWrapper GetRootAsBarrageMessageWrapper(ByteBuffer _bb) { return GetRootAsBarrageMessageWrapper(_bb, new BarrageMessageWrapper()); }
  public static BarrageMessageWrapper GetRootAsBarrageMessageWrapper(ByteBuffer _bb, BarrageMessageWrapper obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyBarrageMessageWrapper(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, BarrageMessageWrapperVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BarrageMessageWrapper __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Used to identify this type of app_metadata vs other applications.
  /// The magic value is '0x6E687064'. It is the numerical representation of the ASCII "dphn".
  public uint Magic { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// The msg type being sent.
  public io.deephaven.barrage.flatbuf.BarrageMessageType MsgType { get { int o = __p.__offset(6); return o != 0 ? (io.deephaven.barrage.flatbuf.BarrageMessageType)__p.bb.GetSbyte(o + __p.bb_pos) : io.deephaven.barrage.flatbuf.BarrageMessageType.None; } }
  /// The msg payload.
  public sbyte MsgPayload(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int MsgPayloadLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<sbyte> GetMsgPayloadBytes() { return __p.__vector_as_span<sbyte>(8, 1); }
#else
  public ArraySegment<byte>? GetMsgPayloadBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public sbyte[] GetMsgPayloadArray() { return __p.__vector_as_array<sbyte>(8); }

  public static Offset<io.deephaven.barrage.flatbuf.BarrageMessageWrapper> CreateBarrageMessageWrapper(FlatBufferBuilder builder,
      uint magic = 0,
      io.deephaven.barrage.flatbuf.BarrageMessageType msg_type = io.deephaven.barrage.flatbuf.BarrageMessageType.None,
      VectorOffset msg_payloadOffset = default(VectorOffset)) {
    builder.StartTable(3);
    BarrageMessageWrapper.AddMsgPayload(builder, msg_payloadOffset);
    BarrageMessageWrapper.AddMagic(builder, magic);
    BarrageMessageWrapper.AddMsgType(builder, msg_type);
    return BarrageMessageWrapper.EndBarrageMessageWrapper(builder);
  }

  public static void StartBarrageMessageWrapper(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddMagic(FlatBufferBuilder builder, uint magic) { builder.AddUint(0, magic, 0); }
  public static void AddMsgType(FlatBufferBuilder builder, io.deephaven.barrage.flatbuf.BarrageMessageType msgType) { builder.AddSbyte(1, (sbyte)msgType, 0); }
  public static void AddMsgPayload(FlatBufferBuilder builder, VectorOffset msgPayloadOffset) { builder.AddOffset(2, msgPayloadOffset.Value, 0); }
  public static VectorOffset CreateMsgPayloadVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMsgPayloadVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMsgPayloadVectorBlock(FlatBufferBuilder builder, ArraySegment<sbyte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMsgPayloadVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<sbyte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMsgPayloadVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<io.deephaven.barrage.flatbuf.BarrageMessageWrapper> EndBarrageMessageWrapper(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<io.deephaven.barrage.flatbuf.BarrageMessageWrapper>(o);
  }
  public static void FinishBarrageMessageWrapperBuffer(FlatBufferBuilder builder, Offset<io.deephaven.barrage.flatbuf.BarrageMessageWrapper> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBarrageMessageWrapperBuffer(FlatBufferBuilder builder, Offset<io.deephaven.barrage.flatbuf.BarrageMessageWrapper> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class BarrageMessageWrapperVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Magic*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*MsgType*/, 1 /*io.deephaven.barrage.flatbuf.BarrageMessageType*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*MsgPayload*/, 1 /*sbyte*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
