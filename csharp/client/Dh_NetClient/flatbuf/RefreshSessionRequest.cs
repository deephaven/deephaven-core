// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace io.deephaven.barrage.flatbuf
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// Refresh the provided session.
public struct RefreshSessionRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static RefreshSessionRequest GetRootAsRefreshSessionRequest(ByteBuffer _bb) { return GetRootAsRefreshSessionRequest(_bb, new RefreshSessionRequest()); }
  public static RefreshSessionRequest GetRootAsRefreshSessionRequest(ByteBuffer _bb, RefreshSessionRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RefreshSessionRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// this session token is only required if it is the first request of a handshake rpc stream
  public sbyte Session(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int SessionLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<sbyte> GetSessionBytes() { return __p.__vector_as_span<sbyte>(4, 1); }
#else
  public ArraySegment<byte>? GetSessionBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public sbyte[] GetSessionArray() { return __p.__vector_as_array<sbyte>(4); }

  public static Offset<io.deephaven.barrage.flatbuf.RefreshSessionRequest> CreateRefreshSessionRequest(FlatBufferBuilder builder,
      VectorOffset sessionOffset = default(VectorOffset)) {
    builder.StartTable(1);
    RefreshSessionRequest.AddSession(builder, sessionOffset);
    return RefreshSessionRequest.EndRefreshSessionRequest(builder);
  }

  public static void StartRefreshSessionRequest(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddSession(FlatBufferBuilder builder, VectorOffset sessionOffset) { builder.AddOffset(0, sessionOffset.Value, 0); }
  public static VectorOffset CreateSessionVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSessionVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSessionVectorBlock(FlatBufferBuilder builder, ArraySegment<sbyte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSessionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<sbyte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSessionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<io.deephaven.barrage.flatbuf.RefreshSessionRequest> EndRefreshSessionRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<io.deephaven.barrage.flatbuf.RefreshSessionRequest>(o);
  }
}


static public class RefreshSessionRequestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Session*/, 1 /*sbyte*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
